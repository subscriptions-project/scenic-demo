{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/css/components/dialog.css.js","build/css/ui/ui.css.js","node_modules/promise-pjs/promise.js","node_modules/web-activities/activity-ports.js","src/api/client-event-manager-api.js","src/api/deferred-account-creation.js","src/api/entitlements.js","src/api/logger-api.js","src/api/metering.js","src/api/offer.js","src/api/propensity-api.js","src/api/subscribe-response.js","src/api/subscriptions.js","src/api/user-data.js","src/components/activities.js","src/components/dialog-manager.js","src/components/dialog.js","src/components/friendly-iframe.js","src/components/graypane.js","src/components/view.js","src/main.js","src/model/doc.js","src/model/page-config-resolver.js","src/model/page-config.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/object-values.js","src/polyfills/promise.js","src/proto/api_messages.js","src/runtime/analytics-service.js","src/runtime/button-api.js","src/runtime/callbacks.js","src/runtime/client-event-manager.js","src/runtime/contributions-flow.js","src/runtime/deferred-account-flow.js","src/runtime/deps.js","src/runtime/entitlements-manager.js","src/runtime/event-type-mapping.js","src/runtime/experiment-flags.js","src/runtime/experiments.js","src/runtime/fetcher.js","src/runtime/jserror.js","src/runtime/link-accounts-flow.js","src/runtime/logger.js","src/runtime/login-notification-api.js","src/runtime/login-prompt-api.js","src/runtime/meter-regwall-api.js","src/runtime/meter-toast-api.js","src/runtime/offers-api.js","src/runtime/offers-flow.js","src/runtime/pay-client.js","src/runtime/pay-flow.js","src/runtime/propensity-server.js","src/runtime/propensity.js","src/runtime/runtime.js","src/runtime/services.js","src/runtime/smart-button-api.js","src/runtime/storage.js","src/runtime/wait-for-subscription-lookup-api.js","src/ui/activity-iframe-view.js","src/ui/loading-view.js","src/ui/toast.js","src/utils/activity-utils.js","src/utils/animation.js","src/utils/bytes.js","src/utils/date-utils.js","src/utils/document-ready.js","src/utils/dom.js","src/utils/error-logger.js","src/utils/errors.js","src/utils/i18n.js","src/utils/json.js","src/utils/jwt.js","src/utils/log.js","src/utils/object.js","src/utils/preconnect.js","src/utils/random.js","src/utils/string.js","src/utils/style.js","src/utils/types.js","src/utils/url.js","src/utils/xhr.js","third_party/gpay/src/constants.js","third_party/gpay/src/element_injector.js","third_party/gpay/src/graypane.js","third_party/gpay/src/pay_frame_helper.js","third_party/gpay/src/payjs_async.js","third_party/gpay/src/payments_client_delegate_interface.js","third_party/gpay/src/payments_request_delegate.js","third_party/gpay/src/payments_web_activity_delegate.js","third_party/gpay/src/post_message_service.js","third_party/gpay/src/upi_handler.js","third_party/gpay/src/utils.js","third_party/gpay/src/validator.js","third_party/gpay/third_party/random_uuid/Random.uuid.js"],"names":[],"mappings":"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","file":"subscriptions.max.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const CSS = \".swg-dialog,.swg-toast{box-sizing:border-box;background-color:#fff!important}.swg-toast{position:fixed!important;bottom:0!important;max-height:46px!important;z-index:2147483647!important;border:none!important}@media (max-height:640px), (max-width:640px){.swg-dialog,.swg-toast{width:480px!important;left:-240px!important;margin-left:50vw!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}@media (min-width:640px) and (min-height:640px){.swg-dialog{width:630px!important;left:-315px!important;margin-left:50vw!important;background-color:transparent!important;border:none!important}.swg-toast{left:0!important}}@media (max-width:480px){.swg-dialog,.swg-toast{width:100%!important;left:0!important;right:0!important;margin-left:0!important}}\\n/*# sourceURL=/./src/components/dialog.css*/\";","export const CSS = \"body{padding:0;margin:0}swg-container,swg-loading,swg-loading-animate,swg-loading-image{display:block}swg-loading-container{width:100%!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-align:center!important;align-items:center!important;-ms-flex-pack:center!important;justify-content:center!important;min-height:148px!important;height:100%!important;bottom:0!important;margin-top:5px!important;z-index:2147483647!important}@media (min-height:630px), (min-width:630px){swg-loading-container{width:560px!important;margin-left:35px!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;background-color:#fff!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}swg-loading{z-index:2147483647!important;width:36px;height:36px;overflow:hidden;animation:mspin-rotate 1568.63ms linear infinite}swg-loading-animate{animation:mspin-revrot 5332ms steps(4) infinite}swg-loading-image{background-image:url($assets$/loader.svg);background-size:100%;width:11664px;height:36px;animation:swg-loading-film 5332ms steps(324) infinite}@keyframes swg-loading-film{0%{transform:translateX(0)}to{transform:translateX(-11664px)}}@keyframes mspin-rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes mspin-revrot{0%{transform:rotate(0deg)}to{transform:rotate(-1turn)}}\\n/*# sourceURL=/./src/ui/ui.css*/\";","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid a promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid a promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid a promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // If we're adopting another promise, it's not the end of the promise chain,\n  // the new promise is.\n  if (adoptee) {\n    adoptee._isChainEnd = false;\n  }\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * @license\n * Copyright 2017 The Web Activities Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n /** Version: 1.24 */\n'use strict';\n\n/*eslint no-unused-vars: 0*/\n\n\n/**\n * @enum {string}\n */\nconst ActivityMode = {\n  IFRAME: 'iframe',\n  POPUP: 'popup',\n  REDIRECT: 'redirect',\n};\n\n\n/**\n * The result code used for `ActivityResult`.\n * @enum {string}\n */\nconst ActivityResultCode = {\n  OK: 'ok',\n  CANCELED: 'canceled',\n  FAILED: 'failed',\n};\n\n\n/**\n * The result of an activity. The activity implementation returns this object\n * for a successful result, a cancelation or a failure.\n * @struct\n */\nclass ActivityResult {\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {!ActivityMode} mode\n   * @param {string} origin\n   * @param {boolean} originVerified\n   * @param {boolean} secureChannel\n   */\n  constructor(code, data, mode, origin, originVerified, secureChannel) {\n    /** @const {!ActivityResultCode} */\n    this.code = code;\n    /** @const {*} */\n    this.data = code == ActivityResultCode.OK ? data : null;\n    /** @const {!ActivityMode} */\n    this.mode = mode;\n    /** @const {string} */\n    this.origin = origin;\n    /** @const {boolean} */\n    this.originVerified = originVerified;\n    /** @const {boolean} */\n    this.secureChannel = secureChannel;\n    /** @const {boolean} */\n    this.ok = code == ActivityResultCode.OK;\n    /** @const {?Error} */\n    this.error = code == ActivityResultCode.FAILED ?\n        new Error(String(data) || '') :\n        null;\n  }\n}\n\n\n/**\n * The activity request that different types of hosts can be started with.\n * @typedef {{\n *   requestId: string,\n *   returnUrl: string,\n *   args: ?Object,\n *   origin: (string|undefined),\n *   originVerified: (boolean|undefined),\n * }}\n */\nlet ActivityRequest;\n\n\n/**\n * The activity \"open\" options used for popups and redirects.\n *\n * - returnUrl: override the return URL. By default, the current URL will be\n *   used.\n * - skipRequestInUrl: removes the activity request from the URL, in case\n *   redirect is used. By default, the activity request is appended to the\n *   activity URL. This option can be used if the activity request is passed\n *   to the activity by some alternative means.\n * - disableRedirectFallback: disallows popup fallback to redirect. By default\n *   the redirect fallback is allowed. This option has to be used very carefully\n *   because there are many user agents that may fail to open a popup and it\n *   won't be always possible for the opener window to even be aware of such\n *   failures.\n *\n * @typedef {{\n *   returnUrl: (string|undefined),\n *   skipRequestInUrl: (boolean|undefined),\n *   disableRedirectFallback: (boolean|undefined),\n *   width: (number|undefined),\n *   height: (number|undefined),\n * }}\n */\nlet ActivityOpenOptions;\n\n\n/**\n * Activity client-side binding. The port provides limited ways to communicate\n * with the activity and receive signals and results from it. Not every type\n * of activity exposes a port.\n *\n * @interface\n */\nclass ActivityPort {\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!ActivityResult>}\n   */\n  acceptResult() {}\n}\n\n\n/**\n * Activity client-side binding for messaging.\n *\n * Whether the host can or cannot receive a message depends on the type of\n * host and its state. Ensure that the code has an alternative path if\n * messaging is not available.\n *\n * @interface\n */\nclass ActivityMessagingPort {\n\n  /**\n   * Returns the target window where host is loaded. May be unavailable.\n   * @return {?Window}\n   */\n  getTargetWin() {}\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} payload\n   */\n  message(payload) {}\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} callback\n   */\n  onMessage(callback) {}\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  messageChannel(opt_name) {}\n}\n\n\n\n/** DOMException.ABORT_ERR name */\nconst ABORT_ERR_NAME = 'AbortError';\n\n/** DOMException.ABORT_ERR = 20 */\nconst ABORT_ERR_CODE = 20;\n\n/** @type {?HTMLAnchorElement} */\nlet aResolver;\n\n\n/**\n * @param {string} urlString\n * @return {!HTMLAnchorElement}\n */\nfunction parseUrl(urlString) {\n  if (!aResolver) {\n    aResolver = /** @type {!HTMLAnchorElement} */ (document.createElement('a'));\n  }\n  aResolver.href = urlString;\n  return /** @type {!HTMLAnchorElement} */ (aResolver);\n}\n\n\n/**\n * @param {!Location|!URL|!HTMLAnchorElement} loc\n * @return {string}\n */\nfunction getOrigin(loc) {\n  if (loc.origin) {\n    return loc.origin;\n  }\n  // Make sure that the origin is normalized. Specifically on IE, host sometimes\n  // includes the default port, which is not per standard.\n  const protocol = loc.protocol;\n  let host = loc.host;\n  if (protocol == 'https:' && host.indexOf(':443') == host.length - 4) {\n    host = host.replace(':443', '');\n  } else if (protocol == 'http:' && host.indexOf(':80') == host.length - 3) {\n    host = host.replace(':80', '');\n  }\n  return protocol + '//' + host;\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction getOriginFromUrl(urlString) {\n  return getOrigin(parseUrl(urlString));\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction removeFragment(urlString) {\n  const index = urlString.indexOf('#');\n  if (index == -1) {\n    return urlString;\n  }\n  return urlString.substring(0, index);\n}\n\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nfunction parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        const item = param.split('=');\n        const key = decodeURIComponent(item[0] || '');\n        const value = decodeURIComponent(item[1] || '');\n        if (key) {\n          params[key] = value;\n        }\n        return params;\n      }, {});\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to get from the query string.\n * @return {?string}\n */\nfunction getQueryParam(queryString, param) {\n  return parseQueryString(queryString)[param];\n}\n\n\n/**\n * Add a query-like parameter to the fragment string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nfunction addFragmentParam(url, param, value) {\n  return url +\n      (url.indexOf('#') == -1 ? '#' : '&') +\n      encodeURIComponent(param) + '=' + encodeURIComponent(value);\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to remove from the query string.\n * @return {?string}\n */\nfunction removeQueryParam(queryString, param) {\n  if (!queryString) {\n    return queryString;\n  }\n  const search = encodeURIComponent(param) + '=';\n  let index = -1;\n  do {\n    index = queryString.indexOf(search, index);\n    if (index != -1) {\n      const prev = index > 0 ? queryString.substring(index - 1, index) : '';\n      if (prev == '' || prev == '?' || prev == '#' || prev == '&') {\n        let end = queryString.indexOf('&', index + 1);\n        if (end == -1) {\n          end = queryString.length;\n        }\n        queryString =\n            queryString.substring(0, index) +\n            queryString.substring(end + 1);\n      } else {\n        index++;\n      }\n    }\n  } while (index != -1 && index < queryString.length);\n  return queryString;\n}\n\n\n/**\n * @param {!ActivityRequest} request\n * @return {string}\n */\nfunction serializeRequest(request) {\n  const map = {\n    'requestId': request.requestId,\n    'returnUrl': request.returnUrl,\n    'args': request.args,\n  };\n  if (request.origin !== undefined) {\n    map['origin'] = request.origin;\n  }\n  if (request.originVerified !== undefined) {\n    map['originVerified'] = request.originVerified;\n  }\n  return JSON.stringify(map);\n}\n\n\n/**\n * @param {*} error\n * @return {boolean}\n */\nfunction isAbortError(error) {\n  if (!error || typeof error != 'object') {\n    return false;\n  }\n  return (error['name'] === ABORT_ERR_NAME);\n}\n\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} opt_message\n * @return {!DOMException}\n */\nfunction createAbortError(win, opt_message) {\n  const message = 'AbortError' + (opt_message ? ': ' + opt_message : '');\n  let error = null;\n  if (typeof win['DOMException'] == 'function') {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string, string)} */ (\n        win['DOMException']);\n    try {\n      error = new constr(message, ABORT_ERR_NAME);\n    } catch (e) {\n      // Ignore. In particular, `new DOMException()` fails in Edge.\n    }\n  }\n  if (!error) {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string)} */ (\n        Error);\n    error = new constr(message);\n    error.name = ABORT_ERR_NAME;\n    error.code = ABORT_ERR_CODE;\n  }\n  return error;\n}\n\n\n/**\n * Resolves the activity result as a promise:\n *  - `OK` result is yielded as the promise's payload;\n *  - `CANCEL` result is rejected with the `AbortError`;\n *  - `FAILED` result is rejected with the embedded error.\n *\n * @param {!Window} win\n * @param {!ActivityResult} result\n * @param {function((!ActivityResult|!Promise))} resolver\n */\nfunction resolveResult(win, result, resolver) {\n  if (result.ok) {\n    resolver(result);\n  } else {\n    const error = result.error || createAbortError(win);\n    error.activityResult = result;\n    resolver(Promise.reject(error));\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIeBrowser(win) {\n  // MSIE and Trident are typical user agents for IE browsers.\n  const nav = win.navigator;\n  return /Trident|MSIE|IEMobile/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Error} e\n */\nfunction throwAsync(e) {\n  setTimeout(() => {throw e;});\n}\n\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nfunction isNodeConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n\n\nconst SENTINEL = '__ACTIVITIES__';\n\n\n/**\n * The messenger helper for activity's port and host.\n */\nclass Messenger {\n\n  /**\n   * @param {!Window} win\n   * @param {!Window|function():?Window} targetOrCallback\n   * @param {?string} targetOrigin\n   * @param {boolean} requireTarget\n   */\n  constructor(win, targetOrCallback, targetOrigin, requireTarget) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Window|function():?Window} */\n    this.targetOrCallback_ = targetOrCallback;\n\n    /**\n     * May start as unknown (`null`) until received in the first message.\n     * @private {?string}\n     */\n    this.targetOrigin_ = targetOrigin;\n\n    /** @private @const {boolean} */\n    this.requireTarget_ = requireTarget;\n\n    /** @private {?Window} */\n    this.target_ = null;\n\n    /** @private {boolean} */\n    this.acceptsChannel_ = false;\n\n    /** @private {?MessagePort} */\n    this.port_ = null;\n\n    /** @private {?function(string, ?Object)} */\n    this.onCommand_ = null;\n\n    /** @private {?function(!Object)} */\n    this.onCustomMessage_ = null;\n\n    /**\n     * @private {?Object<string, !ChannelHolder>}\n     */\n    this.channels_ = null;\n\n    /** @private @const */\n    this.boundHandleEvent_ = this.handleEvent_.bind(this);\n  }\n\n  /**\n   * Connect the port to the host or vice versa.\n   * @param {function(string, ?Object)} onCommand\n   */\n  connect(onCommand) {\n    if (this.onCommand_) {\n      throw new Error('already connected');\n    }\n    this.onCommand_ = onCommand;\n    this.win_.addEventListener('message', this.boundHandleEvent_);\n  }\n\n  /**\n   * Disconnect messenger.\n   */\n  disconnect() {\n    if (this.onCommand_) {\n      this.onCommand_ = null;\n      if (this.port_) {\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.win_.removeEventListener('message', this.boundHandleEvent_);\n      if (this.channels_) {\n        for (const k in this.channels_) {\n          const channelObj = this.channels_[k];\n          if (channelObj.port1) {\n            closePort(channelObj.port1);\n          }\n          if (channelObj.port2) {\n            closePort(channelObj.port2);\n          }\n        }\n        this.channels_ = null;\n      }\n    }\n  }\n\n  /**\n   * Returns whether the messenger has been connected already.\n   * @return {boolean}\n   */\n  isConnected() {\n    return this.targetOrigin_ != null;\n  }\n\n  /**\n   * Returns the messaging target. Only available when connection has been\n   * establihsed.\n   * @return {!Window}\n   */\n  getTarget() {\n    const target = this.getOptionalTarget_();\n    if (!target) {\n      throw new Error('not connected');\n    }\n    return target;\n  }\n\n  /**\n   * @return {?Window}\n   * @private\n   */\n  getOptionalTarget_() {\n    if (this.onCommand_ && !this.target_) {\n      if (typeof this.targetOrCallback_ == 'function') {\n        this.target_ = this.targetOrCallback_();\n      } else {\n        this.target_ = /** @type {!Window} */ (this.targetOrCallback_);\n      }\n    }\n    return this.target_;\n  }\n\n  /**\n   * Returns the messaging origin. Only available when connection has been\n   * establihsed.\n   * @return {string}\n   */\n  getTargetOrigin() {\n    if (this.targetOrigin_ == null) {\n      throw new Error('not connected');\n    }\n    return this.targetOrigin_;\n  }\n\n  /**\n   * The host sends this message to the client to indicate that it's ready to\n   * start communicating. The client is expected to respond back with the\n   * \"start\" command. See `sendStartCommand` method.\n   */\n  sendConnectCommand() {\n    // TODO(dvoytenko): MessageChannel is critically necessary for IE/Edge,\n    // since window messaging doesn't always work. It's also preferred as an API\n    // for other browsers: it's newer, cleaner and arguably more secure.\n    // Unfortunately, browsers currently do not propagate user gestures via\n    // MessageChannel, only via window messaging. This should be re-enabled\n    // once browsers fix user gesture propagation.\n    // See:\n    // Safari: https://bugs.webkit.org/show_bug.cgi?id=186593\n    // Chrome: https://bugs.chromium.org/p/chromium/issues/detail?id=851493\n    // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1469422\n    const acceptsChannel = isIeBrowser(this.win_) || isEdgeBrowser(this.win_);\n    this.sendCommand('connect', {'acceptsChannel': acceptsChannel});\n  }\n\n  /**\n   * The client sends this message to the host upon receiving the \"connect\"\n   * message to start the main communication channel. As a payload, the message\n   * will contain the provided start arguments.\n   * @param {?Object} args\n   */\n  sendStartCommand(args) {\n    let channel = null;\n    if (this.acceptsChannel_ && typeof this.win_.MessageChannel == 'function') {\n      channel = new this.win_.MessageChannel();\n    }\n    if (channel) {\n      this.sendCommand('start', args, [channel.port2]);\n      // It's critical to switch to port messaging only after \"start\" has been\n      // sent. Otherwise, it won't be delivered.\n      this.switchToChannel_(channel.port1);\n    } else {\n      this.sendCommand('start', args);\n    }\n  }\n\n  /**\n   * Sends the specified command from the port to the host or vice versa.\n   * @param {string} cmd\n   * @param {?Object=} opt_payload\n   * @param {?Array=} opt_transfer\n   */\n  sendCommand(cmd, opt_payload, opt_transfer) {\n    const data = {\n      'sentinel': SENTINEL,\n      'cmd': cmd,\n      'payload': opt_payload || null,\n    };\n    if (this.port_) {\n      this.port_.postMessage(data, opt_transfer || undefined);\n    } else {\n      const target = this.getTarget();\n      // Only \"connect\" command is allowed to use `targetOrigin == '*'`\n      const targetOrigin =\n          cmd == 'connect' ?\n          (this.targetOrigin_ != null ? this.targetOrigin_ : '*') :\n          this.getTargetOrigin();\n      target.postMessage(data, targetOrigin, opt_transfer || undefined);\n    }\n  }\n\n  /**\n   * Sends a message to the client.\n   * @param {!Object} payload\n   */\n  customMessage(payload) {\n    this.sendCommand('msg', payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the client.\n   * @param {function(!Object)} callback\n   */\n  onCustomMessage(callback) {\n    this.onCustomMessage_ = callback;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  startChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      const channel = new this.win_.MessageChannel();\n      channelObj.port1 = channel.port1;\n      channelObj.port2 = channel.port2;\n      channelObj.resolver(channelObj.port1);\n    }\n    if (channelObj.port2) {\n      // Not yet sent.\n      this.sendCommand('cnset', {'name': name}, [channelObj.port2]);\n      channelObj.port2 = null;\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  askChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      this.sendCommand('cnget', {'name': name});\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string} name\n   * @param {!MessagePort} port\n   * @private\n   */\n  receiveChannel_(name, port) {\n    const channelObj = this.getChannelObj_(name);\n    channelObj.port1 = port;\n    channelObj.resolver(port);\n  }\n\n  /**\n   * @param {string} name\n   * @return {!ChannelHolder}\n   */\n  getChannelObj_(name) {\n    if (!this.channels_) {\n      this.channels_ = {};\n    }\n    let channelObj = this.channels_[name];\n    if (!channelObj) {\n      let resolver;\n      const promise = new Promise(resolve => {\n        resolver = resolve;\n      });\n      channelObj = {\n        port1: null,\n        port2: null,\n        resolver,\n        promise,\n      };\n      this.channels_[name] = channelObj;\n    }\n    return channelObj;\n  }\n\n  /**\n   * @param {!MessagePort} port\n   * @private\n   */\n  switchToChannel_(port) {\n    if (this.port_) {\n      closePort(this.port_);\n    }\n    this.port_ = port;\n    this.port_.onmessage = event => {\n      const data = event.data;\n      const cmd = data && data['cmd'];\n      const payload = data && data['payload'] || null;\n      if (cmd) {\n        this.handleCommand_(cmd, payload, event);\n      }\n    };\n    // Even though all messaging will switch to ports, the window-based message\n    // listener will be preserved just in case the host is refreshed and needs\n    // another connection.\n  }\n\n  /**\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleEvent_(event) {\n    if (this.requireTarget_ && this.getOptionalTarget_() != event.source) {\n      // When target is required, confirm it against the event.source. This\n      // is normally only needed for ports where a single window can include\n      // multiple iframes to match the event to a specific iframe. Otherwise,\n      // the origin checks below are sufficient.\n      return;\n    }\n    const data = event.data;\n    if (!data || data['sentinel'] != SENTINEL) {\n      return;\n    }\n    const cmd = data['cmd'];\n    if (this.port_ && cmd != 'connect' && cmd != 'start') {\n      // Messaging channel has already taken over. However, the \"connect\" and\n      // \"start\" commands are allowed to proceed in case re-connection is\n      // requested.\n      return;\n    }\n    const origin = /** @type {string} */ (event.origin);\n    const payload = data['payload'] || null;\n    if (this.targetOrigin_ == null && cmd == 'start') {\n      this.targetOrigin_ = origin;\n    }\n    if (this.targetOrigin_ == null && event.source) {\n      if (this.getOptionalTarget_() == event.source) {\n        this.targetOrigin_ = origin;\n      }\n    }\n    // Notice that event.source may differ from the target because of\n    // friendly-iframe intermediaries.\n    if (origin != this.targetOrigin_) {\n      return;\n    }\n    this.handleCommand_(cmd, payload, event);\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleCommand_(cmd, payload, event) {\n    if (cmd == 'connect') {\n      if (this.port_) {\n        // In case the port has already been open - close it to reopen it\n        // again later.\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.acceptsChannel_ = payload && payload['acceptsChannel'] || false;\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'start') {\n      const port = event.ports && event.ports[0];\n      if (port) {\n        this.switchToChannel_(port);\n      }\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'msg') {\n      if (this.onCustomMessage_ != null && payload != null) {\n        this.onCustomMessage_(payload);\n      }\n    } else if (cmd == 'cnget') {\n      const name = payload['name'];\n      this.startChannel(name);\n    } else if (cmd == 'cnset') {\n      const name = payload['name'];\n      const port = event.ports[0];\n      this.receiveChannel_(name, /** @type {!MessagePort} */ (port));\n    } else {\n      this.onCommand_(cmd, payload);\n    }\n  }\n}\n\n\n/**\n * @param {!MessagePort} port\n */\nfunction closePort(port) {\n  try {\n    port.close();\n  } catch (e) {\n    // Ignore.\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the iframe case. Unlike other types\n * of activities, iframe-based activities are always connected and can react\n * to size requests.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityIframePort {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   */\n  constructor(iframe, url, opt_args) {\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = iframe;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (this.iframe_.ownerDocument.defaultView);\n\n    /** @private @const {string} */\n    this.targetOrigin_ = getOriginFromUrl(url);\n\n    /** @private {boolean} */\n    this.connected_ = false;\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function()} */\n    this.readyResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.readyPromise_ = new Promise(resolve => {\n      this.readyResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?function(number)} */\n    this.onResizeRequest_ = null;\n\n    /** @private {?number} */\n    this.requestedHeight_ = null;\n\n    /** @private @const {!Messenger} */\n    this.messenger_ = new Messenger(\n        this.win_,\n        () => this.iframe_.contentWindow,\n        this.targetOrigin_,\n        /* requireTarget */ true);\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.IFRAME;\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    if (!isNodeConnected(this.iframe_)) {\n      throw new Error('iframe must be in DOM');\n    }\n    this.messenger_.connect(this.handleCommand_.bind(this));\n    this.iframe_.src = this.url_;\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.connected_ = false;\n    this.messenger_.disconnect();\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.iframe_.contentWindow || null;\n  }\n\n  /** @override */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /** @override */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /** @override */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.readyPromise_;\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    this.onResizeRequest_ = callback;\n    Promise.resolve().then(() => {\n      if (this.requestedHeight_ != null) {\n        callback(this.requestedHeight_);\n      }\n    });\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    if (!this.connected_) {\n      return;\n    }\n    const height = this.iframe_.offsetHeight;\n    this.messenger_.sendCommand('resized', {'height': height});\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.connected_ = true;\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      if (this.resultResolver_) {\n        const code = /** @type {!ActivityResultCode} */ (payload['code']);\n        const data =\n            code == ActivityResultCode.FAILED ?\n            new Error(payload['data'] || '') :\n            payload['data'];\n        const result = new ActivityResult(\n            code,\n            data,\n            ActivityMode.IFRAME,\n            this.messenger_.getTargetOrigin(),\n            /* originVerified */ true,\n            /* secureChannel */ true);\n        resolveResult(this.win_, result, this.resultResolver_);\n        this.resultResolver_ = null;\n        this.messenger_.sendCommand('close');\n        this.disconnect();\n      }\n    } else if (cmd == 'ready') {\n      if (this.readyResolver_) {\n        this.readyResolver_();\n        this.readyResolver_ = null;\n      }\n    } else if (cmd == 'resize') {\n      this.requestedHeight_ = /** @type {number} */ (payload['height']);\n      if (this.onResizeRequest_) {\n        this.onResizeRequest_(this.requestedHeight_);\n      }\n    }\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityWindowPort {\n\n  /**\n   * @param {!Window} win\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   */\n  constructor(win, requestId, url, target, opt_args, opt_options) {\n    const isValidTarget =\n        target &&\n        (target == '_blank' || target == '_top' || target[0] != '_');\n    if (!isValidTarget) {\n      throw new Error('The only allowed targets are \"_blank\", \"_top\"' +\n          ' and name targets');\n    }\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {string} */\n    this.requestId_ = requestId;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {string} */\n    this.openTarget_ = target;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n    /** @private @const {!ActivityOpenOptions} */\n    this.options_ = opt_options || {};\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?Window} */\n    this.targetWin_ = null;\n\n    /** @private {?number} */\n    this.heartbeatInterval_ = null;\n\n    /** @private {?Messenger} */\n    this.messenger_ = null;\n  }\n\n  /** @override */\n  getMode() {\n    return this.openTarget_ == '_top' ?\n        ActivityMode.REDIRECT :\n        ActivityMode.POPUP;\n  }\n\n  /**\n   * Opens the activity in a window, either as a popup or via redirect.\n   *\n   * Returns the promise that will yield when the window returns or closed.\n   * Notice, that this promise may never complete if \"redirect\" mode was used.\n   *\n   * @return {!Promise}\n   */\n  open() {\n    return this.openInternal_();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  whenConnected() {\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    if (this.heartbeatInterval_) {\n      this.win_.clearInterval(this.heartbeatInterval_);\n      this.heartbeatInterval_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.disconnect();\n      this.messenger_ = null;\n    }\n    if (this.targetWin_) {\n      // Try to close the popup window. The host will also try to do the same.\n      try {\n        this.targetWin_.close();\n      } catch (e) {\n        // Ignore.\n      }\n      this.targetWin_ = null;\n    }\n    this.resultResolver_ = null;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.targetWin_;\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /**\n   * Sends a message to the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * This method wraps around window's open method. It first tries to execute\n   * `open` call with the provided target and if it fails, it retries the call\n   * with the `_top` target. This is necessary given that in some embedding\n   * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n   * is blocked by default.\n   * @return {!Promise}\n   * @private\n   */\n  openInternal_() {\n    const featuresStr = this.buildFeatures_();\n\n    // Protectively, the URL will contain the request payload, unless explicitly\n    // directed not to via `skipRequestInUrl` option.\n    let url = this.url_;\n    if (!this.options_.skipRequestInUrl) {\n      const returnUrl =\n          this.options_.returnUrl ||\n          removeFragment(this.win_.location.href);\n      const requestString = serializeRequest({\n        requestId: this.requestId_,\n        returnUrl,\n        args: this.args_,\n      });\n      url = addFragmentParam(url, '__WA__', requestString);\n    }\n\n    // Open the window.\n    let targetWin;\n    let openTarget = this.openTarget_;\n    // IE does not support CORS popups - the popup has to fallback to redirect\n    // mode.\n    if (openTarget != '_top') {\n      if (isIeBrowser(this.win_)) {\n        openTarget = '_top';\n      }\n    }\n    // Try first with the specified target. If we're inside the WKWebView or\n    // a similar environments, this method is expected to fail by default for\n    // all targets except `_top`.\n    try {\n      targetWin = this.win_.open(url, openTarget, featuresStr);\n    } catch (e) {\n      // Ignore.\n    }\n    // Then try with `_top` target.\n    if (!targetWin &&\n        openTarget != '_top' &&\n        !this.options_.disableRedirectFallback) {\n      openTarget = '_top';\n      try {\n        targetWin = this.win_.open(url, openTarget);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n\n    // Setup the target window.\n    if (targetWin) {\n      this.targetWin_ = targetWin;\n      if (openTarget != '_top') {\n        this.setupPopup_();\n      }\n    } else {\n      this.disconnectWithError_(new Error('failed to open window'));\n    }\n\n    // Return result promise, even though it may never complete.\n    return this.resultPromise_.catch(() => {\n      // Ignore. Call to the `acceptResult()` should fail if needed.\n    });\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  buildFeatures_() {\n    // The max width and heights are calculated as following:\n    // MaxSize = AvailSize - ControlsSize\n    // ControlsSize = OuterSize - InnerSize\n    const screen = this.win_.screen;\n    const availWidth = screen.availWidth || screen.width;\n    const availHeight = screen.availHeight || screen.height;\n    const isTop = this.isTopWindow_();\n    const isEdge = isEdgeBrowser(this.win_);\n    // Limit controls to 100px width and height. Notice that it's only\n    // possible to calculate controls size in the top window, not in iframes.\n    // Notice that the Edge behavior is somewhat unique. If we can't find the\n    // right width/height, it will launch in the full-screen. Other browsers\n    // deal with such cases more gracefully.\n    const controlsWidth =\n        isTop && this.win_.outerWidth > this.win_.innerWidth ?\n        Math.min(100, this.win_.outerWidth - this.win_.innerWidth) :\n        (isEdge ? 100 : 0);\n    const controlsHeight =\n        isTop && this.win_.outerHeight > this.win_.innerHeight ?\n        Math.min(100, this.win_.outerHeight - this.win_.innerHeight) :\n        (isEdge ? 100 : 0);\n    // With all the adjustments, at least 50% of the available width/height\n    // should be made available to a popup.\n    const maxWidth = Math.max(availWidth - controlsWidth, availWidth * 0.5);\n    const maxHeight = Math.max(availHeight - controlsHeight, availHeight * 0.5);\n    let w = Math.floor(Math.min(600, maxWidth * 0.9));\n    let h = Math.floor(Math.min(600, maxHeight * 0.9));\n    if (this.options_.width) {\n      w = Math.min(this.options_.width, maxWidth);\n    }\n    if (this.options_.height) {\n      h = Math.min(this.options_.height, maxHeight);\n    }\n    const x = Math.floor((screen.width - w) / 2);\n    const y = Math.floor((screen.height - h) / 2);\n    const features = {\n      'height': h,\n      'width': w,\n      'resizable': 'yes',\n      'scrollbars': 'yes',\n    };\n    // Do not set left/top in Edge: it fails.\n    if (!isEdge) {\n      features['left'] = x;\n      features['top'] = y;\n    }\n    let featuresStr = '';\n    for (const f in features) {\n      if (featuresStr) {\n        featuresStr += ',';\n      }\n      featuresStr += `${f}=${features[f]}`;\n    }\n    return featuresStr;\n  }\n\n  /**\n   * This method only exists to make iframe/top emulation possible in tests.\n   * Otherwise `window.top` cannot be overridden.\n   * @return {boolean}\n   * @private\n   */\n  isTopWindow_() {\n    return this.win_ == this.win_.top;\n  }\n\n  /** @private */\n  setupPopup_() {\n    // Keep alive to catch the window closing, which would indicate\n    // \"cancel\" signal.\n    this.heartbeatInterval_ = this.win_.setInterval(() => {\n      this.check_(/* delayCancel */ true);\n    }, 500);\n\n    // Start up messaging. The messaging is explicitly allowed to proceed\n    // without origin check b/c all arguments have already been passed in\n    // the URL and special handling is enforced when result is delivered.\n    this.messenger_ = new Messenger(\n        this.win_,\n        /** @type {!Window} */ (this.targetWin_),\n        /* targetOrigin */ null,\n        /* requireTarget */ true);\n    this.messenger_.connect(this.handleCommand_.bind(this));\n  }\n\n  /**\n   * @param {boolean=} opt_delayCancel\n   * @private\n   */\n  check_(opt_delayCancel) {\n    if (!this.targetWin_ || this.targetWin_.closed) {\n      if (this.heartbeatInterval_) {\n        this.win_.clearInterval(this.heartbeatInterval_);\n        this.heartbeatInterval_ = null;\n      }\n      // Give a chance for the result to arrive, but otherwise consider the\n      // responce to be empty.\n      this.win_.setTimeout(() => {\n        try {\n          this.result_(ActivityResultCode.CANCELED, /* data */ null);\n        } catch (e) {\n          this.disconnectWithError_(e);\n        }\n      }, opt_delayCancel ? 3000 : 0);\n    }\n  }\n\n  /**\n   * @param {!Error} reason\n   * @private\n   */\n  disconnectWithError_(reason) {\n    if (this.resultResolver_) {\n      this.resultResolver_(Promise.reject(reason));\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @private\n   */\n  result_(code, data) {\n    if (this.resultResolver_) {\n      const isConnected = this.messenger_.isConnected();\n      const result = new ActivityResult(\n          code,\n          data,\n          ActivityMode.POPUP,\n          isConnected ?\n              this.messenger_.getTargetOrigin() :\n              getOriginFromUrl(this.url_),\n          /* originVerified */ isConnected,\n          /* secureChannel */ isConnected);\n      resolveResult(this.win_, result, this.resultResolver_);\n      this.resultResolver_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.sendCommand('close');\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      const code = /** @type {!ActivityResultCode} */ (payload['code']);\n      const data =\n          code == ActivityResultCode.FAILED ?\n          new Error(payload['data'] || '') :\n          payload['data'];\n      this.result_(code, data);\n    } else if (cmd == 'check') {\n      this.win_.setTimeout(() => this.check_(), 200);\n    }\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @param {string} fragment\n * @param {string} requestId\n * @return {?ActivityPort}\n */\nfunction discoverRedirectPort(win, fragment, requestId) {\n  // Try to find the result in the fragment.\n  const paramName = '__WA_RES__';\n  const fragmentParam = getQueryParam(fragment, paramName);\n  if (!fragmentParam) {\n    return null;\n  }\n  const response = /** @type {?Object} */ (JSON.parse(fragmentParam));\n  if (!response || response['requestId'] != requestId) {\n    return null;\n  }\n\n  // Remove the found param from the fragment.\n  const cleanFragment = removeQueryParam(win.location.hash, paramName) || '';\n  if (cleanFragment != win.location.hash) {\n    if (win.history && win.history.replaceState) {\n      try {\n        win.history.replaceState(win.history.state, '', cleanFragment);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n  }\n\n  const code = response['code'];\n  const data = response['data'];\n  const origin = response['origin'];\n  const referrerOrigin = win.document.referrer &&\n      getOriginFromUrl(win.document.referrer);\n  const originVerified = origin == referrerOrigin;\n  return new ActivityWindowRedirectPort(\n      win,\n      code,\n      data,\n      origin,\n      originVerified);\n}\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n */\nclass ActivityWindowRedirectPort {\n\n  /**\n   * @param {!Window} win\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {string} targetOrigin\n   * @param {boolean} targetOriginVerified\n   */\n  constructor(win, code, data, targetOrigin, targetOriginVerified) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!ActivityResultCode} */\n    this.code_ = code;\n    /** @private @const {*} */\n    this.data_ = data;\n    /** @private {string} */\n    this.targetOrigin_ = targetOrigin;\n    /** @private {boolean} */\n    this.targetOriginVerified_ = targetOriginVerified;\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.REDIRECT;\n  }\n\n  /** @override */\n  acceptResult() {\n    const result = new ActivityResult(\n        this.code_,\n        this.data_,\n        ActivityMode.REDIRECT,\n        this.targetOrigin_,\n        this.targetOriginVerified_,\n        /* secureChannel */ false);\n    return new Promise(resolve => {\n      resolveResult(this.win_, result, resolve);\n    });\n  }\n}\n\n\n\n\n/**\n * The page-level activities manager ports. This class is intended to be used\n * as a singleton. It can start activities of all modes: iframe, popup, and\n * redirect.\n */\nclass ActivityPorts {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {string} */\n    this.version = '1.24';\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {string} */\n    this.fragment_ = win.location.hash;\n\n    /**\n     * @private @const {!Object<string, !Array<function(!ActivityPort)>>}\n     */\n    this.requestHandlers_ = {};\n\n    /**\n     * The result buffer is indexed by `requestId`.\n     * @private @const {!Object<string, !ActivityPort>}\n     */\n    this.resultBuffer_ = {};\n\n    /** @private {?function(!Error)} */\n    this.redirectErrorResolver_ = null;\n\n    /** @private {!Promise<!Error>} */\n    this.redirectErrorPromise_ = new Promise(resolve => {\n      this.redirectErrorResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, opt_args) {\n    const port = new ActivityIframePort(iframe, url, opt_args);\n    return port.connect().then(() => port);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return {targetWin: port.getTargetWin()};\n  }\n\n  /**\n   * Start an activity in a separate window and tries to setup messaging with\n   * this window.\n   *\n   * See `open()` method for more details, including `onResult` callback.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!Promise<!ActivityMessagingPort>}\n   */\n  openWithMessaging(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return port.whenConnected().then(() => port);\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPort)} callback\n   */\n  onResult(requestId, callback) {\n    let handlers = this.requestHandlers_[requestId];\n    if (!handlers) {\n      handlers = [];\n      this.requestHandlers_[requestId] = handlers;\n    }\n    handlers.push(callback);\n\n    // Consume available result.\n    const availableResult = this.discoverResult_(requestId);\n    if (availableResult) {\n      this.consumeResult_(availableResult, callback);\n    }\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.redirectErrorPromise_.then(handler);\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!ActivityWindowPort}\n   */\n  openWin_(requestId, url, target, opt_args, opt_options) {\n    const port = new ActivityWindowPort(\n        this.win_, requestId, url, target, opt_args, opt_options);\n    port.open().then(() => {\n      // Await result if possible. Notice that when falling back to \"redirect\",\n      // the result will never arrive through this port.\n      this.consumeResultAll_(requestId, port);\n    });\n    return port;\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {?ActivityPort}\n   * @private\n   */\n  discoverResult_(requestId) {\n    let port = this.resultBuffer_[requestId];\n    if (!port && this.fragment_) {\n      try {\n        port = discoverRedirectPort(\n            this.win_, this.fragment_, requestId);\n      } catch (e) {\n        throwAsync(e);\n        this.redirectErrorResolver_(e);\n      }\n      if (port) {\n        this.resultBuffer_[requestId] = port;\n      }\n    }\n    return port;\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @param {function(!ActivityPort)} callback\n   * @private\n   */\n  consumeResult_(port, callback) {\n    Promise.resolve().then(() => {\n      callback(port);\n    });\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {!ActivityPort} port\n   * @private\n   */\n  consumeResultAll_(requestId, port) {\n    // Find and execute handlers.\n    const handlers = this.requestHandlers_[requestId];\n    if (handlers) {\n      handlers.forEach(handler => {\n        this.consumeResult_(port, handler);\n      });\n    }\n    // Buffer the result for callbacks that may arrive in the future.\n    this.resultBuffer_[requestId] = port;\n  }\n}\n\n\n\nmodule.exports = {\n  ActivityPorts,\n  ActivityIframePort,\n  ActivityMessagingPort,\n  ActivityMode,\n  ActivityOpenOptions,\n  ActivityPort,\n  ActivityRequest,\n  ActivityResult,\n  ActivityResultCode,\n  ActivityWindowPort,\n  createAbortError,\n  isAbortError,\n};\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\n\n/** @enum {number}  */\nexport const FilterResult = {\n  /** The event is allowed to proceed to the listeners. */\n  PROCESS_EVENT: 0,\n  /** The event is canceled and the listeners are not informed about it. */\n  CANCEL_EVENT: 1,\n};\n\n/**\n * Defines a client event in SwG\n * Properties:\n * - eventType: Required. The AnalyticsEvent type that occurred.\n * - eventOriginator: Required.  The codebase that initiated the event.\n * - isFromUserAction: Optional.  True if the user took an action to generate\n *   the event.\n * - additionalParameters: Optional.  A JSON object to store generic data.\n *\n *  @typedef {{\n *    eventType: !AnalyticsEvent,\n *    eventOriginator: !EventOriginator,\n *    isFromUserAction: ?boolean,\n *    additionalParameters: ?Object,\n * }}\n */\nexport let ClientEvent;\n\n/**\n * @interface\n */\nexport class ClientEventManagerApi {\n  /**\n   * Call this function to log an event. The registered listeners will be\n   * invoked unless the event is filtered.\n   * @param {!function(!ClientEvent)} listener\n   */\n  registerEventListener(listener) {}\n\n  /**\n   * Register a filterer for events if you need to potentially prevent the\n   * listeners from hearing about it.  A filterer should return\n   * FilterResult.CANCEL_EVENT to prevent listeners from hearing about the\n   * event.\n   * @param {!function(!ClientEvent):FilterResult} filterer\n   */\n  registerEventFilterer(filterer) {}\n\n  /**\n   * Call this function to log an event.  It will immediately throw an error if\n   * the event is invalid.  It will then asynchronously call the filterers and\n   * stop the event if a filterer cancels it.  After that, it will call each\n   * listener asynchronously.\n   * @param {!ClientEvent} event\n   */\n  logEvent(event) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {PurchaseData} from './subscribe-response';\nimport {UserData} from './user-data';\n\n/**\n * Properties:\n * - entitlements - the current entitlements.\n * - consent - whether to ask the user for account creation consent.\n *   Default is `true`.\n *\n * @typedef {{\n *   entitlements: (?Entitlements|undefined),\n *   consent: (boolean|undefined),\n * }}\n */\nexport let DeferredAccountCreationRequest;\n\n/**\n */\nexport class DeferredAccountCreationResponse {\n  /**\n   * @param {!Entitlements} entitlements\n   * @param {!UserData} userData\n   * @param {!Array<!PurchaseData>} purchaseDataList\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(entitlements, userData, purchaseDataList, completeHandler) {\n    /** @const {!Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {!UserData} */\n    this.userData = userData;\n    /** @const {!Array<!PurchaseData>} */\n    this.purchaseDataList = purchaseDataList;\n    // TODO(dvoytenko): deprecate.\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseDataList[0];\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!DeferredAccountCreationResponse}\n   */\n  clone() {\n    return new DeferredAccountCreationResponse(\n      this.entitlements,\n      this.userData,\n      this.purchaseDataList,\n      this.completeHandler_\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'entitlements': this.entitlements.json(),\n      'userData': this.userData.json(),\n      'purchaseDataList': this.purchaseDataList.map((pd) => pd.json()),\n      // TODO(dvoytenko): deprecate.\n      'purchaseData': this.purchaseData.json(),\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription info. The typical action would be to create an\n   * account (or match an existing one) and associated the subscription with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {findInArray} from '../utils/object';\nimport {getPropertyFromJsonString} from '../utils/json';\nimport {warn} from '../utils/log';\n\n/** Source for Google-provided metering entitlements. */\nexport const GOOGLE_METERING_SOURCE = 'google:metering';\n\n/**\n * The holder of the entitlements for a service.\n */\nexport class Entitlements {\n  /**\n   * @param {string} service\n   * @param {string} raw\n   * @param {!Array<!Entitlement>} entitlements\n   * @param {?string} currentProduct\n   * @param {function(!Entitlements)} ackHandler\n   * @param {function(!Entitlements, ?Function=)} consumeHandler\n   * @param {?boolean|undefined} isReadyToPay\n   * @param {?string|undefined} decryptedDocumentKey\n   */\n  constructor(\n    service,\n    raw,\n    entitlements,\n    currentProduct,\n    ackHandler,\n    consumeHandler,\n    isReadyToPay,\n    decryptedDocumentKey\n  ) {\n    /** @const {string} */\n    this.service = service;\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!Array<!Entitlement>} */\n    this.entitlements = entitlements;\n    /** @const {boolean} */\n    this.isReadyToPay = isReadyToPay || false;\n    /** @const {?string} */\n    this.decryptedDocumentKey = decryptedDocumentKey || null;\n\n    /** @private @const {?string} */\n    this.product_ = currentProduct;\n    /** @private @const {function(!Entitlements)} */\n    this.ackHandler_ = ackHandler;\n    /** @private @const {function(!Entitlements, ?Function=)} */\n    this.consumeHandler_ = consumeHandler;\n  }\n\n  /**\n   * @return {!Entitlements}\n   */\n  clone() {\n    return new Entitlements(\n      this.service,\n      this.raw,\n      this.entitlements.map((ent) => ent.clone()),\n      this.product_,\n      this.ackHandler_,\n      this.consumeHandler_,\n      this.isReadyToPay,\n      this.decryptedDocumentKey\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'service': this.service,\n      'entitlements': this.entitlements.map((item) => item.json()),\n      'isReadyToPay': this.isReadyToPay,\n    };\n  }\n\n  /**\n   * Returns true if the current article is unlocked by a\n   * cacheable entitlement. Metering entitlements aren't cacheable,\n   * because each metering entitlement is meant to be used for one article.\n   * Subscription entitlements are cacheable, because subscription entitlements\n   * are meant to be used across multiple articles on a publication.\n   * @return {boolean}\n   */\n  enablesThisWithCacheableEntitlements() {\n    const entitlement = this.getEntitlementForThis();\n    return !!entitlement && entitlement.source !== GOOGLE_METERING_SOURCE;\n  }\n\n  /**\n   * Returns true if the current article is unlocked by a\n   * Google metering entitlement. These entitlements come\n   * from Google News Intiative's licensing program to support news.\n   * https://www.blog.google/outreach-initiatives/google-news-initiative/licensing-program-support-news-industry-/\n   * @return {boolean}\n   */\n  enablesThisWithGoogleMetering() {\n    const entitlement = this.getEntitlementForThis();\n    return !!entitlement && entitlement.source === GOOGLE_METERING_SOURCE;\n  }\n\n  /**\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enablesThis(source) {\n    return this.enables(this.product_, source);\n  }\n\n  /**\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enablesAny(source) {\n    for (let i = 0; i < this.entitlements.length; i++) {\n      if (\n        this.entitlements[i].products.length > 0 &&\n        (!source || source == this.entitlements[i].source)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether these entitlements enable the specified product, optionally also\n   * restricting the source.\n   * @param {?string} product\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enables(product, source) {\n    if (!product) {\n      return false;\n    }\n    return !!this.getEntitlementFor(product, source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the current product,\n   * optionally also matching the specified source.\n   * @param {string=} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForThis(source) {\n    return this.getEntitlementFor(this.product_, source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified product,\n   * optionally also matching the specified source.\n   *\n   * Returns non-metering entitlements if possible, to avoid consuming\n   * metered reads unnecessarily.\n   *\n   * @param {?string} product\n   * @param {string=} source\n   * @return {?Entitlement}\n   */\n  getEntitlementFor(product, source) {\n    if (!product) {\n      return null;\n    }\n\n    // Prefer subscription entitlements over metering entitlements.\n    // Metering entitlements are a limited resource. When a metering entitlement\n    // unlocks an article, that depletes the user's remaining \"free reads\".\n    // Subscription entitlements are *not* depleted when they unlock articles.\n    // They are essentially unlimited if the subscription remains valid.\n    // For this reason, subscription entitlements are preferred.\n    const entitlementsThatUnlockArticle = this.entitlements.filter(\n      (entitlement) =>\n        entitlement.enables(product) &&\n        (!source || source === entitlement.source)\n    );\n\n    const subscriptionEntitlement = findInArray(\n      entitlementsThatUnlockArticle,\n      (entitlement) => entitlement.source !== GOOGLE_METERING_SOURCE\n    );\n\n    const meteringEntitlement = findInArray(\n      entitlementsThatUnlockArticle,\n      (entitlement) => entitlement.source === GOOGLE_METERING_SOURCE\n    );\n\n    return subscriptionEntitlement || meteringEntitlement || null;\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified source w/o\n   * matching any specific products.\n   * @param {string} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForSource(source) {\n    if (this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (\n          this.entitlements[i].subscriptionToken &&\n          source == this.entitlements[i].source\n        ) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * A 3p site should call this method to acknowledge that it \"saw\" and\n   * \"understood\" entitlements.\n   */\n  ack() {\n    this.ackHandler_(this);\n  }\n\n  /**\n   * A 3p site should call this method to consume a Google metering entitlement.\n   * When a metering entitlement is consumed, SwG shows the user a metering dialog.\n   * When the user closes the dialog, SwG depletes one of the user's remaining\n   * \"free reads\".\n   * @param {?Function=} onCloseDialog Called after the user closes the dialog.\n   */\n  consume(onCloseDialog) {\n    this.consumeHandler_(this, onCloseDialog);\n  }\n}\n\n/**\n * The single entitlement object.\n */\nexport class Entitlement {\n  /**\n   * @param {string} source\n   * @param {!Array<string>} products\n   * @param {string} subscriptionToken\n   */\n  constructor(source, products, subscriptionToken) {\n    /** @const {string} */\n    this.source = source;\n    /** @const {!Array<string>} */\n    this.products = products;\n    /** @const {string} */\n    this.subscriptionToken = subscriptionToken;\n  }\n\n  /**\n   * @return {!Entitlement}\n   */\n  clone() {\n    return new Entitlement(\n      this.source,\n      this.products.slice(0),\n      this.subscriptionToken\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'source': this.source,\n      'products': this.products,\n      'subscriptionToken': this.subscriptionToken,\n    };\n  }\n\n  /**\n   * @param {?string} product\n   * @return {boolean}\n   */\n  enables(product) {\n    if (!product) {\n      return false;\n    }\n    // Wildcard allows this product.\n    const eq = product.indexOf(':');\n    if (\n      eq != -1 &&\n      this.products.includes(product.substring(0, eq + 1) + '*')\n    ) {\n      return true;\n    }\n    return this.products.includes(product);\n  }\n\n  /**\n   * @param {?Object} json\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json) {\n    if (!json) {\n      json = {};\n    }\n    const source = json['source'] || '';\n    const products = json['products'] || [];\n    const subscriptionToken = json['subscriptionToken'];\n    return new Entitlement(source, products, subscriptionToken);\n  }\n\n  /**\n   * The JSON is expected in one of the forms:\n   * - Single entitlement: `{products: [], ...}`.\n   * - A list of entitlements: `[{products: [], ...}, {...}]`.\n   * @param {!Object|!Array<!Object>} json\n   * @return {!Array<!Entitlement>}\n   */\n  static parseListFromJson(json) {\n    const jsonList = Array.isArray(json)\n      ? /** @type {!Array<Object>} */ (json)\n      : [json];\n    return jsonList.map((json) => Entitlement.parseFromJson(json));\n  }\n\n  /**\n   * Returns the SKU associated with this entitlement.\n   * @return {?string}\n   */\n  getSku() {\n    if (this.source !== 'google') {\n      return null;\n    }\n    const sku = /** @type {?string} */ (getPropertyFromJsonString(\n      this.subscriptionToken,\n      'productId'\n    ) || null);\n    if (!sku) {\n      warn('Unable to retrieve SKU from SwG subscription token');\n    }\n    return sku;\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const SubscriptionState = {\n  // user's subscription state not known.\n  UNKNOWN: 'unknown',\n  // user is not a subscriber.\n  NON_SUBSCRIBER: 'non_subscriber',\n  // user is a subscriber.\n  SUBSCRIBER: 'subscriber',\n  // user's subscription has expired.\n  PAST_SUBSCRIBER: 'past_subscriber',\n};\n\n/**\n * Subscription related events. Listed below are enum strings that\n * represent events related to Subscription flow. Event parameters\n * that provide more context about the event are sent as a JSON\n * block of depth 1 in the sendEvent() API call.\n * @enum {string}\n */\nexport const Event = {\n  /**\n   * IMPRESSION_PAYWALL event.\n   * User hits a paywall.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * If the user has run out of metering, and that’s why was shown\n   * a paywall, that would be a passive impression of the paywall.\n   * For example:\n   * const propensityEvent = {\n   *  name: 'paywall',\n   *  active: false,\n   * }\n   */\n  IMPRESSION_PAYWALL: 'paywall',\n  /**\n   * IMPRESSION_AD event.\n   * User has been shown a subscription ad.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide the name of the subscription ad\n   * creative or campaign. Ad impressions are usually passive.\n   * const propensityEvent = {\n   *   name: 'ad_shown',\n   *   active: false,\n   *   data: {'ad_name': 'fall_ad'}\n   * }\n   */\n  IMPRESSION_AD: 'ad_shown',\n  /**\n   * IMPRESSION_OFFERS event.\n   * User has been shown a list of available offers for subscription.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide a list of products displayed,\n   * and the source to indicate why the user was shown the offer.\n   * Note: source is not the same as referrer.\n   * In the cases below, the user took action before seeing the offers,\n   * and therefore considered active impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': 'ad-click'}\n   * }\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘navigate-to-offers-page’}\n   * }\n   * If the user was shown the offers as a result of paywall metering\n   * expiration, it is considered a passive impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: false,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘paywall-metering-expired’}\n   * }\n   */\n  IMPRESSION_OFFERS: 'offers_shown',\n  /**\n   * ACTION_SUBSCRIPTIONS_LANDING_PAGE event.\n   * User has taken the action to arrive at a landing page of the\n   * subscription workflow. The landing page should satisfy one of\n   * the following conditions and hence be a part of the funnel to\n   * get the user to subscribe:\n   * - have a button to navigate the user to an offers page, (in\n   *   this case, the next event will be IMPRESSION_OFFERS, with\n   *   parameter 'source' as subscriptions-landing-page and\n   *   'is_active' set to true),\n   * - show offers the user can select, (in this case, the next\n   *   event will be IMPRESSION_OFFERS, with a parameter 'source'\n   *   as navigate-to-offers-page and 'is_active' set to true),\n   * - provide a way to start the payment flow for a specific offer.\n   *   (in this case, the next event will be ACTION_OFFER_SELECTED\n   *   or ACTION_PAYMENT_FLOW_STARTED depending on if that button\n   *   took the user to a checkout page on the publishers site or\n   *   directly started the payment flow).\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block with this event can provide additional information\n   * such as the source, indicating what caused the user to navigate\n   * to this page.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'subscriptions_landing_page',\n   *   active: true,\n   *   data: {'source': 'marketing_via_email'}\n   * }\n   */\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 'subscriptions_landing_page',\n  /**\n   * ACTION_OFFER_SELECTED event.\n   * User has selected an offer.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example: {\n   *   name: 'offer_selected',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   * When offer selection starts the payment flow directly,\n   * use the next event ACTION_PAYMENT_FLOW_STARTED instead.\n   */\n  ACTION_OFFER_SELECTED: 'offer_selected',\n  /**\n   * ACTION_PAYMENT_FLOW_STARTED event.\n   * User has started payment flow.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_flow_started',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_FLOW_STARTED: 'payment_flow_start',\n  /**\n   * ACTION_PAYMENT_COMPLETED.\n   * User has made the payment for a subscription.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product user paid for.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_complete',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_COMPLETED: 'payment_complete',\n  /**\n   * EVENT_CUSTOM: custom publisher event.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false depending on if the event\n   * was generated as a result of a user action.\n   * The JSON block can provide the event name for the custom event.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'custom',\n   *   active: true,\n   *   data: {\n   *     'event_name': 'social_share',\n   *     'platform_used': 'whatsapp'\n   *   }\n   *  }\n   */\n  EVENT_CUSTOM: 'custom',\n};\n\n/**\n * Propensity Event\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n *    name: string,\n *    active: boolean,\n *    data: ?JsonObject,\n * }}\n */\nexport let PublisherEvent;\n\n/**\n * @interface\n */\nexport class LoggerApi {\n  /**\n   * Send a buy-flow event that occurred on the publisher's site to Google.  The\n   * ultimate destination is controlled by configuration settings.  Publisher\n   * configuration available:\n   *   enablePropensity - Sends data to the Propensity to Subscribe ads server.\n   *   enableSwgAnalytics - Sends data to Google's analytics server for buy-flow\n   *     comparison purposes.\n   * @param {!PublisherEvent} userEvent\n   */\n  sendEvent(userEvent) {}\n\n  /**\n   * Send user subscription state upon initial discovery.\n   * A user may have active subscriptions to some products\n   * and expired subscriptions to others. Make one API call\n   * per subscription state and provide a corresponding\n   * list of products with a json object of depth 1.\n   * For example:\n   *     {'product': ['product1', 'product2']}\n   * Each call to this API should have the first argument\n   * as a valid string from the enum SubscriptionState.\n   * @param {SubscriptionState} state\n   * @param {?JsonObject} jsonProducts\n   */\n  sendSubscriptionState(state, jsonProducts) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {number}  */\nexport const MeterClientTypes = {\n  /** Meter client type for content licensed by Google. */\n  LICENSED_BY_GOOGLE: 1,\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nexport class Offer {\n\n  /**\n   * @param {string} skuId\n   * @param {string} title\n   * @param {string} description\n   * @param {string} price\n   */\n  constructor(skuId, title, description, price) {\n    /** @const {string} */\n    this.skuId = skuId;\n    /** @const {string} */\n    this.title = title;\n    /** @const {string} */\n    this.description = description;\n    /** @const {string} */\n    this.price = price;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as LoggerApi from './logger-api';\n\n/**\n * @enum {string}\n */\nexport const PropensityType = {\n  // Propensity score for a user to subscribe to a publication.\n  GENERAL: 'general',\n  // Propensity score when blocked access to content by paywall.\n  PAYWALL: 'paywall',\n};\n\n/**\n * The Propensity Score\n * - value: Required. A number that indicates the propensity to subscribe.\n * - bucketed: Required. Indicates if the score is a raw score [1-100] or bucketed[1-20].\n *\n * @typedef {{\n *   value: number,\n *   bucketed: boolean,\n * }}\n */\nexport let Score;\n\n/**\n * Propensity Score Detail\n * Properties:\n * - product: Required. Indicates the publication_id:product_id for which the score is provided.\n * - score: Optional. When score is available, this field contains the propensity score for this product.\n * - error: Optional. When no score is avaialble, a string provides the error message.\n *\n * @typedef {{\n *   product: string,\n *   score: ?Score,\n *   error: ?string,\n * }}\n */\nexport let ScoreDetail;\n\n/**\n * The Body field of the Propensity Score.\n * Properties:\n * - scores: Optional, an array of scores. When header indicates so, atleast one score is available.\n * - error: Optional, string describing why, if no scores were provided by the server.\n *\n *  @typedef {{\n *    scores: ?Array<ScoreDetail>,\n *    error: ?string,\n * }}\n */\nexport let Body;\n\n/**\n * The Header of the Propensity Score.\n * Properties:\n * - ok: Required. true, if propensity score is available, false otherwise.\n *\n *  @typedef {{\n *    ok: boolean,\n * }}\n */\nexport let Header;\n\n/**\n * The Propensity Score.\n * Properties:\n * - header: Required. Provides the header of the Score response.\n * - body: Required. Provides the body of the Score response.\n *\n *  @typedef {{\n *    header: Header,\n *    body: Body,\n * }}\n */\nexport let PropensityScore;\n\n/**\n * Propensity Event\n *   Please note that the primary defition of this object has changed to\n *   PublisherEvent and is defined in logger-api.js.  These two object\n *   definitions are identical.\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n *    name: string,\n *    active: boolean,\n *    data: ?JsonObject,\n * }}\n */\nexport let PropensityEvent;\n\n/*\n * Please note that the definitions of Event and SubscriptionState have moved\n * to logger-api.js.  This is now the preferred interface to use for logging\n * publisher events and setting the user's current subscription state.\n * Propensity will continue to function as an event logger until we are certain\n * no publishers are actively using it to log events.\n */\nexport const Event = LoggerApi.Event;\nexport const SubscriptionState = LoggerApi.SubscriptionState;\n\n/**\n * @extends {LoggerApi.LoggerApi}\n * @interface\n */\nexport class PropensityApi extends LoggerApi.LoggerApi {\n  /**\n   * Get the propensity of a user to subscribe based on the type.\n   * The argument should be a valid string from PropensityType.\n   * If no type is provided, GENERAL score is returned.\n   * @param {PropensityType=} type\n   * @return {?Promise<!PropensityScore>}\n   */\n  getPropensity(type) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {UserData} from './user-data';\n\n/**\n */\nexport class SubscribeResponse {\n  /**\n   * @param {string} raw\n   * @param {!PurchaseData} purchaseData\n   * @param {?UserData} userData\n   * @param {?Entitlements} entitlements\n   * @param {!string} productType\n   * @param {function():!Promise} completeHandler\n   * @param {?string=} oldSku\n   * @param {?number=} paymentRecurrence\n   */\n  constructor(\n    raw,\n    purchaseData,\n    userData,\n    entitlements,\n    productType,\n    completeHandler,\n    oldSku = null,\n    paymentRecurrence = null\n  ) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseData;\n    /** @const {?UserData} */\n    this.userData = userData;\n    /** @const {?Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {string} */\n    this.productType = productType;\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n    /** @const {?string} */\n    this.oldSku = oldSku;\n    /** @const {?number} */\n    this.paymentRecurrence = paymentRecurrence;\n  }\n\n  /**\n   * @return {!SubscribeResponse}\n   */\n  clone() {\n    return new SubscribeResponse(\n      this.raw,\n      this.purchaseData,\n      this.userData,\n      this.entitlements,\n      this.productType,\n      this.completeHandler_,\n      this.oldSku\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'purchaseData': this.purchaseData.json(),\n      'userData': this.userData ? this.userData.json() : null,\n      'entitlements': this.entitlements ? this.entitlements.json() : null,\n      'oldSku': this.oldSku,\n      'productType': this.productType,\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription purchase. The typical action would be to create an\n   * account (or match an existing one) and associated the purchase with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n\n/**\n */\nexport class PurchaseData {\n  /**\n   * @param {string} raw\n   * @param {string} signature\n   */\n  constructor(raw, signature) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.data = raw;\n    /** @const {string} */\n    this.signature = signature;\n  }\n\n  /**\n   * @return {!PurchaseData}\n   */\n  clone() {\n    return new PurchaseData(this.raw, this.signature);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'data': this.raw,\n      'signature': this.signature,\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ClientEventManagerApi} from './client-event-manager-api';\nimport {\n  DeferredAccountCreationRequest,\n  DeferredAccountCreationResponse,\n} from './deferred-account-creation';\nimport {Entitlements} from './entitlements';\nimport {LoggerApi} from './logger-api';\nimport {Offer} from './offer';\nimport {PropensityApi} from './propensity-api';\nimport {SubscribeResponse} from './subscribe-response';\n\n/**\n * @interface\n */\nexport class Subscriptions {\n  /**\n   * Optionally initializes the subscriptions runtime with publication or\n   * product ID. If not called, the runtime will look for the initialization\n   * parameters in the page's markup.\n   * @param {string} productOrPublicationId\n   */\n  init(productOrPublicationId) {}\n\n  /**\n   * Optionally configures the runtime with non-default properties. See\n   * `Config` definition for details.\n   * @param {!Config} config\n   */\n  configure(config) {}\n\n  /**\n   * Starts the entitlement flow.\n   */\n  start() {}\n\n  /**\n   * Resets the entitlements that can be fetched again.\n   */\n  reset() {}\n\n  /**\n   * Resets the entitlements and clears all of the caches.\n   */\n  clear() {}\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(params) {}\n\n  /**\n   * Set the subscribe callback.\n   * @param {function(!Promise<!Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {}\n\n  /**\n   * Returns a set of offers.\n   * @param {{\n   *   productId: (string|undefined),\n   * }=} options\n   * @return {!Promise<!Array<!Offer>>}\n   */\n  getOffers(options) {}\n\n  /**\n   * Starts the Offers flow.\n   * @param {!OffersRequest=} options\n   */\n  showOffers(options) {}\n\n  /**\n   * Starts the Offers flow for a subscription update.\n   * @param {!OffersRequest=} options\n   */\n  showUpdateOffers(options) {}\n\n  /**\n   * Show subscription option.\n   * @param {!OffersRequest=} options\n   */\n  showSubscribeOption(options) {}\n\n  /**\n   * Show abbreviated offers.\n   * @param {!OffersRequest=} options\n   */\n  showAbbrvOffer(options) {}\n\n  /**\n   * Show contribution options for the users to select from.\n   * The options are grouped together by periods (Weekly, Monthly, etc.).\n   * User can select the amount to contribute to from available options\n   * to the publisher. These options are based on the SKUs defined in the Play\n   * console for a given publication.\n   * Each SKU has Amount, Period, SKUId and other attributes.\n   * @param {!OffersRequest=} options\n   */\n  showContributionOptions(options) {}\n\n  /**\n   * Set the callback for the native subscribe request. Setting this callback\n   * triggers the \"native\" option in the offers flow.\n   * @param {function()} callback\n   */\n  setOnNativeSubscribeRequest(callback) {}\n\n  /**\n   * Set the subscribe complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {string} sku\n   */\n  subscribe(sku) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {SubscriptionRequest} subscriptionRequest\n   */\n  updateSubscription(subscriptionRequest) {}\n\n  /**\n   * Set the contribution complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {}\n\n  /**\n   * Set the payment complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnPaymentResponse(callback) {}\n\n  /**\n   * Starts contributions purchase flow.\n   * @param {string|SubscriptionRequest} skuOrSubscriptionRequest\n   */\n  contribute(skuOrSubscriptionRequest) {}\n\n  /**\n   * Starts the deferred account creation flow.\n   * See `DeferredAccountCreationRequest` for more details.\n   * @param {?DeferredAccountCreationRequest=} options\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  completeDeferredAccountCreation(options) {}\n\n  /**\n   * @param {function(!LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {}\n\n  /**\n   * @param {!LoginRequest} request\n   */\n  triggerLoginRequest(request) {}\n\n  /**\n   * Starts the login prompt flow.\n   * @return {!Promise}\n   */\n  showLoginPrompt() {}\n\n  /**\n   * Starts the login notification flow.\n   * @return {!Promise}\n   */\n  showLoginNotification() {}\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {}\n\n  /**\n   * @param {!Promise} accountPromise Publisher's promise to lookup account.\n   * @return {!Promise}\n   */\n  waitForSubscriptionLookup(accountPromise) {}\n\n  /**\n   * Starts the metered registration wall flow.\n   * @param {{ gsiUrl: string, alreadyRegisteredUrl: string}} params\n   * @return {!Promise}\n   */\n  showMeterRegwall(params) {}\n\n  /**\n   * Starts the Account linking flow.\n   * TODO(dparikh): decide if it's only exposed for testing or PROD purposes.\n   * @param {{ampReaderId: (string|undefined)}=} params\n   */\n  linkAccount(params) {}\n\n  /**\n   * Notifies the client that a flow has been started. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Also see `setOnFlowCanceled` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {}\n\n  /**\n   * Notifies the client that a flow has been canceled. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Notice that some of the flows, such as \"subscribe\", could additionally\n   * have their own \"cancel\" events.\n   *\n   * Also see `setOnFlowStarted` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {}\n\n  /**\n   * Starts the save subscriptions flow.\n   * @param {!SaveSubscriptionRequestCallback} requestCallback\n   * @return {!Promise} a promise indicating flow is started\n   */\n  saveSubscription(requestCallback) {}\n\n  /**\n   * Creates an element with the SwG button style and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  createButton(optionsOrCallback, callback) {}\n\n  /**\n   * Attaches the SwG button style and the provided callback to an existing\n   * DOM element. The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   */\n  attachButton(button, optionsOrCallback, callback) {}\n\n  /**\n   * Attaches smartButton element and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   */\n  attachSmartButton(button, optionsOrCallback, callback) {}\n\n  /**\n   * Retrieves the propensity module that provides APIs to\n   * get propensity scores based on user state and events\n   * @return {!Promise<PropensityApi>}\n   */\n  getPropensityModule() {}\n\n  /** @return {!Promise<LoggerApi>} */\n  getLogger() {}\n\n  /** @return {!Promise<ClientEventManagerApi>} */\n  getEventManager() {}\n\n  /**\n   * Publishers participating in Showcase should call this with their own entitlements\n   * and entitlement related UI events.  SwG will automatically do this for Google\n   * sourced subscriptions and meters.\n   * @param {!PublisherEntitlement} entitlement\n   */\n  setShowcaseEntitlement(entitlement) {}  \n}\n\n/** @enum {string} */\nexport const PublisherEntitlementEvent = {\n  EVENT_SHOWCASE_UNLOCKED_BY_SUBSCRIPTION: 'EVENT_SHOWCASE_UNLOCKED_BY_SUBSCRIPTION', // Publisher managed subscriptions only\n  EVENT_SHOWCASE_UNLOCKED_BY_METER: 'EVENT_SHOWCASE_UNLOCKED_BY_METER',               // Publisher managed meters only\n  EVENT_SHOWCASE_UNLOCKED_FREE_PAGE: 'EVENT_SHOWCASE_UNLOCKED_FREE_PAGE',             // When the article is free for any reason (lead article, etc)\n  \n  EVENT_SHOWCASE_NO_ENTITLEMENTS_REGWALL: 'EVENT_SHOWCASE_NO_ENTITLEMENTS_REGWALL',  // When the user must register to view the article\n  EVENT_SHOWCASE_NO_ENTITLEMENTS_PAYWALL: 'EVENT_SHOWCASE_NO_ENTITLEMENTS_PAYWALL',  // When the user must subscribe to view the article\n};\n\n/**\n* PublisherEntitlement\n*   In order to participate in News Showcase, publishers must report information about their entitlements.\n* Properties:\n* - isUserRegistered: Is the user registered currently?\n* - entitlement: Publisher entitlement event type.\n*  @typedef {{\n*    isUserRegister:  !boolean,\n*    entitlement: !PublisherEntitlementEvent,\n* }}\n*/\nexport let PublisherEntitlement;\n\n/** @enum {string} */\nexport const SubscriptionFlows = {\n  SHOW_OFFERS: 'showOffers',\n  SHOW_SUBSCRIBE_OPTION: 'showSubscribeOption',\n  SHOW_ABBRV_OFFER: 'showAbbrvOffer',\n  SHOW_CONTRIBUTION_OPTIONS: 'showContributionOptions',\n  SUBSCRIBE: 'subscribe',\n  CONTRIBUTE: 'contribute',\n  COMPLETE_DEFERRED_ACCOUNT_CREATION: 'completeDeferredAccountCreation',\n  LINK_ACCOUNT: 'linkAccount',\n  SHOW_LOGIN_PROMPT: 'showLoginPrompt',\n  SHOW_METER_REGWALL: 'showMeterRegwall',\n  SHOW_LOGIN_NOTIFICATION: 'showLoginNotification',\n  SHOW_METER_TOAST: 'showMeterToast',\n};\n\n/**\n * Configuration properties:\n * - windowOpenMode - either \"auto\" or \"redirect\". The \"redirect\" value will\n *   force redirect flow for any window.open operation, including payments.\n *   The \"auto\" value either uses a redirect or a popup flow depending on\n *   what's possible on a specific environment. Defaults to \"auto\".\n * - enableSwgAnalytics - if set to true then events logged by the publisher's\n *   client will be sent to Google's SwG analytics service.  This information is\n *   used to compare the effectiveness of Google's buy-flow events to those\n *   generated by the publisher's client code.  This includes events sent to\n *   both PropensityApi and LoggerApi.\n * - enablePropensity - If true events from the logger api are sent to the\n *   propensity server.  Note events from the legacy propensity endpoint are\n *   always sent.\n * @typedef {{\n *   experiments: (!Array<string>|undefined),\n *   windowOpenMode: (!WindowOpenMode|undefined),\n *   analyticsMode: (!AnalyticsMode|undefined),\n *   enableSwgAnalytics: (boolean|undefined),\n *   enablePropensity: (boolean|undefined),\n * }}\n */\nexport let Config;\n\n/**\n * Params for GetEntitlements requests to SwG Client.\n * swg-js constructs objects of this type, but publisher JS won't.\n * swg-js converts these params to a Base64 JSON string\n * before sending them to SwG Client.\n * @typedef {{\n *   metering: (!GetEntitlementsMeteringParamsInternal|undefined),\n * }}\n */\nexport let GetEntitlementsParamsInternalDef;\n\n/**\n * Encryption params for GetEntitlements requests.\n * @typedef {{\n *   encryptedDocumentKey: string,\n * }}\n */\nexport let GetEntitlementsEncryptionParams;\n\n/**\n * Metering params for GetEntitlements requests to SwG Client.\n * swg-js constructs objects of this type, but publisher JS won't.\n * @typedef {{\n *   clientTypes: !Array<number>,\n *   owner: string,\n *   state: {\n *     id: string,\n *     attributes: !Array<{\n *       name: string,\n *       timestamp: number,\n *     }>,\n *   },\n *   resource: {\n *     hashedCanonicalUrl: string,\n *   },\n * }}\n */\nexport let GetEntitlementsMeteringParamsInternal;\n\n/**\n * Params for `getEntitlements` calls from publisher JS.\n * swg-js converts objects of this type to GetEntitlementsParamsInternal.\n * @typedef {{\n *   encryption: (!GetEntitlementsEncryptionParams|undefined),\n *   metering: (!GetEntitlementsMeteringParamsExternal|undefined),\n * }}\n */\nexport let GetEntitlementsParamsExternalDef;\n\n/**\n * Params for `getEntitlements` calls from publisher JS.\n * swg-js converts objects of this type to GetEntitlementsMeteringParamsInternal.\n * @typedef {{\n *   clientTypes: !Array<number>,\n *   owner: string,\n *   state: {\n *     id: string,\n *     standardAttributes: !Object<string, {\n *       timestamp: number,\n *     }>,\n *     customAttributes: !Object<string, {\n *       timestamp: number,\n *     }>,\n *   },\n *   resource: {\n *     hashedCanonicalUrl: string,\n *   },\n * }}\n */\nexport let GetEntitlementsMeteringParamsExternal;\n\n/**\n * @enum {number}\n */\nexport const AnalyticsMode = {\n  DEFAULT: 0,\n  IMPRESSIONS: 1,\n};\n\n/**\n * @enum {string}\n */\nexport const WindowOpenMode = {\n  AUTO: 'auto',\n  REDIRECT: 'redirect',\n};\n\n/**\n * @enum {string}\n */\nexport const ReplaceSkuProrationMode = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  IMMEDIATE_WITH_TIME_PRORATION: 'IMMEDIATE_WITH_TIME_PRORATION',\n};\n\n/**\n * The Offers/Contributions UI is rendered differently based on the\n * ProductType. The ProductType parameter is passed to the Payments flow, and\n * then passed back to the Payments confirmation page to render messages/text\n * based on the ProductType.\n * @enum {string}\n */\nexport const ProductType = {\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  UI_CONTRIBUTION: 'UI_CONTRIBUTION',\n};\n\n/**\n * @return {!Config}\n */\nexport function defaultConfig() {\n  return {\n    windowOpenMode: WindowOpenMode.AUTO,\n    analyticsMode: AnalyticsMode.DEFAULT,\n    enableSwgAnalytics: false,\n    enablePropensity: false,\n  };\n}\n\n/**\n * Properties:\n * - skus - a list of SKUs to return from the defined or default list. The\n *   order is preserved.\n * - list - a predefined list of SKUs. Use of this property is uncommon.\n *   Possible values are \"default\" and \"amp\". Default is \"default\".\n * - isClosable - a boolean value to determine whether the view is closable.\n *\n * @typedef {{\n *   skus: (!Array<string>|undefined),\n *   list: (string|undefined),\n *   isClosable: (boolean|undefined),\n * }}\n */\nexport let OffersRequest;\n\n/**\n * @typedef {{\n *   linkRequested: boolean,\n * }}\n */\nexport let LoginRequest;\n\n/**\n * Properties:\n * - one and only one of \"token\" or \"authCode\"\n * AuthCode reference: https://developers.google.com/actions/identity/oauth2-code-flow\n * Token reference: https://developers.google.com/actions/identity/oauth2-implicit-flow\n * @typedef {{\n *   token: (string|undefined),\n *   authCode: (string|undefined),\n * }}\n */\nexport let SaveSubscriptionRequest;\n\n/**\n * Callback for retrieving subscription request\n *\n * @callback SaveSubscriptionRequestCallback\n * @return {!Promise<SaveSubscriptionRequest> | !SaveSubscriptionRequest} request\n */\nexport let SaveSubscriptionRequestCallback;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n * }}\n */\nexport let ButtonOptions;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n * - messageTextColor: Overrides theme color for message text. (ex: \"#09f\")\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n *   messageTextColor: (string|undefined),\n * }}\n */\nexport let SmartButtonOptions;\n\n/**\n * Properties:\n * - sku: Required. Sku to add to the user's subscriptions.\n * - oldSku: Optional. This is if you want to replace one sku with another. For\n *  example, if a user wants to upgrade or downgrade their current subscription.\n * - prorationMode: Optional. When replacing a subscription you can decide on a\n *  specific proration mode to charge the user.\n *  The default is IMMEDIATE_WITH_TIME_PRORATION.\n * - oneTime: Optional. When a user chooses a contribution, they have the option\n *  to make it non-recurring.\n *\n *  @typedef {{\n *    skuId: string,\n *    oldSku: (string|undefined),\n *    replaceSkuProrationMode: (ReplaceSkuProrationMode|undefined),\n *    oneTime: (boolean|undefined),\n * }}\n */\nexport let SubscriptionRequest;\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class UserData {\n  /**\n   * @param {string} idToken\n   * @param {!Object} data\n   */\n  constructor(idToken, data) {\n    /** @const {string} */\n    this.idToken = idToken;\n    /** @const {!Object} */\n    this.data = data;\n\n    /** @const {string} */\n    this.id = data['sub'];\n    /** @const {string} */\n    this.email = data['email'];\n    /** @const {boolean} */\n    this.emailVerified = data['email_verified'];\n    /** @const {string} */\n    this.name = data['name'];\n    /** @const {string} */\n    this.givenName = data['given_name'];\n    /** @const {string} */\n    this.familyName = data['family_name'];\n    /** @const {string} */\n    this.pictureUrl = data['picture'];\n  }\n\n  /**\n   * @return {!UserData}\n   */\n  clone() {\n    return new UserData(this.idToken, this.data);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'id': this.id,\n      'email': this.email,\n      'emailVerified': this.emailVerified,\n      'name': this.name,\n      'givenName': this.givenName,\n      'familyName': this.familyName,\n      'pictureUrl': this.pictureUrl,\n    };\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AnalyticsRequest,\n  EventOriginator,\n  deserialize,\n  getLabel,\n} from '../proto/api_messages';\nimport {\n  ActivityIframePort as WebActivityIframePort,\n  ActivityPorts as WebActivityPorts,\n} from 'web-activities/activity-ports';\n\n/**\n * @interface\n */\nexport class ActivityPortDef {\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {}\n}\n/**\n * @interface\n */\nexport class ActivityPort extends ActivityPortDef {\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {}\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {}\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {}\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} unusedCallback\n   */\n  onResizeRequest(unusedCallback) {}\n\n  /**\n   * @param {!../proto/api_messages.Message} unusedRequest\n   */\n  execute(unusedRequest) {}\n\n  /**\n   * @param {!function(new: T)} unusedMessage\n   * @param {function(Object)} unusedCallback\n   * @template T\n   */\n  on(unusedMessage, unusedCallback) {}\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {}\n}\n/**\n * @implements {ActivityPortDef}\n */\nclass ActivityPortDeprecated {\n  /**\n   * @param {!web-activities/activity-ports.ActivityPort} port\n   */\n  constructor(port) {\n    /** @private @const {!web-activities/activity-ports.ActivityPort} */\n    this.port_ = port;\n  }\n\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.port_.acceptResult();\n  }\n}\n\n/**\n * @implements {ActivityPortDef}\n */\nexport class ActivityIframePort {\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {!../runtime/deps.DepsDef} deps\n   * @param {?Object=} args\n   */\n  constructor(iframe, url, deps, args) {\n    /** @private @const {!web-activities/activity-ports.ActivityIframePort} */\n    this.iframePort_ = new WebActivityIframePort(iframe, url, args);\n    /** @private @const {!Object<string, function(!Object)>} */\n    this.callbackMap_ = {};\n\n    /** @private @const {../runtime/deps.DepsDef} */\n    this.deps_ = deps;\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.iframePort_.whenReady();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    return this.iframePort_.connect().then(() => {\n      // Attach a callback to receive messages after connection complete\n      this.iframePort_.onMessage((data) => {\n        const response = data && data['RESPONSE'];\n        if (!response) {\n          return;\n        }\n        const cb = this.callbackMap_[response[0]];\n        if (cb) {\n          cb(deserialize(response));\n        }\n      });\n\n      if (this.deps_ && this.deps_.eventManager()) {\n        this.on(AnalyticsRequest, (request) => {\n          this.deps_.eventManager().logEvent({\n            eventType: request.getEvent(),\n            eventOriginator: EventOriginator.SWG_SERVER,\n            isFromUserAction: request.getMeta().getIsFromUserAction(),\n            additionalParameters: request.getParams(),\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.iframePort_.disconnect();\n  }\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {\n    return this.iframePort_.getMode();\n  }\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {\n    return this.iframePort_.acceptResult();\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    return this.iframePort_.onResizeRequest(callback);\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.iframePort_.message({'REQUEST': request.toArray()});\n  }\n\n  /**\n   * @param {!function(new: T)} message\n   * @param {function(!../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    let label = null;\n    try {\n      label = getLabel(message);\n    } catch (ex) {\n      // Thrown if message is not a proto object and has no label\n      label = null;\n    }\n    if (!label) {\n      throw new Error('Invalid data type');\n    } else if (this.callbackMap_[label]) {\n      throw new Error('Invalid type or duplicate callback for ', label);\n    }\n    this.callbackMap_[label] = callback;\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    this.iframePort_.resized();\n  }\n}\n\nexport class ActivityPorts {\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../runtime/deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = new WebActivityPorts(deps.win());\n  }\n\n  /**\n   * Adds client version, publication, product and logging context information.\n   * @param {?Object=} args\n   * @return {!Object}\n   */\n  addDefaultArguments(args) {\n    const deps = this.deps_;\n    const pageConfig = deps.pageConfig();\n    const context = deps.analytics().getContext();\n    return Object.assign(\n      {\n        'analyticsContext': context.toArray(),\n        'publicationId': pageConfig.getPublicationId(),\n        'productId': pageConfig.getProductId(),\n        '_client': 'SwG $internalRuntimeVersion$',\n        'supportsEventManager': true,\n      },\n      args || {}\n    );\n  }\n\n  /*\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openActivityIframePort_(iframe, url, args) {\n    const activityPort = new ActivityIframePort(iframe, url, this.deps_, args);\n    return activityPort.connect().then(() => activityPort);\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} args\n   * @param {boolean=} addDefaultArguments\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, args, addDefaultArguments = false) {\n    if (addDefaultArguments) {\n      args = this.addDefaultArguments(args);\n    }\n    return this.openActivityIframePort_(iframe, url, args);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} args\n   * @param {?web-activities/activity-ports.ActivityOpenOptions=} options\n   * @param {boolean=} addDefaultArguments\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, args, options, addDefaultArguments = false) {\n    if (addDefaultArguments) {\n      args = this.addDefaultArguments(args);\n    }\n    return this.activityPorts_.open(requestId, url, target, args, options);\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPortDef)} callback\n   */\n  onResult(requestId, callback) {\n    this.activityPorts_.onResult(requestId, (port) => {\n      callback(new ActivityPortDeprecated(port));\n    });\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.activityPorts_.onRedirectError(handler);\n  }\n\n  /**\n   * @return {!web-activities/activity-ports.ActivityPorts}\n   */\n  getOriginalWebActivityPorts() {\n    return this.activityPorts_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Dialog} from './dialog';\nimport {Graypane} from './graypane';\nimport {isCancelError} from '../utils/errors';\n\nconst POPUP_Z_INDEX = 2147483647;\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class DialogManager {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private {?Dialog} */\n    this.dialog_ = null;\n\n    /** @private {?Promise<!Dialog>} */\n    this.openPromise_ = null;\n\n    /** @private @const {!Graypane} */\n    this.popupGraypane_ = new Graypane(doc, POPUP_Z_INDEX);\n\n    /** @private {?Window} */\n    this.popupWin_ = null;\n\n    this.popupGraypane_.getElement().addEventListener('click', () => {\n      if (this.popupWin_) {\n        try {\n          this.popupWin_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  openDialog(hidden = false) {\n    if (!this.openPromise_) {\n      this.dialog_ = new Dialog(this.doc_);\n      this.openPromise_ = this.dialog_.open(hidden);\n    }\n    return this.openPromise_;\n  }\n\n  /**\n   * @param {!./view.View} view\n   * @param {boolean=} hidden\n   * @return {!Promise}\n   */\n  openView(view, hidden = false) {\n    view.whenComplete().catch((reason) => {\n      if (isCancelError(reason)) {\n        this.completeView(view);\n      }\n      throw reason;\n    });\n    return this.openDialog(hidden).then((dialog) => {\n      return dialog.openView(view);\n    });\n  }\n\n  /**\n   * @param {?./view.View} view\n   */\n  completeView(view) {\n    // Give a small amount of time for another view to take over the dialog.\n    setTimeout(() => {\n      if (this.dialog_ && this.dialog_.getCurrentView() == view) {\n        this.close_();\n      }\n    }, 100);\n  }\n\n  /**\n   */\n  completeAll() {\n    if (this.dialog_) {\n      this.close_();\n    }\n    if (this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.destroy();\n    }\n  }\n\n  /**\n   * @returns {?Dialog}\n   */\n  getDialog() {\n    return this.dialog_;\n  }\n\n  /** @private */\n  close_() {\n    this.dialog_.close();\n    this.dialog_ = null;\n    this.openPromise_ = null;\n  }\n\n  /**\n   * @param {?Window|undefined} targetWin\n   */\n  popupOpened(targetWin) {\n    this.popupWin_ = targetWin || null;\n    if (!this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.attach();\n    }\n    this.popupGraypane_.show();\n  }\n\n  /**\n   */\n  popupClosed() {\n    this.popupWin_ = null;\n    try {\n      this.popupGraypane_.hide();\n    } catch (e) {\n      // Ignore.\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CSS as DIALOG_CSS} from '../../build/css/ui/ui.css';\nimport {FriendlyIframe} from './friendly-iframe';\nimport {Graypane} from './graypane';\nimport {LoadingView} from '../ui/loading-view';\nimport {\n  createElement,\n  injectStyleSheet,\n  removeChildren,\n  removeElement,\n} from '../utils/dom';\nimport {resolveDoc} from '../model/doc';\nimport {setImportantStyles, setStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\nconst Z_INDEX = 2147483647;\n\n/**\n * Default iframe important styles.\n * Note: The iframe responsiveness media query style is injected in the\n * publisher's page since style attribute can not include media query.\n * @const {!Object<string, string|number>}\n */\nconst rootElementImportantStyles = {\n  'min-height': '50px',\n  'border': 'none',\n  'display': 'block',\n  'position': 'fixed',\n  'z-index': Z_INDEX,\n  'box-sizing': 'border-box',\n};\n\n/**\n * Reset view styles.\n * @const {!Object<string, string|number>}\n */\nconst resetViewStyles = {\n  'position': 'absolute',\n  'top': '0',\n  'left': '0',\n  'right': '0',\n  'bottom': '0',\n  'opacity': 0,\n  /* These lines are a work around to this issue in iOS:     */\n  /* https://bugs.webkit.org/show_bug.cgi?id=155198          */\n  'height': 0,\n  'max-height': '100%',\n  'max-width': '100%',\n  'min-height': '100%',\n  'min-width': '100%',\n  'width': 0,\n};\n\n/**\n * Position of the dialog.\n * @const @enum {string}\n */\nconst PositionAt = {\n  BOTTOM: 'BOTTOM',\n  TOP: 'TOP',\n  FLOAT: 'FLOAT',\n  FULL: 'FULL',\n};\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class Dialog {\n  /**\n   * Create a dialog for the provided doc.\n   * @param {!../model/doc.Doc} doc\n   * @param {!Object<string, string|number>=} importantStyles\n   * @param {!Object<string, string|number>=} styles\n   */\n  constructor(doc, importantStyles = {}, styles = {}) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!FriendlyIframe} */\n    this.iframe_ = new FriendlyIframe(doc.getWin().document, {\n      'class': 'swg-dialog',\n    });\n\n    /** @private @const {!Graypane} */\n    this.graypane_ = new Graypane(doc, Z_INDEX - 1);\n\n    const modifiedImportantStyles = Object.assign(\n      {},\n      rootElementImportantStyles,\n      importantStyles\n    );\n    setImportantStyles(this.iframe_.getElement(), modifiedImportantStyles);\n\n    setStyles(this.iframe_.getElement(), styles);\n\n    /** @private {LoadingView} */\n    this.loadingView_ = null;\n\n    /** @private {?Element} */\n    this.container_ = null; // Depends on constructed document inside iframe.\n\n    /** @private {?./view.View} */\n    this.view_ = null;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private {boolean} */\n    this.hidden_ = false;\n\n    /** @private {?./view.View} */\n    this.previousProgressView_ = null;\n\n    /** @private {boolean} */\n    this.useFixedLayer_ = false;\n  }\n\n  /**\n   * Opens the dialog and builds the iframe container.\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  open(hidden = false) {\n    const iframe = this.iframe_;\n    if (iframe.isConnected()) {\n      throw new Error('already opened');\n    }\n\n    // Attach.\n    this.doc_.getBody().appendChild(iframe.getElement()); // Fires onload.\n\n    this.graypane_.attach();\n\n    if (hidden) {\n      setImportantStyles(iframe.getElement(), {\n        'visibility': 'hidden',\n        'opacity': 0,\n      });\n      this.hidden_ = hidden;\n    } else {\n      this.show_();\n    }\n\n    if (this.useFixedLayer_) {\n      return this.doc_\n        .addToFixedLayer(iframe.getElement())\n        .then(() => iframe.whenReady())\n        .then(() => {\n          this.buildIframe_();\n          return this;\n        });\n    } else {\n      return iframe.whenReady().then(() => {\n        this.buildIframe_();\n        return this;\n      });\n    }\n  }\n\n  /**\n   * Build the iframe with the styling after iframe is loaded.\n   * @private\n   */\n  buildIframe_() {\n    const iframe = this.iframe_;\n    const iframeBody = iframe.getBody();\n    const iframeDoc = /** @type {!HTMLDocument} */ (this.iframe_.getDocument());\n\n    // Inject Google fonts in <HEAD> section of the iframe.\n    injectStyleSheet(resolveDoc(iframeDoc), DIALOG_CSS);\n\n    // Add Loading indicator.\n    this.loadingView_ = new LoadingView(iframeDoc);\n    iframeBody.appendChild(this.loadingView_.getElement());\n\n    // Container for all dynamic content, including 3P iframe.\n    this.container_ = createElement(iframeDoc, 'swg-container', {});\n    iframeBody.appendChild(this.container_);\n    this.setPosition_();\n  }\n\n  /**\n   * Closes the dialog.\n   * @param {boolean=} animated\n   * @return {!Promise}\n   */\n  close(animated = true) {\n    let animating;\n    if (animated) {\n      animating = this.animate_(() => {\n        this.graypane_.hide(/* animate */ true);\n        return transition(\n          this.getElement(),\n          {\n            'transform': 'translateY(100%)',\n          },\n          300,\n          'ease-out'\n        );\n      });\n    } else {\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      const iframeEl = this.iframe_.getElement();\n      iframeEl.parentNode.removeChild(iframeEl);\n\n      this.removePaddingToHtml_();\n      this.graypane_.destroy();\n    });\n  }\n\n  /**\n   * Gets the container within the dialog.\n   * @return {!Element}\n   */\n  getContainer() {\n    if (!this.container_) {\n      throw new Error('not opened yet');\n    }\n    return this.container_;\n  }\n\n  /**\n   * Gets the attached iframe instance.\n   * @return {!FriendlyIframe}\n   */\n  getIframe() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the Iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_.getElement();\n  }\n\n  /**\n   * Transitions to the next view.\n   * @private\n   */\n  entryTransitionToNextView_() {\n    if (this.view_ && this.view_.hasLoadingIndicator()) {\n      // Temporarily cache the old view.\n      this.previousProgressView_ = this.view_;\n    } else {\n      // Since loading indicator will be shown, remove contents of old view.\n      removeChildren(this.getContainer());\n      // When loading indicator was not displayed in the previous view,\n      // loading indicator must be displayed while transitioning to new view.\n      this.loadingView_.show();\n    }\n  }\n\n  /**\n   * Transition out of an old view.\n   * @private\n   */\n  exitTransitionFromOldView_() {\n    // If previous view is still around, remove it.\n    if (this.previousProgressView_) {\n      removeElement(this.previousProgressView_.getElement());\n      this.previousProgressView_ = null;\n    } else {\n      this.loadingView_.hide();\n    }\n  }\n\n  /** @return {?./view.View} */\n  getCurrentView() {\n    return this.view_;\n  }\n\n  /**\n   * Opens the given view and removes existing view from the DOM if any.\n   * @param {!./view.View} view\n   * @return {!Promise}\n   */\n  openView(view) {\n    setImportantStyles(view.getElement(), resetViewStyles);\n    this.entryTransitionToNextView_();\n\n    this.view_ = view;\n    this.getContainer().appendChild(view.getElement());\n\n    // If the current view should fade the parent document.\n    if (view.shouldFadeBody() && !this.hidden_) {\n      this.graypane_.show(/* animate */ true);\n    }\n\n    return view.init(this).then(() => {\n      setImportantStyles(view.getElement(), {\n        'opacity': 1,\n      });\n      if (this.hidden_) {\n        if (view.shouldFadeBody()) {\n          this.graypane_.show(/* animated */ true);\n        }\n        this.show_();\n      }\n      this.exitTransitionFromOldView_();\n    });\n  }\n\n  /**\n   * Show the iframe.\n   * @private\n   */\n  show_() {\n    this.animate_(() => {\n      setImportantStyles(this.getElement(), {\n        'transform': 'translateY(100%)',\n        'opactiy': 1,\n        'visibility': 'visible',\n      });\n      return transition(\n        this.getElement(),\n        {\n          'transform': 'translateY(0)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        300,\n        'ease-out'\n      );\n    });\n    this.hidden_ = false;\n  }\n\n  /**\n   * Resizes the dialog container.\n   * @param {!./view.View} view\n   * @param {number} height\n   * @param {boolean=} animated\n   * @return {?Promise}\n   */\n  resizeView(view, height, animated = true) {\n    if (this.view_ != view) {\n      return null;\n    }\n    const newHeight = this.getMaxAllowedHeight_(height);\n\n    let animating;\n    if (animated) {\n      const oldHeight = this.getElement().offsetHeight;\n      if (newHeight >= oldHeight) {\n        // Expand.\n        animating = this.animate_(() => {\n          setImportantStyles(this.getElement(), {\n            'height': `${newHeight}px`,\n            'transform': `translateY(${newHeight - oldHeight}px)`,\n          });\n          return transition(\n            this.getElement(),\n            {\n              'transform': 'translateY(0)',\n            },\n            300,\n            'ease-out'\n          );\n        });\n      } else {\n        // Collapse.\n        animating = this.animate_(() => {\n          return transition(\n            this.getElement(),\n            {\n              'transform': `translateY(${oldHeight - newHeight}px)`,\n            },\n            300,\n            'ease-out'\n          ).then(() => {\n            setImportantStyles(this.getElement(), {\n              'height': `${newHeight}px`,\n              'transform': 'translateY(0)',\n            });\n          });\n        });\n      }\n    } else {\n      setImportantStyles(this.getElement(), {\n        'height': `${newHeight}px`,\n      });\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      this.updatePaddingToHtml_(height);\n      view.resized();\n    });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Returns maximum allowed height for current viewport.\n   * @param {number} height\n   * @return {number}\n   * @private\n   */\n  getMaxAllowedHeight_(height) {\n    return Math.min(height, this.doc_.getWin()./*OK*/ innerHeight * 0.9);\n  }\n\n  /**\n   * Gets the element's height.\n   * @return {number}\n   * @private\n   */\n  getHeight_() {\n    return this.getElement().offsetHeight;\n  }\n\n  /**\n   * Sets the position of the dialog. Currently 'BOTTOM' is set by default.\n   */\n  setPosition_() {\n    setImportantStyles(this.getElement(), this.getPositionStyle_());\n  }\n\n  /**\n   * Add the padding to the containing page so as to not hide the content\n   * behind the popup, if rendered at the bottom.\n   * @param {number} newHeight\n   * @private\n   */\n  updatePaddingToHtml_(newHeight) {\n    if (this.inferPosition_() == PositionAt.BOTTOM) {\n      const bottomPadding = newHeight + 20; // Add some extra padding.\n      const htmlElement = this.doc_.getRootElement();\n      setImportantStyles(htmlElement, {\n        'padding-bottom': `${bottomPadding}px`,\n      });\n    }\n  }\n\n  /**\n   * Removes previouly added bottom padding from the document.\n   * @private\n   */\n  removePaddingToHtml_() {\n    this.doc_.getRootElement().style.removeProperty('padding-bottom');\n  }\n\n  /**\n   * Calculates the position of the dialog. Currently dialog is positioned at\n   * the bottom only. This could change in future to adjust the dialog position\n   * based on the screen size.\n   * @return {string}\n   * @private\n   */\n  inferPosition_() {\n    return PositionAt.BOTTOM;\n  }\n\n  /**\n   * Returns the styles required to postion the dialog.\n   * @return {!Object<string, string|number>}\n   * @private\n   */\n  getPositionStyle_() {\n    const dialogPosition = this.inferPosition_();\n    switch (dialogPosition) {\n      case PositionAt.BOTTOM:\n        return {'bottom': 0};\n      case PositionAt.TOP:\n        return {'top': 0};\n      case PositionAt.FLOAT:\n        return {\n          'position': 'fixed',\n          'top': '50%',\n          'left': '50%',\n          'transform': 'translate(-50%, -50%)',\n        };\n      case PositionAt.FULL:\n        return {\n          'position': 'fixed',\n          'height': '100%',\n          'top': 0,\n          'bottom': 0,\n        };\n      default:\n        return {'bottom': 0};\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement, isConnected} from '../utils/dom';\nimport {resetAllStyles} from '../utils/style';\n\n/** @const {!Object<string|number>} */\nconst friendlyIframeAttributes = {\n  'frameborder': 0,\n  'scrolling': 'no',\n  'src': 'about:blank',\n};\n\n/**\n * The class for building friendly iframe.\n */\nexport class FriendlyIframe {\n  /**\n   * @param {!Document} doc\n   * @param {!Object<string, string|number>=} attrs\n   */\n  constructor(doc, attrs = {}) {\n    const mergedAttrs = Object.assign({}, friendlyIframeAttributes, attrs);\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      doc,\n      'iframe',\n      mergedAttrs\n    ));\n\n    // Ensure that the new iframe does not inherit any CSS styles.\n    resetAllStyles(this.iframe_);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise((resolve) => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * When promise is resolved.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * Gets the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the document object of the iframe element.\n   * @return {!Document}\n   */\n  getDocument() {\n    const doc =\n      this.getElement().contentDocument ||\n      (this.getElement().contentWindow &&\n        this.getElement().contentWindow.document);\n\n    if (!doc) {\n      throw new Error('not loaded');\n    }\n    return doc;\n  }\n\n  /**\n   * Gets the body of the iframe.\n   * @return {!Element}\n   */\n  getBody() {\n    return /** @type {!Element} */ (this.getDocument().body);\n  }\n\n  /**\n   * Whether the iframe is connected.\n   * @return {boolean}\n   */\n  isConnected() {\n    return isConnected(this.getElement());\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\nexport class Graypane {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {number} zIndex\n   */\n  constructor(doc, zIndex) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.fadeBackground_ = this.doc_\n      .getWin()\n      .document.createElement('swg-popup-background');\n    setImportantStyles(this.fadeBackground_, {\n      'z-index': zIndex,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n  }\n\n  /**\n   * @return {!Element}\n   */\n  getElement() {\n    return this.fadeBackground_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isAttached() {\n    return !!this.fadeBackground_.parentNode;\n  }\n\n  /**\n   * Attaches the graypane to the document.\n   */\n  attach() {\n    this.doc_.getBody().appendChild(this.fadeBackground_);\n  }\n\n  /**\n   * Detaches the graypane to the document.\n   */\n  destroy() {\n    this.doc_.getBody().removeChild(this.fadeBackground_);\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  show(animated = true) {\n    setImportantStyles(this.fadeBackground_, {\n      'display': 'block',\n      'opacity': animated ? 0 : 1,\n    });\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 1,\n        },\n        300,\n        'ease-out'\n      );\n    }\n  }\n\n  /**\n   * Hides the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  hide(animated = true) {\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 0,\n        },\n        300,\n        'ease-out'\n      ).then(() => {\n        setImportantStyles(this.fadeBackground_, {'display': 'none'});\n      });\n    }\n    setImportantStyles(this.fadeBackground_, {'display': 'none'});\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * abstract View Class. Used to render the content within the Dialog. The\n * extended class has actual content.\n * @abstract\n */\nexport class View {\n  /**\n   * Empty constructor.\n   */\n  constructor() {}\n\n  /**\n   * Gets the iframe element.\n   * @return {!Element}\n   * @abstract\n   */\n  getElement() {}\n\n  /**\n   * @param {!./dialog.Dialog} unusedDialog\n   * @return {!Promise}\n   * @abstract\n   */\n  init(unusedDialog) {}\n\n  /**\n   * Resizes the content.\n   */\n  resized() {\n    // Do nothing by default. Override if needed.\n  }\n\n  /**\n   * Accept the result.\n   * @return {!Promise}\n   * @abstract\n   */\n  whenComplete() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  shouldFadeBody() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  hasLoadingIndicator() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * The entry point for runtime (swg.js).\n */\n\nimport './polyfills';\nimport {installRuntime} from './runtime/runtime';\nimport {log} from './utils/log';\n\nlog('Subscriptions Runtime: $internalRuntimeVersion$');\n\ninstallRuntime(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isDocumentReady, whenDocumentReady} from '../utils/document-ready';\n\n/**\n * @interface\n */\nexport class Doc {\n  /**\n   * @return {!Window}\n   */\n  getWin() {}\n\n  /**\n   * The `Document` node or analog.\n   * @return {!Node}\n   */\n  getRootNode() {}\n\n  /**\n   * The `Document.documentElement` element or analog.\n   * @return {!Element}\n   */\n  getRootElement() {}\n\n  /**\n   * The `Document.head` element or analog. Returns `null` if not available\n   * yet.\n   * @return {!Element}\n   */\n  getHead() {}\n\n  /**\n   * The `Document.body` element or analog. Returns `null` if not available\n   * yet.\n   * @return {?Element}\n   */\n  getBody() {}\n\n  /**\n   * Whether the document has been fully constructed.\n   * @return {boolean}\n   */\n  isReady() {}\n\n  /**\n   * Resolved when document has been fully constructed.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Adds the element to the fixed layer.\n   * @param {!Element} unusedElement\n   * @return {!Promise}\n   *\n   * This is a no-op for except in AMP on iOS < 13.0.\n   */\n  addToFixedLayer(unusedElement) {}\n}\n\n/** @implements {Doc} */\nexport class GlobalDoc {\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (isWin\n      ? /** @type {!Window} */ (winOrDoc)\n      : /** @type {!Document} */ (winOrDoc).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin\n      ? /** @type {!Window} */ (winOrDoc).document\n      : /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  addToFixedLayer(unusedElement) {\n    return Promise.resolve();\n  }\n}\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nexport function resolveDoc(input) {\n  // Is it a `Document`\n  if (/** @type {!Document} */ (input).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if (/** @type {!Window} */ (input).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Doc, resolveDoc} from './doc';\nimport {PageConfig} from './page-config';\nimport {debugLog} from '../utils/log';\nimport {hasNextNodeInDocumentOrder} from '../utils/dom';\nimport {tryParseJson} from '../utils/json';\nimport {user} from '../utils/error-logger';\n\nconst ALREADY_SEEN = '__SWG-SEEN__';\nconst CONTROL_FLAG = 'subscriptions-control';\n\nconst ALLOWED_TYPES = [\n  'CreativeWork',\n  'Article',\n  'NewsArticle',\n  'Blog',\n  'Comment',\n  'Course',\n  'HowTo',\n  'Message',\n  'Review',\n  'WebPage',\n];\n\n// RegExp for quickly scanning LD+JSON for allowed types\nconst RE_ALLOWED_TYPES = new RegExp(ALLOWED_TYPES.join('|'));\n\n/**\n */\nexport class PageConfigResolver {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   */\n  constructor(winOrDoc) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private {?function((!PageConfig|!Promise))} */\n    this.configResolver_ = null;\n\n    /** @private @const {!Promise<!PageConfig>} */\n    this.configPromise_ = new Promise((resolve) => {\n      this.configResolver_ = resolve;\n    });\n\n    /** @private @const {!MetaParser} */\n    this.metaParser_ = new MetaParser(this.doc_);\n    /** @private @const {!JsonLdParser} */\n    this.ldParser_ = new JsonLdParser(this.doc_);\n    /** @private @const {!MicrodataParser} */\n    this.microdataParser_ = new MicrodataParser(this.doc_);\n  }\n\n  /**\n   * @return {!Promise<!PageConfig>}\n   */\n  resolveConfig() {\n    // Try resolve the config at different times.\n    Promise.resolve().then(this.check.bind(this));\n    this.doc_.whenReady().then(this.check.bind(this));\n    return this.configPromise_;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    // Already resolved.\n    if (!this.configResolver_) {\n      return null;\n    }\n    let config = this.metaParser_.check();\n    if (!config) {\n      config = this.ldParser_.check();\n    }\n    if (!config) {\n      config = this.microdataParser_.check();\n    }\n    if (config) {\n      // Product ID has been found: initialize the rest of the config.\n      this.configResolver_(config);\n      this.configResolver_ = null;\n    } else if (this.doc_.isReady()) {\n      this.configResolver_(\n        Promise.reject(\n          user().createError('No config could be discovered in the page')\n        )\n      );\n      this.configResolver_ = null;\n    }\n    debugLog(config);\n    return config;\n  }\n}\n\nclass TypeChecker {\n  constructor() {}\n\n  /**\n   * Check value from json\n   * @param {?Array|string} value\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkValue(value, expectedTypes) {\n    if (!value) {\n      return false;\n    }\n    return this.checkArray(this.toArray_(value), expectedTypes);\n  }\n\n  /**\n   * Checks space delimited list of types\n   * @param {?string} itemtype\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkString(itemtype, expectedTypes) {\n    if (!itemtype) {\n      return false;\n    }\n    return this.checkArray(itemtype.split(/\\s+/), expectedTypes);\n  }\n\n  /**\n   * @param {Array<?string>} typeArray\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkArray(typeArray, expectedTypes) {\n    let found = false;\n    typeArray.forEach((candidateType) => {\n      found =\n        found ||\n        expectedTypes.includes(\n          candidateType.replace(/^http:\\/\\/schema.org\\//i, '')\n        );\n    });\n    return found;\n  }\n\n  /*\n   * @param {?Array|string} value\n   * @return {Array}\n   * @private\n   */\n  toArray_(value) {\n    return Array.isArray(value) ? value : [value];\n  }\n}\n\nclass MetaParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    // Try to find product id.\n    const productId = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-product-id'\n    );\n    if (!productId) {\n      return null;\n    }\n\n    // Is locked?\n    const accessibleForFree = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-accessible-for-free'\n    );\n    const locked =\n      (accessibleForFree && accessibleForFree.toLowerCase() == 'false') ||\n      false;\n\n    return new PageConfig(productId, locked);\n  }\n}\n\nclass JsonLdParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    const domReady = this.doc_.isReady();\n\n    // type: 'application/ld+json'\n    const elements = this.doc_\n      .getRootNode()\n      .querySelectorAll('script[type=\"application/ld+json\"]');\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (\n        element[ALREADY_SEEN] ||\n        !element.textContent ||\n        (!domReady && !hasNextNodeInDocumentOrder(element))\n      ) {\n        continue;\n      }\n      element[ALREADY_SEEN] = true;\n      if (!RE_ALLOWED_TYPES.test(element.textContent)) {\n        continue;\n      }\n      const possibleConfig = this.tryExtractConfig_(element);\n      if (possibleConfig) {\n        return possibleConfig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?PageConfig}\n   */\n  tryExtractConfig_(element) {\n    let possibleConfigs = tryParseJson(element.textContent);\n    if (!possibleConfigs) {\n      return null;\n    }\n\n    // Support arrays of JSON objects.\n    if (!Array.isArray(possibleConfigs)) {\n      possibleConfigs = [possibleConfigs];\n    }\n\n    for (let i = 0; i < possibleConfigs.length; i++) {\n      const possibleConfig = possibleConfigs[i];\n\n      // Must be an ALLOWED_TYPE\n      if (!this.checkType_.checkValue(possibleConfig['@type'], ALLOWED_TYPES)) {\n        continue;\n      }\n\n      // Must have a isPartOf[@type=Product].\n      let productId = null;\n      const partOfArray = this.valueArray_(possibleConfig, 'isPartOf');\n      if (partOfArray) {\n        for (let i = 0; i < partOfArray.length; i++) {\n          productId = this.discoverProductId_(partOfArray[i]);\n          if (productId) {\n            break;\n          }\n        }\n      }\n      if (!productId) {\n        continue;\n      }\n\n      // Found product id, just check for the access flag.\n      const isAccessibleForFree = this.bool_(\n        this.singleValue_(possibleConfig, 'isAccessibleForFree'),\n        /* default */ true\n      );\n\n      return new PageConfig(productId, !isAccessibleForFree);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {*} value\n   * @param {boolean} def\n   * @return {boolean}\n   */\n  bool_(value, def) {\n    if (value == null || value === '') {\n      return def;\n    }\n    if (typeof value == 'boolean') {\n      return value;\n    }\n    if (typeof value == 'string') {\n      const lowercase = value.toLowerCase();\n      if (lowercase == 'false') {\n        return false;\n      }\n      if (lowercase == 'true') {\n        return true;\n      }\n    }\n    return def;\n  }\n\n  /**\n   * @param {!Object} json\n   * @return {?string}\n   */\n  discoverProductId_(json) {\n    // Must have type `Product`.\n    if (!this.checkType_.checkValue(json['@type'], ['Product'])) {\n      return null;\n    }\n    return /** @type {?string} */ (this.singleValue_(json, 'productID'));\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {?Array}\n   */\n  valueArray_(json, name) {\n    const value = json[name];\n    if (value == null || value === '') {\n      return null;\n    }\n    return Array.isArray(value) ? value : [value];\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {*}\n   */\n  singleValue_(json, name) {\n    const valueArray = this.valueArray_(json, name);\n    const value = valueArray && valueArray[0];\n    return value == null || value === '' ? null : value;\n  }\n}\n\nclass MicrodataParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private {?boolean} */\n    this.access_ = null;\n    /** @private {?string} */\n    this.productId_ = null;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * Returns false if access is restricted, otherwise true\n   * @param {!Element} root An element that is an item of type in ALLOWED_TYPES list\n   * @return {?boolean} locked access\n   * @private\n   */\n  discoverAccess_(root) {\n    const ALREADY_SEEN = 'alreadySeenForAccessInfo';\n    const nodeList = root.querySelectorAll(\"[itemprop='isAccessibleForFree']\");\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      if (!content) {\n        continue;\n      }\n      if (this.isValidElement_(element, root, ALREADY_SEEN)) {\n        let accessForFree = null;\n        if (content.toLowerCase() == 'true') {\n          accessForFree = true;\n        } else if (content.toLowerCase() == 'false') {\n          accessForFree = false;\n        }\n        return accessForFree;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Verifies if an element is valid based on the following\n   * - child of an item of one the the ALLOWED_TYPES\n   * - not a child of an item of any other type\n   * - not seen before, marked using the alreadySeen tag\n   * @param {?Element} current the element to be verified\n   * @param {!Element} root the parent to track up to\n   * @param {!string} alreadySeen used to tag already visited nodes\n   * @return {!boolean} valid node\n   * @private\n   */\n  isValidElement_(current, root, alreadySeen) {\n    for (\n      let node = current;\n      node && !node[alreadySeen];\n      node = node.parentNode\n    ) {\n      node[alreadySeen] = true;\n      // document nodes don't have hasAttribute\n      if (node.hasAttribute && node.hasAttribute('itemscope')) {\n        /**{?string} */\n        const type = node.getAttribute('itemtype');\n        return this.checkType_.checkString(type, ALLOWED_TYPES);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Obtains the product ID that meets the requirements\n   * - child of an item of one of ALLOWED_TYPES\n   * - Not a child of an item of type 'Section'\n   * - child of an item of type 'productID'\n   * @param {!Element} root An element that is an item of an ALLOWED_TYPES\n   * @return {?string} product ID, if found\n   * @private\n   */\n  discoverProductId_(root) {\n    const ALREADY_SEEN = 'alreadySeenForProductInfo';\n    const nodeList = root.querySelectorAll('[itemprop=\"productID\"]');\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      const item = element.closest('[itemtype][itemscope]');\n      const type = item.getAttribute('itemtype');\n      if (type.indexOf('http://schema.org/Product') <= -1) {\n        continue;\n      }\n      if (this.isValidElement_(item.parentElement, root, ALREADY_SEEN)) {\n        return content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns PageConfig if available\n   * @return {?PageConfig} PageConfig found so far\n   */\n  getPageConfig_() {\n    let locked = null;\n    if (this.access_ != null) {\n      locked = !this.access_;\n    } else if (this.doc_.isReady()) {\n      // Default to unlocked\n      locked = false;\n    }\n    if (this.productId_ != null && locked != null) {\n      return new PageConfig(this.productId_, locked);\n    }\n    return null;\n  }\n\n  /**\n   * Extracts page config from Microdata in the DOM\n   * @return {?PageConfig} PageConfig found\n   */\n  tryExtractConfig_() {\n    let config = this.getPageConfig_();\n    if (config) {\n      return config;\n    }\n\n    // Grab all the nodes with an itemtype and filter for our allowed types\n    const nodeList = Array.prototype.slice\n      .call(this.doc_.getRootNode().querySelectorAll('[itemscope][itemtype]'))\n      .filter((node) =>\n        this.checkType_.checkString(\n          node.getAttribute('itemtype'),\n          ALLOWED_TYPES\n        )\n      );\n\n    for (let i = 0; nodeList[i] && config == null; i++) {\n      const element = nodeList[i];\n      if (this.access_ == null) {\n        this.access_ = this.discoverAccess_(element);\n      }\n      if (!this.productId_) {\n        this.productId_ = this.discoverProductId_(element);\n      }\n      config = this.getPageConfig_();\n    }\n    return config;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n    return this.tryExtractConfig_();\n  }\n}\n\n/**\n * @param {!Node} rootNode\n * @return {?string}\n */\nexport function getControlFlag(rootNode) {\n  // Look for the flag in `meta`.\n  const flag = getMetaTag(rootNode, CONTROL_FLAG);\n  if (flag) {\n    return flag;\n  }\n  // Look for the flag in `script`.\n  const el = rootNode.querySelector(`script[${CONTROL_FLAG}]`);\n  if (el) {\n    return el.getAttribute(CONTROL_FLAG);\n  }\n  return null;\n}\n\n/**\n * Returns the value from content attribute of a meta tag with given name.\n *\n * If multiple tags are found, the first value is returned.\n *\n * @param {!Node} rootNode\n * @param {string} name The tag name to look for.\n * @return {?string} attribute value or empty string.\n * @private\n */\nfunction getMetaTag(rootNode, name) {\n  const el = rootNode.querySelector(`meta[name=\"${name}\"]`);\n  if (el) {\n    return el.getAttribute('content');\n  }\n  return null;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {user} from '../utils/error-logger';\n\n/**\n */\nexport class PageConfig {\n  /**\n   * @param {string} productOrPublicationId\n   * @param {boolean} locked\n   */\n  constructor(productOrPublicationId, locked) {\n    let publicationId, productId, label;\n    const div = productOrPublicationId.indexOf(':');\n    if (div != -1) {\n      // The argument is a product id.\n      productId = productOrPublicationId;\n      publicationId = productId.substring(0, div);\n      label = productId.substring(div + 1);\n      if (label == '*') {\n        user().expectedError('wildcard disallowed');\n      }\n    } else {\n      // The argument is a publication id.\n      publicationId = productOrPublicationId;\n      productId = null;\n      label = null;\n    }\n\n    /** @private @const {string} */\n    this.publicationId_ = publicationId;\n    /** @private @const {?string} */\n    this.productId_ = productId;\n    /** @private @const {?string} */\n    this.label_ = label;\n    /** @private @const {boolean} */\n    this.locked_ = locked;\n  }\n\n  /**\n   * @return {string}\n   */\n  getPublicationId() {\n    return this.publicationId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getProductId() {\n    return this.productId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getLabel() {\n    return this.label_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLocked() {\n    return this.locked_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Loads all polyfills needed by the project.\n * This list should not get longer without a very good reason.\n */\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installDOMTokenListToggle} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installObjectValues} from './polyfills/object-values';\nimport {install as installPromise} from './polyfills/promise';\n\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallObjectValues(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} fromIndex\n * @return {boolean}\n * @this {Array}\n */\nexport function includes(value, fromIndex = 0) {\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Sets the Array.contains polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nexport function contains(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.HTMLDocument.prototype.contains) {\n    win.Object.defineProperty(win.HTMLDocument.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: contains,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, force)` method.\n * This is specially important because IE does not support `force` attribute.\n * See https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nexport function toggle(token, force) {\n  const remove = force === undefined ? this.contains(token) : !force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: toggle,\n    });\n  }\n}\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @returns {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @returns {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Implements `Object.values` API.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values.\n *\n * @param {!Object} target\n * @returns {!Array<*>}\n */\nexport function values(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = [];\n  for (const key in target) {\n    if (hasOwnProperty.call(target, key)) {\n      output.push(target[key]);\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.values polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.values) {\n    win.Object.defineProperty(win.Object, 'values', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: values,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @interface\n */\nclass Message {\n  /**\n   * @return {string}\n   */\n  label() {}\n\n  /**\n   * @param {boolean=} unusedIncludeLabel\n   * @return {!Array<*>}\n   */\n  toArray(unusedIncludeLabel = true) {}\n}\n/** @enum {number} */\nconst AnalyticsEvent = {\n  UNKNOWN: 0,\n  IMPRESSION_PAYWALL: 1,\n  IMPRESSION_AD: 2,\n  IMPRESSION_OFFERS: 3,\n  IMPRESSION_SUBSCRIBE_BUTTON: 4,\n  IMPRESSION_SMARTBOX: 5,\n  IMPRESSION_SWG_BUTTON: 6,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS: 7,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED: 8,\n  IMPRESSION_SUBSCRIPTION_COMPLETE: 9,\n  IMPRESSION_ACCOUNT_CHANGED: 10,\n  IMPRESSION_PAGE_LOAD: 11,\n  IMPRESSION_LINK: 12,\n  IMPRESSION_SAVE_SUBSCR_TO_GOOGLE: 13,\n  IMPRESSION_GOOGLE_UPDATED: 14,\n  IMPRESSION_SHOW_OFFERS_SMARTBOX: 15,\n  IMPRESSION_SHOW_OFFERS_SWG_BUTTON: 16,\n  IMPRESSION_SELECT_OFFER_SMARTBOX: 17,\n  IMPRESSION_SELECT_OFFER_SWG_BUTTON: 18,\n  IMPRESSION_SHOW_CONTRIBUTIONS_SWG_BUTTON: 19,\n  IMPRESSION_SELECT_CONTRIBUTION_SWG_BUTTON: 20,\n  ACTION_SUBSCRIBE: 1000,\n  ACTION_PAYMENT_COMPLETE: 1001,\n  ACTION_ACCOUNT_CREATED: 1002,\n  ACTION_ACCOUNT_ACKNOWLEDGED: 1003,\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 1004,\n  ACTION_PAYMENT_FLOW_STARTED: 1005,\n  ACTION_OFFER_SELECTED: 1006,\n  ACTION_SWG_BUTTON_CLICK: 1007,\n  ACTION_VIEW_OFFERS: 1008,\n  ACTION_ALREADY_SUBSCRIBED: 1009,\n  ACTION_NEW_DEFERRED_ACCOUNT: 1010,\n  ACTION_LINK_CONTINUE: 1011,\n  ACTION_LINK_CANCEL: 1012,\n  ACTION_GOOGLE_UPDATED_CLOSE: 1013,\n  ACTION_USER_CANCELED_PAYFLOW: 1014,\n  ACTION_SAVE_SUBSCR_TO_GOOGLE_CONTINUE: 1015,\n  ACTION_SAVE_SUBSCR_TO_GOOGLE_CANCEL: 1016,\n  ACTION_SWG_BUTTON_SHOW_OFFERS_CLICK: 1017,\n  ACTION_SWG_BUTTON_SELECT_OFFER_CLICK: 1018,\n  ACTION_SWG_BUTTON_SHOW_CONTRIBUTIONS_CLICK: 1019,\n  ACTION_SWG_BUTTON_SELECT_CONTRIBUTION_CLICK: 1020,\n  ACTION_USER_CONSENT_DEFERRED_ACCOUNT: 1021,\n  ACTION_USER_DENY_DEFERRED_ACCOUNT: 1022,\n  ACTION_DEFERRED_ACCOUNT_REDIRECT: 1023,\n  ACTION_GET_ENTITLEMENTS: 1024,\n  EVENT_PAYMENT_FAILED: 2000,\n  EVENT_CUSTOM: 3000,\n  EVENT_CONFIRM_TX_ID: 3001,\n  EVENT_CHANGED_TX_ID: 3002,\n  EVENT_GPAY_NO_TX_ID: 3003,\n  EVENT_GPAY_CANNOT_CONFIRM_TX_ID: 3004,\n  EVENT_GOOGLE_UPDATED: 3005,\n  EVENT_NEW_TX_ID: 3006,\n  EVENT_UNLOCKED_BY_SUBSCRIPTION: 3007,\n  EVENT_UNLOCKED_BY_METER: 3008,\n  EVENT_NO_ENTITLEMENTS: 3009,\n  EVENT_HAS_METERING_ENTITLEMENTS: 3010,\n  EVENT_SUBSCRIPTION_STATE: 4000,\n};\n/** @enum {number} */\nconst EventOriginator = {\n  UNKNOWN_CLIENT: 0,\n  SWG_CLIENT: 1,\n  AMP_CLIENT: 2,\n  PROPENSITY_CLIENT: 3,\n  SWG_SERVER: 4,\n  PUBLISHER_CLIENT: 5,\n};\n\n/**\n * @implements {Message}\n */\nclass AccountCreationRequest {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.complete_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getComplete() {\n    return this.complete_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setComplete(value) {\n    this.complete_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.complete_, // field 1 - complete\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AccountCreationRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AlreadySubscribedResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.subscriberOrMember_ = data[base] == null ? null : data[base];\n\n    /** @private {?boolean} */\n    this.linkRequested_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscriberOrMember() {\n    return this.subscriberOrMember_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscriberOrMember(value) {\n    this.subscriberOrMember_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getLinkRequested() {\n    return this.linkRequested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setLinkRequested(value) {\n    this.linkRequested_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.subscriberOrMember_, // field 1 - subscriber_or_member\n        this.linkRequested_, // field 2 - link_requested\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AlreadySubscribedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsContext {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.embedderOrigin_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.transactionId_ = data[1 + base] == null ? null : data[1 + base];\n\n    /** @private {?string} */\n    this.referringOrigin_ = data[2 + base] == null ? null : data[2 + base];\n\n    /** @private {?string} */\n    this.utmSource_ = data[3 + base] == null ? null : data[3 + base];\n\n    /** @private {?string} */\n    this.utmCampaign_ = data[4 + base] == null ? null : data[4 + base];\n\n    /** @private {?string} */\n    this.utmMedium_ = data[5 + base] == null ? null : data[5 + base];\n\n    /** @private {?string} */\n    this.sku_ = data[6 + base] == null ? null : data[6 + base];\n\n    /** @private {?boolean} */\n    this.readyToPay_ = data[7 + base] == null ? null : data[7 + base];\n\n    /** @private {!Array<string>} */\n    this.label_ = data[8 + base] || [];\n\n    /** @private {?string} */\n    this.clientVersion_ = data[9 + base] == null ? null : data[9 + base];\n\n    /** @private {?string} */\n    this.url_ = data[10 + base] == null ? null : data[10 + base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getEmbedderOrigin() {\n    return this.embedderOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setEmbedderOrigin(value) {\n    this.embedderOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getTransactionId() {\n    return this.transactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setTransactionId(value) {\n    this.transactionId_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getReferringOrigin() {\n    return this.referringOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setReferringOrigin(value) {\n    this.referringOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmSource() {\n    return this.utmSource_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmSource(value) {\n    this.utmSource_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmCampaign() {\n    return this.utmCampaign_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmCampaign(value) {\n    this.utmCampaign_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmMedium() {\n    return this.utmMedium_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmMedium(value) {\n    this.utmMedium_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getReadyToPay() {\n    return this.readyToPay_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setReadyToPay(value) {\n    this.readyToPay_ = value;\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  getLabelList() {\n    return this.label_;\n  }\n\n  /**\n   * @param {!Array<string>} value\n   */\n  setLabelList(value) {\n    this.label_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getClientVersion() {\n    return this.clientVersion_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setClientVersion(value) {\n    this.clientVersion_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUrl(value) {\n    this.url_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.embedderOrigin_, // field 1 - embedder_origin\n        this.transactionId_, // field 2 - transaction_id\n        this.referringOrigin_, // field 3 - referring_origin\n        this.utmSource_, // field 4 - utm_source\n        this.utmCampaign_, // field 5 - utm_campaign\n        this.utmMedium_, // field 6 - utm_medium\n        this.sku_, // field 7 - sku\n        this.readyToPay_, // field 8 - ready_to_pay\n        this.label_, // field 9 - label\n        this.clientVersion_, // field 10 - client_version\n        this.url_, // field 11 - url\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsContext';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsEventMeta {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?EventOriginator} */\n    this.eventOriginator_ = data[base] == null ? null : data[base];\n\n    /** @private {?boolean} */\n    this.isFromUserAction_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?EventOriginator}\n   */\n  getEventOriginator() {\n    return this.eventOriginator_;\n  }\n\n  /**\n   * @param {!EventOriginator} value\n   */\n  setEventOriginator(value) {\n    this.eventOriginator_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsFromUserAction() {\n    return this.isFromUserAction_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsFromUserAction(value) {\n    this.isFromUserAction_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.eventOriginator_, // field 1 - event_originator\n        this.isFromUserAction_, // field 2 - is_from_user_action\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsEventMeta';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsRequest {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?AnalyticsContext} */\n    this.context_ =\n      data[base] == null || data[base] == undefined\n        ? null\n        : new AnalyticsContext(data[base], includesLabel);\n\n    /** @private {?AnalyticsEvent} */\n    this.event_ = data[1 + base] == null ? null : data[1 + base];\n\n    /** @private {?AnalyticsEventMeta} */\n    this.meta_ =\n      data[2 + base] == null || data[2 + base] == undefined\n        ? null\n        : new AnalyticsEventMeta(data[2 + base], includesLabel);\n\n    /** @private {?EventParams} */\n    this.params_ =\n      data[3 + base] == null || data[3 + base] == undefined\n        ? null\n        : new EventParams(data[3 + base], includesLabel);\n  }\n\n  /**\n   * @return {?AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {!AnalyticsContext} value\n   */\n  setContext(value) {\n    this.context_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEvent}\n   */\n  getEvent() {\n    return this.event_;\n  }\n\n  /**\n   * @param {!AnalyticsEvent} value\n   */\n  setEvent(value) {\n    this.event_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEventMeta}\n   */\n  getMeta() {\n    return this.meta_;\n  }\n\n  /**\n   * @param {!AnalyticsEventMeta} value\n   */\n  setMeta(value) {\n    this.meta_ = value;\n  }\n\n  /**\n   * @return {?EventParams}\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {!EventParams} value\n   */\n  setParams(value) {\n    this.params_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.context_ ? this.context_.toArray(includeLabel) : [], // field 1 - context\n        this.event_, // field 2 - event\n        this.meta_ ? this.meta_.toArray(includeLabel) : [], // field 3 - meta\n        this.params_ ? this.params_.toArray(includeLabel) : [], // field 4 - params\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EntitlementJwt {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.jwt_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.source_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getJwt() {\n    return this.jwt_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setJwt(value) {\n    this.jwt_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSource() {\n    return this.source_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSource(value) {\n    this.source_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.jwt_, // field 1 - jwt\n        this.source_, // field 2 - source\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EntitlementJwt';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EntitlementsRequest {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?EntitlementJwt} */\n    this.usedEntitlement_ =\n      data[base] == null || data[base] == undefined\n        ? null\n        : new EntitlementJwt(data[base], includesLabel);\n\n    /** @private {?Timestamp} */\n    this.clientEventTime_ =\n      data[1 + base] == null || data[1 + base] == undefined\n        ? null\n        : new Timestamp(data[1 + base], includesLabel);\n  }\n\n  /**\n   * @return {?EntitlementJwt}\n   */\n  getUsedEntitlement() {\n    return this.usedEntitlement_;\n  }\n\n  /**\n   * @param {!EntitlementJwt} value\n   */\n  setUsedEntitlement(value) {\n    this.usedEntitlement_ = value;\n  }\n\n  /**\n   * @return {?Timestamp}\n   */\n  getClientEventTime() {\n    return this.clientEventTime_;\n  }\n\n  /**\n   * @param {!Timestamp} value\n   */\n  setClientEventTime(value) {\n    this.clientEventTime_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.usedEntitlement_ ? this.usedEntitlement_.toArray(includeLabel) : [], // field 1 - used_entitlement\n        this.clientEventTime_ ? this.clientEventTime_.toArray(includeLabel) : [], // field 2 - client_event_time\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EntitlementsRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EntitlementsResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.jwt_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getJwt() {\n    return this.jwt_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setJwt(value) {\n    this.jwt_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.jwt_, // field 1 - jwt\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EntitlementsResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EventParams {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.smartboxMessage_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.gpayTransactionId_ = data[1 + base] == null ? null : data[1 + base];\n\n    /** @private {?boolean} */\n    this.hadLogged_ = data[2 + base] == null ? null : data[2 + base];\n\n    /** @private {?string} */\n    this.sku_ = data[3 + base] == null ? null : data[3 + base];\n\n    /** @private {?string} */\n    this.oldTransactionId_ = data[4 + base] == null ? null : data[4 + base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSmartboxMessage() {\n    return this.smartboxMessage_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSmartboxMessage(value) {\n    this.smartboxMessage_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getGpayTransactionId() {\n    return this.gpayTransactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setGpayTransactionId(value) {\n    this.gpayTransactionId_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getHadLogged() {\n    return this.hadLogged_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setHadLogged(value) {\n    this.hadLogged_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldTransactionId() {\n    return this.oldTransactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldTransactionId(value) {\n    this.oldTransactionId_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.smartboxMessage_, // field 1 - smartbox_message\n        this.gpayTransactionId_, // field 2 - gpay_transaction_id\n        this.hadLogged_, // field 3 - had_logged\n        this.sku_, // field 4 - sku\n        this.oldTransactionId_, // field 5 - old_transaction_id\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EventParams';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass FinishedLoggingResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.complete_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.error_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getComplete() {\n    return this.complete_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setComplete(value) {\n    this.complete_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setError(value) {\n    this.error_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.complete_, // field 1 - complete\n        this.error_, // field 2 - error\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'FinishedLoggingResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkSaveTokenRequest {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.authCode_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.token_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getAuthCode() {\n    return this.authCode_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setAuthCode(value) {\n    this.authCode_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getToken() {\n    return this.token_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setToken(value) {\n    this.token_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.authCode_, // field 1 - auth_code\n        this.token_, // field 2 - token\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkSaveTokenRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkingInfoResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.requested_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getRequested() {\n    return this.requested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setRequested(value) {\n    this.requested_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.requested_, // field 1 - requested\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkingInfoResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SkuSelectedResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?string} */\n    this.sku_ = data[base] == null ? null : data[base];\n\n    /** @private {?string} */\n    this.oldSku_ = data[1 + base] == null ? null : data[1 + base];\n\n    /** @private {?boolean} */\n    this.oneTime_ = data[2 + base] == null ? null : data[2 + base];\n\n    /** @private {?string} */\n    this.playOffer_ = data[3 + base] == null ? null : data[3 + base];\n\n    /** @private {?string} */\n    this.oldPlayOffer_ = data[4 + base] == null ? null : data[4 + base];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldSku() {\n    return this.oldSku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldSku(value) {\n    this.oldSku_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getOneTime() {\n    return this.oneTime_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setOneTime(value) {\n    this.oneTime_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getPlayOffer() {\n    return this.playOffer_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setPlayOffer(value) {\n    this.playOffer_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldPlayOffer() {\n    return this.oldPlayOffer_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldPlayOffer(value) {\n    this.oldPlayOffer_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.sku_, // field 1 - sku\n        this.oldSku_, // field 2 - old_sku\n        this.oneTime_, // field 3 - one_time\n        this.playOffer_, // field 4 - play_offer\n        this.oldPlayOffer_, // field 5 - old_play_offer\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SkuSelectedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SmartBoxMessage {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.isClicked_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsClicked() {\n    return this.isClicked_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsClicked(value) {\n    this.isClicked_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.isClicked_, // field 1 - is_clicked\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SmartBoxMessage';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SubscribeResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.subscribe_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscribe() {\n    return this.subscribe_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscribe(value) {\n    this.subscribe_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.subscribe_, // field 1 - subscribe\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SubscribeResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass Timestamp {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?number} */\n    this.seconds_ = data[base] == null ? null : data[base];\n\n    /** @private {?number} */\n    this.nanos_ = data[1 + base] == null ? null : data[1 + base];\n  }\n\n  /**\n   * @return {?number}\n   */\n  getSeconds() {\n    return this.seconds_;\n  }\n\n  /**\n   * @param {number} value\n   */\n  setSeconds(value) {\n    this.seconds_ = value;\n  }\n\n  /**\n   * @return {?number}\n   */\n  getNanos() {\n    return this.nanos_;\n  }\n\n  /**\n   * @param {number} value\n   */\n  setNanos(value) {\n    this.nanos_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.seconds_, // field 1 - seconds\n        this.nanos_, // field 2 - nanos\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'Timestamp';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass ToastCloseRequest {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.close_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getClose() {\n    return this.close_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setClose(value) {\n    this.close_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.close_, // field 1 - close\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'ToastCloseRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass ViewSubscriptionsResponse {\n  /**\n   * @param {!Array<*>=} data\n   * @param {boolean=} includesLabel\n   */\n  constructor(data = [], includesLabel = true) {\n    const base = includesLabel ? 1 : 0;\n\n    /** @private {?boolean} */\n    this.native_ = data[base] == null ? null : data[base];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getNative() {\n    return this.native_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setNative(value) {\n    this.native_ = value;\n  }\n\n  /**\n   * @param {boolean} includeLabel\n   * @return {!Array<?>}\n   * @override\n   */\n  toArray(includeLabel = true) {\n    const arr = [\n        this.native_, // field 1 - native\n    ];\n    if (includeLabel) {\n      arr.unshift(this.label());\n    }\n    return arr;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'ViewSubscriptionsResponse';\n  }\n}\n\nconst PROTO_MAP = {\n  'AccountCreationRequest': AccountCreationRequest,\n  'AlreadySubscribedResponse': AlreadySubscribedResponse,\n  'AnalyticsContext': AnalyticsContext,\n  'AnalyticsEventMeta': AnalyticsEventMeta,\n  'AnalyticsRequest': AnalyticsRequest,\n  'EntitlementJwt': EntitlementJwt,\n  'EntitlementsRequest': EntitlementsRequest,\n  'EntitlementsResponse': EntitlementsResponse,\n  'EventParams': EventParams,\n  'FinishedLoggingResponse': FinishedLoggingResponse,\n  'LinkSaveTokenRequest': LinkSaveTokenRequest,\n  'LinkingInfoResponse': LinkingInfoResponse,\n  'SkuSelectedResponse': SkuSelectedResponse,\n  'SmartBoxMessage': SmartBoxMessage,\n  'SubscribeResponse': SubscribeResponse,\n  'Timestamp': Timestamp,\n  'ToastCloseRequest': ToastCloseRequest,\n  'ViewSubscriptionsResponse': ViewSubscriptionsResponse,\n};\n\n/**\n * Utility to deserialize a buffer\n * @param {!Array<*>} data\n * @return {!Message}\n */\nfunction deserialize(data) {\n  /** {?string} */\n  const key = data ? data[0] : null;\n  if (key) {\n    const ctor = PROTO_MAP[key];\n    if (ctor) {\n      return new ctor(data);\n    }\n  }\n  throw new Error('Deserialization failed for ' + data);\n}\n\n/**\n * @param {function(new: T)} messageType\n * @return {string}\n * @template T\n */\nfunction getLabel(messageType) {\n  const message = /** @type {!Message} */ (new messageType());\n  return message.label();\n}\n\nexport {\n  AccountCreationRequest,\n  AlreadySubscribedResponse,\n  AnalyticsContext,\n  AnalyticsEvent,\n  AnalyticsEventMeta,\n  AnalyticsRequest,\n  EntitlementJwt,\n  EntitlementsRequest,\n  EntitlementsResponse,\n  EventOriginator,\n  EventParams,\n  FinishedLoggingResponse,\n  LinkSaveTokenRequest,\n  LinkingInfoResponse,\n  Message,\n  SkuSelectedResponse,\n  SmartBoxMessage,\n  SubscribeResponse,\n  Timestamp,\n  ToastCloseRequest,\n  ViewSubscriptionsResponse,\n  deserialize,\n  getLabel,\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsContext,\n  AnalyticsEvent,\n  AnalyticsEventMeta,\n  AnalyticsRequest,\n  EventOriginator,\n  EventParams,\n  FinishedLoggingResponse,\n} from '../proto/api_messages';\nimport {ClientEventManager} from './client-event-manager';\nimport {ExperimentFlags} from './experiment-flags';\nimport {createElement} from '../utils/dom';\nimport {feUrl} from './services';\nimport {getCanonicalUrl} from '../utils/url';\nimport {getOnExperiments, isExperimentOn} from './experiments';\nimport {getSwgTransactionId, getUuid} from '../utils/string';\nimport {log} from '../utils/log';\nimport {parseQueryString, parseUrl} from '../utils/url';\nimport {serviceUrl} from './services';\nimport {setImportantStyles} from '../utils/style';\n\n/** @const {!Object<string, string>} */\nconst iframeStyles = {\n  opacity: '0',\n  position: 'absolute',\n  top: '-10px',\n  left: '-10px',\n  height: '1px',\n  width: '1px',\n};\n\n// The initial iframe load takes ~500 ms.  We will wait at least that long\n// before a page redirect.  Subsequent logs are much faster.  We will wait at\n// most 100 ms.\nconst MAX_FIRST_WAIT = 500;\nconst MAX_WAIT = 200;\n// If we logged and rapidly redirected, we will add a short delay in case\n// a message hasn't been transmitted yet.\nconst TIMEOUT_ERROR = 'AnalyticsService timed out waiting for a response';\n\n/**\n *\n * @param {!string} error\n */\nfunction createErrorResponse(error) {\n  const response = new FinishedLoggingResponse();\n  response.setComplete(false);\n  response.setError(error);\n  return response;\n}\n\nexport class AnalyticsService {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(deps, fetcher) {\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      {}\n    ));\n    setImportantStyles(this.iframe_, iframeStyles);\n    this.doc_.getBody().appendChild(this.getElement());\n\n    /** @private @type {!boolean} */\n    this.everFinishedLog_ = false;\n\n    /**\n     * @private @const {!AnalyticsContext}\n     */\n    this.context_ = new AnalyticsContext();\n    this.setStaticContext_();\n\n    /** @private {?Promise<!web-activities/activity-ports.ActivityIframePort>} */\n    this.serviceReady_ = null;\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n    this.eventManager_.registerEventListener(\n      this.handleClientEvent_.bind(this)\n    );\n\n    // This code creates a 'promise to log' that we can use to ensure all\n    // logging is finished prior to redirecting the page.\n    /** @private {!number} */\n    this.unfinishedLogs_ = 0;\n\n    /** @private {?function(boolean)} */\n    this.loggingResolver_ = null;\n\n    /** @private {?Promise} */\n    this.promiseToLog_ = null;\n\n    // If logging doesn't work don't force the user to wait\n    /** @private {!boolean} */\n    this.loggingBroken_ = false;\n\n    // If logging exceeds the timeouts (see const comments above) don't make\n    // the user wait too long.\n    /** @private {?number} */\n    this.timeout_ = null;\n  }\n\n  /**\n   * @param {string} transactionId\n   */\n  setTransactionId(transactionId) {\n    const oldTransactionId = this.context_.getTransactionId();\n    this.context_.setTransactionId(transactionId);\n    if (oldTransactionId != null && oldTransactionId != transactionId) {\n      const eventType = AnalyticsEvent.EVENT_NEW_TX_ID;\n      const eventParams = new EventParams();\n      eventParams.setOldTransactionId(oldTransactionId);\n      this.eventManager_.logSwgEvent(\n        eventType,\n        /* isFromUserAction= */ true,\n        eventParams\n      );\n    }\n  }\n\n  /**\n   * @return {string}\n   */\n  getTransactionId() {\n    return /** @type {string} */ (this.context_.getTransactionId());\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.context_.getSku();\n  }\n\n  /**\n   * @param {string} sku\n   */\n  setSku(sku) {\n    this.context_.setSku(sku);\n  }\n\n  /**\n   * @param {string} url\n   */\n  setUrl(url) {\n    this.context_.setUrl(url);\n  }\n\n  /**\n   * @param {!Array<string>} labels\n   */\n  addLabels(labels) {\n    if (labels && labels.length > 0) {\n      const newLabels = [].concat(this.context_.getLabelList());\n      labels.forEach((label) => {\n        if (newLabels.indexOf(label) == -1) {\n          newLabels.push(label);\n        }\n      });\n      this.context_.setLabelList(newLabels);\n    }\n  }\n\n  /**\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getQueryString_() {\n    return this.doc_.getWin().location.search;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getReferrer_() {\n    return this.doc_.getWin().document.referrer;\n  }\n\n  /**\n   * @private\n   */\n  setStaticContext_() {\n    const context = this.context_;\n    // These values should all be available during page load.\n    if (\n      isExperimentOn(\n        this.doc_.getWin(),\n        ExperimentFlags.UPDATE_GOOGLE_TRANSACTION_ID\n      )\n    ) {\n      context.setTransactionId(getSwgTransactionId());\n    } else {\n      context.setTransactionId(getUuid());\n    }\n    context.setReferringOrigin(parseUrl(this.getReferrer_()).origin);\n    context.setClientVersion('SwG $internalRuntimeVersion$');\n    context.setUrl(getCanonicalUrl(this.doc_));\n\n    const utmParams = parseQueryString(this.getQueryString_());\n    const campaign = utmParams['utm_campaign'];\n    const medium = utmParams['utm_medium'];\n    const source = utmParams['utm_source'];\n    if (campaign) {\n      context.setUtmCampaign(campaign);\n    }\n    if (medium) {\n      context.setUtmMedium(medium);\n    }\n    if (source) {\n      context.setUtmSource(source);\n    }\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   */\n  start() {\n    if (!this.serviceReady_) {\n      // Please note that currently openIframe reads the current analytics\n      // context and that it may not contain experiments activated late during\n      // the publishers code lifecycle.\n      this.addLabels(getOnExperiments(this.doc_.getWin()));\n      this.serviceReady_ = this.activityPorts_\n        .openIframe(this.iframe_, feUrl('/serviceiframe'), null, true)\n        .then(\n          (port) => {\n            // Register a listener for the logging to code indicate it is\n            // finished logging.\n            port.on(FinishedLoggingResponse, this.afterLogging_.bind(this));\n            return port.whenReady().then(() => {\n              // The publisher should be done setting experiments but runtime\n              // will forward them here if they aren't.\n              this.addLabels(getOnExperiments(this.doc_.getWin()));\n              return port;\n            });\n          },\n          (message) => {\n            // If the port doesn't open register that logging is broken so\n            // nothing is just waiting.\n            this.loggingBroken_ = true;\n            this.afterLogging_(\n              createErrorResponse('Could not connect [' + message + ']')\n            );\n          }\n        );\n    }\n    return this.serviceReady_;\n  }\n\n  /**\n   * @param {boolean} isReadyToPay\n   */\n  setReadyToPay(isReadyToPay) {\n    this.context_.setReadyToPay(isReadyToPay);\n  }\n\n  /**\n   */\n  close() {\n    this.doc_.getBody().removeChild(this.getElement());\n  }\n\n  /**\n   * @return {!AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {!AnalyticsRequest}\n   */\n  createLogRequest_(event) {\n    const meta = new AnalyticsEventMeta();\n    meta.setEventOriginator(event.eventOriginator);\n    meta.setIsFromUserAction(event.isFromUserAction);\n\n    const request = new AnalyticsRequest();\n    request.setEvent(event.eventType);\n    request.setContext(this.context_);\n    request.setMeta(meta);\n    if (event.additionalParameters instanceof EventParams) {\n      request.setParams(event.additionalParameters);\n    } // Ignore event.additionalParameters.  It may have data we shouldn't log.\n    return request;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  shouldLogPublisherEvents_() {\n    return this.deps_.config().enableSwgAnalytics === true;\n  }\n\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {boolean}\n   */\n  shouldAlwaysLogEvent_(event) {\n    /* AMP_CLIENT events are considered publisher events and we generally only\n     * log those if the publisher decided to enable publisher event logging for\n     * privacy purposes.  The page load event is not private and is necessary\n     * just so we know the user is in AMP, so we will log it regardless of\n     * configuration.\n     */\n    return (\n      event.eventType === AnalyticsEvent.IMPRESSION_PAGE_LOAD &&\n      event.eventOriginator === EventOriginator.AMP_CLIENT\n    );\n  }\n\n  /**\n   *  Listens for new events from the events manager and handles logging\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    //this event is just used to communicate information internally.  It should\n    //not be reported to the SwG analytics service.\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      return;\n    }\n\n    if (\n      ClientEventManager.isPublisherEvent(event) &&\n      !this.shouldLogPublisherEvents_() &&\n      !this.shouldAlwaysLogEvent_(event)\n    ) {\n      return;\n    }\n    // Register we sent a log, the port will call this.afterLogging_ when done.\n    this.unfinishedLogs_++;\n    this.lastAction_ = this.start().then((port) => {\n      const analyticsRequest = this.createLogRequest_(event);\n      port.execute(analyticsRequest);\n      if (isExperimentOn(this.doc_.getWin(), ExperimentFlags.LOGGING_BEACON)) {\n        this.sendBeacon_(analyticsRequest);\n      }\n    });\n  }\n\n  /**\n   * This function is called by the iframe after it sends the log to the server.\n   * @param {FinishedLoggingResponse=} response\n   */\n  afterLogging_(response) {\n    const success = (response && response.getComplete()) || false;\n    const error = (response && response.getError()) || 'Unknown logging Error';\n    const isTimeout = error === TIMEOUT_ERROR;\n\n    if (!success) {\n      log('Error when logging: ' + error);\n    }\n\n    this.unfinishedLogs_--;\n    if (!isTimeout) {\n      this.everFinishedLog_ = true;\n    }\n\n    // Nothing is waiting\n    if (this.loggingResolver_ === null) {\n      return;\n    }\n\n    if (this.unfinishedLogs_ === 0 || this.loggingBroken_ || isTimeout) {\n      if (this.timeout_ !== null) {\n        clearTimeout(this.timeout_);\n        this.timeout_ = null;\n      }\n      this.loggingResolver_(success);\n      this.promiseToLog_ = null;\n      this.loggingResolver_ = null;\n    }\n  }\n\n  /**\n   * Please note that logs sent after getLoggingPromise is called are not\n   * guaranteed to be finished when the promise is resolved.  You should call\n   * this function just prior to redirecting the page after SwG is finished\n   * logging.\n   * @return {!Promise}\n   */\n  getLoggingPromise() {\n    if (this.unfinishedLogs_ === 0 || this.loggingBroken_) {\n      return Promise.resolve(true);\n    }\n    if (this.promiseToLog_ === null) {\n      this.promiseToLog_ = new Promise((resolve) => {\n        this.loggingResolver_ = resolve;\n      });\n\n      // The promise above should not wait forever if things go wrong.  Let\n      // the user proceed!\n      const whenDone = this.afterLogging_.bind(this);\n      this.timeout_ = setTimeout(\n        () => {\n          this.timeout_ = null;\n          whenDone(createErrorResponse(TIMEOUT_ERROR));\n        },\n        this.everFinishedLog_ ? MAX_WAIT : MAX_FIRST_WAIT\n      );\n    }\n\n    return this.promiseToLog_;\n  }\n\n  /**\n   * A beacon is a rapid fire browser request that does not wait for a response\n   * from the server.  It is guaranteed to go out before the page redirects.\n   * @param {!AnalyticsRequest} analyticsRequest\n   */\n  sendBeacon_(analyticsRequest) {\n    const pubId = encodeURIComponent(\n      this.deps_.pageConfig().getPublicationId()\n    );\n    const url = serviceUrl('/publication/' + pubId + '/clientlogs');\n    this.fetcher_.sendBeacon(url, analyticsRequest);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {SmartSubscriptionButtonApi, Theme} from './smart-button-api';\nimport {createElement} from '../utils/dom';\nimport {msg} from '../utils/i18n';\n\n/**\n * The button title should match that of button's SVG.\n */\n/** @type {!Object<string, string>} */\nconst TITLE_LANG_MAP = {\n  'en': 'Subscribe with Google',\n  'ar': 'Google اشترك مع',\n  'de': 'Abonnieren mit Google',\n  'es': 'Suscríbete con Google',\n  'es-latam': 'Suscríbete con Google',\n  'es-latn': 'Suscríbete con Google',\n  'fr': \"S'abonner avec Google\",\n  'hi': 'Google के ज़रिये सदस्यता',\n  'id': 'Berlangganan dengan Google',\n  'it': 'Abbonati con Google',\n  'jp': 'Google で購読',\n  'ko': 'Google 을 통한구독',\n  'ms': 'Langgan dengan Google',\n  'nl': 'Abonneren via Google',\n  'no': 'Abonner med Google',\n  'pl': 'Subskrybuj z Google',\n  'pt': 'Subscrever com o Google',\n  'pt-br': 'Assine com o Google',\n  'ru': 'Подпиcka через Google',\n  'se': 'Prenumerera med Google',\n  'th': 'สมัครฟาน Google',\n  'tr': 'Google ile Abone Ol',\n  'uk': 'Підписатися через Google',\n  'zh-tw': '透過 Google 訂閱',\n};\n\n/*\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n *\n * @typedef {{\n *   options: (!../api/subscriptions.SmartButtonOptions|!../api/subscriptions.ButtonOptions),\n *   clickFun: (!function(Event):?),\n * }}\n */\nexport let ButtonParams;\n\n/**\n * The button stylesheet can be found in the `/assets/swg-button.css`.\n * It's produced by the `gulp assets` task and deployed to\n * `https://news.google.com/swg/js/v1/swg-button.css`.\n */\nexport class ButtonApi {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {!Promise<!./runtime.ConfiguredRuntime>} configuredRuntimePromise\n   */\n  constructor(doc, configuredRuntimePromise) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise<!./runtime.ConfiguredRuntime>} */\n    this.configuredRuntimePromise_ = configuredRuntimePromise;\n  }\n\n  /**\n   */\n  init() {\n    const head = this.doc_.getHead();\n    if (!head) {\n      return;\n    }\n\n    const url = '$assets$/swg-button.css';\n    const existing = head.querySelector(`link[href=\"${url}\"]`);\n    if (existing) {\n      return;\n    }\n\n    // <link rel=\"stylesheet\" href=\"...\" type=\"text/css\">\n    head.appendChild(\n      createElement(this.doc_.getWin().document, 'link', {\n        'rel': 'stylesheet',\n        'type': 'text/css',\n        'href': url,\n      })\n    );\n  }\n\n  /**\n   * @param {!../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  create(optionsOrCallback, callback) {\n    const button = createElement(this.doc_.getWin().document, 'button', {});\n    return this.attach(button, optionsOrCallback, callback);\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  attach(button, optionsOrCallback, callback) {\n    const options = this.setupButtonAndGetParams_(\n      button,\n      optionsOrCallback,\n      callback\n    ).options;\n\n    const theme = options['theme'];\n    button.classList.add(`swg-button-${theme}`);\n    button.setAttribute('role', 'button');\n    if (options['lang']) {\n      button.setAttribute('lang', options['lang']);\n    }\n    button.setAttribute('title', msg(TITLE_LANG_MAP, button) || '');\n    this.logSwgEvent_(AnalyticsEvent.IMPRESSION_SWG_BUTTON);\n\n    return button;\n  }\n\n  /**\n   * @param {!AnalyticsEvent} eventType\n   * @param {boolean=} isFromUserAction\n   */\n  logSwgEvent_(eventType, isFromUserAction) {\n    this.configuredRuntimePromise_.then((configuredRuntime) => {\n      configuredRuntime.eventManager().logSwgEvent(eventType, isFromUserAction);\n    });\n  }\n\n  /**\n   *\n   * @param {../api/subscriptions.ButtonOptions|../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @return {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions}\n   * @private\n   */\n  getOptions_(optionsOrCallback) {\n    const options = /** @type {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions} */ (optionsOrCallback &&\n    typeof optionsOrCallback != 'function'\n      ? optionsOrCallback\n      : {'theme': Theme.LIGHT});\n\n    const theme = options['theme'];\n    if (theme !== Theme.LIGHT && theme !== Theme.DARK) {\n      options['theme'] = Theme.LIGHT;\n    }\n    return options;\n  }\n\n  /**\n   *\n   * @param {?../api/subscriptions.ButtonOptions|?../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {function()|function(Event):boolean}\n   * @private\n   */\n  getCallback_(optionsOrCallback, callback) {\n    return /** @type {function()|function(Event):boolean} */ ((typeof optionsOrCallback ==\n    'function'\n      ? optionsOrCallback\n      : null) || callback);\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {../api/subscriptions.SmartButtonOptions|function()|../api/subscriptions.ButtonOptions} optionsOrCallback\n   * @param {function()=} callbackFun\n   * @return {ButtonParams}\n   */\n  setupButtonAndGetParams_(button, optionsOrCallback, callbackFun) {\n    const options = this.getOptions_(optionsOrCallback);\n    const callback = this.getCallback_(optionsOrCallback, callbackFun);\n    const clickFun = (event) => {\n      this.logSwgEvent_(AnalyticsEvent.ACTION_SWG_BUTTON_CLICK, true);\n      if (typeof callback === 'function') {\n        callback(event);\n      }\n    };\n    button.addEventListener('click', clickFun);\n    return {options, clickFun};\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  attachSmartButton(deps, button, optionsOrCallback, callback) {\n    const params = this.setupButtonAndGetParams_(\n      button,\n      optionsOrCallback,\n      callback\n    );\n    // Add required CSS class, if missing.\n    button.classList.add('swg-smart-button');\n    return new SmartSubscriptionButtonApi(\n      deps,\n      button,\n      params.options,\n      params.clickFun\n    ).start();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {isCancelError} from '../utils/errors';\nimport {warn} from '../utils/log';\n\n/** @enum {number} */\nconst CallbackId = {\n  ENTITLEMENTS: 1,\n  SUBSCRIBE_REQUEST: 2,\n  PAYMENT_RESPONSE: 3,\n  LOGIN_REQUEST: 4,\n  LINK_PROGRESS: 5,\n  LINK_COMPLETE: 6,\n  FLOW_STARTED: 7,\n  FLOW_CANCELED: 8,\n};\n\n/**\n */\nexport class Callbacks {\n  /**\n   */\n  constructor() {\n    /** @private @const {!Object<CallbackId, function(*)>} */\n    this.callbacks_ = {};\n    /** @private @const {!Object<CallbackId, *>} */\n    this.resultBuffer_ = {};\n    /** @private {?Promise} */\n    this.paymentResponsePromise_ = null;\n  }\n\n  /**\n   * @param {function(!Promise<!../api/entitlements.Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {\n    this.setCallback_(CallbackId.ENTITLEMENTS, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/entitlements.Entitlements>} promise\n   */\n  triggerEntitlementsResponse(promise) {\n    return this.trigger_(\n      CallbackId.ENTITLEMENTS,\n      promise.then((res) => res.clone())\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEntitlementsResponsePending() {\n    return !!this.resultBuffer_[CallbackId.ENTITLEMENTS];\n  }\n\n  /**\n   * @param {function(!../api/subscriptions.LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {\n    this.setCallback_(CallbackId.LOGIN_REQUEST, callback);\n  }\n\n  /**\n   * @param {!../api/subscriptions.LoginRequest} request\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLoginRequest(request) {\n    return this.trigger_(CallbackId.LOGIN_REQUEST, request);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkProgress(callback) {\n    this.setCallback_(CallbackId.LINK_PROGRESS, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkProgress() {\n    return this.trigger_(CallbackId.LINK_PROGRESS, true);\n  }\n\n  /**\n   */\n  resetLinkProgress() {\n    this.resetCallback_(CallbackId.LINK_PROGRESS);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {\n    this.setCallback_(CallbackId.LINK_COMPLETE, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkComplete() {\n    return this.trigger_(CallbackId.LINK_COMPLETE, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLinkCompletePending() {\n    return !!this.resultBuffer_[CallbackId.LINK_COMPLETE];\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnSubscribeRequest(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_REQUEST, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeRequest() {\n    return this.trigger_(CallbackId.SUBSCRIBE_REQUEST, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeRequestCallback() {\n    return !!this.callbacks_[CallbackId.SUBSCRIBE_REQUEST];\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {\n    warn(\n      `[swg.js:setOnSubscribeResponse]: This method has been deprecated, please switch usages to 'setOnPaymentResponse'`\n    );\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {\n    warn(\n      `[swg.js:setOnContributionResponse]: This method has been deprecated, please switch usages to 'setOnPaymentResponse'`\n    );\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnPaymentResponse(callback) {\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/subscribe-response.SubscribeResponse>} responsePromise\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerPaymentResponse(responsePromise) {\n    this.paymentResponsePromise_ = responsePromise.then(\n      (res) => {\n        this.trigger_(\n          CallbackId.PAYMENT_RESPONSE,\n          Promise.resolve(res.clone())\n        );\n      },\n      (reason) => {\n        if (isCancelError(reason)) {\n          return;\n        }\n        throw reason;\n      }\n    );\n    return !!this.callbacks_[CallbackId.PAYMENT_RESPONSE];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasPaymentResponsePending() {\n    return !!this.resultBuffer_[CallbackId.PAYMENT_RESPONSE];\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {\n    this.setCallback_(CallbackId.FLOW_STARTED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowStarted(flow, data = {}) {\n    return this.trigger_(CallbackId.FLOW_STARTED, {\n      flow,\n      data,\n    });\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {\n    this.setCallback_(CallbackId.FLOW_CANCELED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowCanceled(flow, data = {}) {\n    return this.trigger_(CallbackId.FLOW_CANCELED, {\n      flow,\n      data,\n    });\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(?)} callback\n   * @private\n   */\n  setCallback_(id, callback) {\n    if (this.callbacks_[id]) {\n      warn(\n        `[swg.js]: You have registered multiple callbacks for the same response.`\n      );\n    }\n    this.callbacks_[id] = callback;\n    // If result already exist, execute the callback right away.\n    if (id in this.resultBuffer_) {\n      this.executeCallback_(id, callback, this.resultBuffer_[id]);\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {*} data\n   * @return {boolean}\n   * @private\n   */\n  trigger_(id, data) {\n    this.resultBuffer_[id] = data;\n    const callback = this.callbacks_[id];\n    if (callback) {\n      this.executeCallback_(id, callback, data);\n    }\n    return !!callback;\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @private\n   */\n  resetCallback_(id) {\n    if (id in this.resultBuffer_) {\n      delete this.resultBuffer_[id];\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(*)} callback\n   * @param {*} data\n   * @private\n   */\n  executeCallback_(id, callback, data) {\n    // Always execute callbacks in a microtask.\n    Promise.resolve().then(() => {\n      callback(data);\n      this.resetCallback_(id);\n    });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {FilterResult} from '../api/client-event-manager-api';\nimport {isBoolean, isEnumValue, isFunction, isObject} from '../utils/types';\nimport {log} from '../utils/log';\n\n/**\n * Helper function to describe an issue with an event object\n * @param {!string} valueName\n * @param {?*} value\n * @returns {!string}\n */\nfunction createEventErrorMessage(valueName, value) {\n  return 'Event has an invalid ' + valueName + '(' + value + ')';\n}\n\n/**\n * Throws an error if the event is invalid.\n * @param {!../api/client-event-manager-api.ClientEvent} event\n */\nfunction validateEvent(event) {\n  if (!isObject(event)) {\n    throw new Error('Event must be a valid object');\n  }\n\n  if (!isEnumValue(AnalyticsEvent, event.eventType)) {\n    throw new Error(createEventErrorMessage('eventType', event.eventType));\n  }\n\n  if (!isEnumValue(EventOriginator, event.eventOriginator)) {\n    throw new Error(\n      createEventErrorMessage('eventOriginator', event.eventOriginator)\n    );\n  }\n\n  if (\n    !isObject(event.additionalParameters) &&\n    event.additionalParameters != null\n  ) {\n    throw new Error(\n      createEventErrorMessage(\n        'additionalParameters',\n        event.additionalParameters\n      )\n    );\n  }\n\n  if (event.isFromUserAction != null && !isBoolean(event.isFromUserAction)) {\n    throw new Error(\n      createEventErrorMessage('isFromUserAction', event.isFromUserAction)\n    );\n  }\n}\n\n/** @implements {../api/client-event-manager-api.ClientEventManagerApi} */\nexport class ClientEventManager {\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {boolean}\n   */\n  static isPublisherEvent(event) {\n    return (\n      event.eventOriginator === EventOriginator.PROPENSITY_CLIENT ||\n      event.eventOriginator === EventOriginator.PUBLISHER_CLIENT ||\n      event.eventOriginator === EventOriginator.AMP_CLIENT\n    );\n  }\n\n  /**\n   *\n   * @param {!Promise} configuredPromise\n   */\n  constructor(configuredPromise) {\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent)>} */\n    this.listeners_ = [];\n\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent):!FilterResult>} */\n    this.filterers_ = [];\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!Promise} */\n    this.isReadyPromise_ = configuredPromise;\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventListener(listener) {\n    if (!isFunction(listener)) {\n      throw new Error('Event manager listeners must be a function');\n    }\n    this.listeners_.push(listener);\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventFilterer(filterer) {\n    if (!isFunction(filterer)) {\n      throw new Error('Event manager filterers must be a function');\n    }\n    this.filterers_.push(filterer);\n  }\n\n  /**\n   * @overrides\n   */\n  logEvent(event) {\n    validateEvent(event);\n    this.lastAction_ = this.isReadyPromise_.then(() => {\n      for (let filterer = 0; filterer < this.filterers_.length; filterer++) {\n        try {\n          if (this.filterers_[filterer](event) === FilterResult.CANCEL_EVENT) {\n            return Promise.resolve();\n          }\n        } catch (e) {\n          log(e);\n        }\n      }\n      for (let listener = 0; listener < this.listeners_.length; listener++) {\n        try {\n          this.listeners_[listener](event);\n        } catch (e) {\n          log(e);\n        }\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Creates an event with the arguments provided and calls logEvent.\n   * @param {!AnalyticsEvent} eventType\n   * @param {?boolean=} isFromUserAction\n   * @param {../proto/api_messages.EventParams=} eventParams\n   */\n  logSwgEvent(eventType, isFromUserAction = false, eventParams = null) {\n    this.logEvent({\n      eventType,\n      eventOriginator: EventOriginator.SWG_CLIENT,\n      isFromUserAction,\n      additionalParameters: eventParams,\n    });\n  }\n\n  /** @return {!Promise<null>} */\n  getReadyPromise() {\n    return this.isReadyPromise_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AlreadySubscribedResponse,\n  SkuSelectedResponse,\n} from '../proto/api_messages';\nimport {PayStartFlow} from './pay-flow';\nimport {ProductType, SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\n/**\n * The class for Contributions flow.\n */\nexport class ContributionsFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    const isClosable = (options && options.isClosable) || true;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/contributionsiframe'),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productType': ProductType.UI_CONTRIBUTION,\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': isClosable,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    const isOneTime = response.getOneTime();\n    if (sku) {\n      const /** @type {../api/subscriptions.SubscriptionRequest} */ contributionRequest = {\n          'skuId': sku,\n        };\n      if (isOneTime) {\n        contributionRequest['oneTime'] = isOneTime;\n      }\n      new PayStartFlow(\n        this.deps_,\n        contributionRequest,\n        ProductType.UI_CONTRIBUTION\n      ).start();\n    }\n  }\n\n  /**\n   * Starts the contributions flow or alreadyMember flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    });\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n    this.activityIframeView_.on(\n      SkuSelectedResponse,\n      this.startPayFlow_.bind(this)\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {JwtHelper} from '../utils/jwt';\nimport {PayCompleteFlow} from './pay-flow';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\n\n/**\n * The flow to initiate deferred account process.\n * See `Subscriptions.completeDeferredAccountCreation` API.\n */\nexport class DeferredAccountFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?../api/deferred-account-creation.DeferredAccountCreationRequest} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @type {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    const defaultOptions = {\n      entitlements: null,\n      consent: true,\n    };\n    /** @private @const {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    this.options_ = Object.assign(defaultOptions, options || {});\n  }\n\n  /**\n   * Starts the deferred account flow.\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  start() {\n    const entitlements = this.options_.entitlements;\n\n    // For now, entitlements are required to be present and have the Google\n    // token. This is strictly not required for the implementation. But it's\n    // preferrable API-wise at this time.\n    if (!entitlements || !entitlements.getEntitlementForSource('google')) {\n      throw new Error('No entitlements with \"google\" source');\n    }\n\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION);\n\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/recoveriframe'),\n      feArgs({\n        'publicationId': this.deps_.pageConfig().getPublicationId(),\n        'productId': this.deps_.pageConfig().getProductId(),\n        'entitlements': (entitlements && entitlements.raw) || null,\n        'consent': this.options_.consent,\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.activityIframeView_.acceptResult().then(\n      (result) => {\n        // The consent part is complete.\n        return this.handleConsentResponse_(\n          /** @type {!Object} */ (result.data)\n        );\n      },\n      (reason) => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(\n              SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION\n            );\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n\n  /**\n   * @param {!Object} data\n   * @return {!DeferredAccountCreationResponse}\n   * @private\n   */\n  handleConsentResponse_(data) {\n    this.deps_.entitlementsManager().blockNextNotification();\n\n    // Parse the response.\n    const entitlementsJwt = data['entitlements'];\n    const idToken = data['idToken'];\n    const productType = data['productType'];\n    const entitlements = this.deps_\n      .entitlementsManager()\n      .parseEntitlements({'signedEntitlements': entitlementsJwt});\n    const userData = new UserData(\n      idToken,\n      /** @type {!Object} */ (new JwtHelper().decode(idToken))\n    );\n    const purchaseDataList = data['purchaseDataList']\n      ? data['purchaseDataList'].map(\n          (pd) => new PurchaseData(pd['data'], pd['signature'])\n        )\n      : [\n          // TODO(dvoytenko): cleanup/deprecate.\n          new PurchaseData(\n            data['purchaseData']['data'],\n            data['purchaseData']['signature']\n          ),\n        ];\n\n    // For now, we'll use the `PayCompleteFlow` as a \"creating account\" flow.\n    // But this can be eventually implemented by the same iframe.\n    const creatingFlow = new PayCompleteFlow(this.deps_);\n    const completeHandler = creatingFlow.complete.bind(creatingFlow);\n\n    const response = new DeferredAccountCreationResponse(\n      entitlements,\n      userData,\n      purchaseDataList,\n      completeHandler\n    );\n\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.ACTION_NEW_DEFERRED_ACCOUNT, true);\n\n    // Start the \"sync\" flow.\n    creatingFlow.start(\n      new SubscribeResponse(\n        '', // raw field doesn't matter in this case\n        purchaseDataList[0],\n        userData,\n        entitlements,\n        productType,\n        () => Promise.resolve() // completeHandler doesn't matter in this case\n      )\n    );\n    return response;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @interface */\nexport class DepsDef {\n  /**\n   * @return {!../model/doc.Doc}\n   */\n  doc() {}\n\n  /**\n   * @return {!Window}\n   */\n  win() {}\n\n  /**\n   * @return {!../api/subscriptions.Config}\n   */\n  config() {}\n\n  /**\n   * @return {!../model/page-config.PageConfig}\n   */\n  pageConfig() {}\n\n  /**\n   * @return {!../components/activities.ActivityPorts}\n   */\n  activities() {}\n\n  /**\n   * @return {!./pay-client.PayClient}\n   */\n  payClient() {}\n\n  /**\n   * @return {!../components/dialog-manager.DialogManager}\n   */\n  dialogManager() {}\n\n  /**\n   * @return {!./entitlements-manager.EntitlementsManager}\n   */\n  entitlementsManager() {}\n\n  /**\n   * @return {!./callbacks.Callbacks}\n   */\n  callbacks() {}\n\n  /**\n   * @return {!../runtime/storage.Storage}\n   */\n  storage() {}\n\n  /**\n   * @return {!../runtime/analytics-service.AnalyticsService}\n   */\n  analytics() {}\n\n  /**\n   * @return {!../runtime/jserror.JsError}\n   */\n  jserror() {}\n\n  /**\n   * @return {!../runtime/client-event-manager.ClientEventManager}\n   */\n  eventManager() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsEvent,\n  EntitlementJwt,\n  EntitlementsRequest,\n} from '../proto/api_messages';\nimport {\n  Entitlement,\n  Entitlements,\n  GOOGLE_METERING_SOURCE,\n} from '../api/entitlements';\nimport {\n  GetEntitlementsParamsExternalDef,\n  GetEntitlementsParamsInternalDef,\n} from '../api/subscriptions';\nimport {JwtHelper} from '../utils/jwt';\nimport {MeterClientTypes} from '../api/metering';\nimport {MeterToastApi} from './meter-toast-api';\nimport {Toast} from '../ui/toast';\nimport {feArgs, feUrl} from '../runtime/services';\nimport {getCanonicalUrl} from '../utils/url';\nimport {hash} from '../utils/string';\nimport {serviceUrl} from './services';\nimport {toTimestamp} from '../utils/date-utils';\nimport {warn} from '../utils/log';\n\nconst SERVICE_ID = 'subscribe.google.com';\nconst TOAST_STORAGE_KEY = 'toast';\nconst ENTS_STORAGE_KEY = 'ents';\nconst IS_READY_TO_PAY_STORAGE_KEY = 'isreadytopay';\n\n/**\n */\nexport class EntitlementsManager {\n  /**\n   * @param {!Window} win\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {!./fetcher.Fetcher} fetcher\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(win, pageConfig, fetcher, deps) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {string} */\n    this.publicationId_ = this.pageConfig_.getPublicationId();\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!JwtHelper} */\n    this.jwtHelper_ = new JwtHelper();\n\n    /** @private {?Promise<!Entitlements>} */\n    this.responsePromise_ = null;\n\n    /** @private {number} */\n    this.positiveRetries_ = 0;\n\n    /** @private {boolean} */\n    this.blockNextNotification_ = false;\n\n    /** @private @const {!./storage.Storage} */\n    this.storage_ = deps.storage();\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = deps.config();\n  }\n\n  /**\n   * @param {boolean=} expectPositive\n   */\n  reset(expectPositive) {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = Math.max(\n      this.positiveRetries_,\n      expectPositive ? 3 : 0\n    );\n    if (expectPositive) {\n      this.storage_.remove(ENTS_STORAGE_KEY);\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    }\n  }\n\n  /**\n   * Clears all of the entitlements state and cache.\n   */\n  clear() {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = 0;\n    this.unblockNextNotification();\n    this.storage_.remove(ENTS_STORAGE_KEY);\n    this.storage_.remove(TOAST_STORAGE_KEY);\n    this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n  }\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(params) {\n    // Remain backwards compatible by accepting\n    // `encryptedDocumentKey` string as a first param.\n    if (typeof params === 'string') {\n      // TODO: Delete the fallback if nobody needs it. Use a log to verify.\n      if (Date.now() > 1600289016959) {\n        // TODO: Remove the conditional check for this warning\n        // after the AMP extension is updated to pass an object.\n        warn(\n          `[swg.js:getEntitlements]: If present, the first param of getEntitlements() should be an object of type GetEntitlementsParamsExternalDef.`\n        );\n      }\n\n      params = {\n        encryption: {encryptedDocumentKey: /**@type {string} */ (params)},\n      };\n    }\n\n    if (!this.responsePromise_) {\n      this.responsePromise_ = this.getEntitlementsFlow_(params);\n    }\n    return this.responsePromise_.then((response) => {\n      if (response.isReadyToPay != null) {\n        this.analyticsService_.setReadyToPay(response.isReadyToPay);\n      }\n      return response;\n    });\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean=} isReadyToPay\n   * @return {boolean}\n   */\n  pushNextEntitlements(raw, isReadyToPay) {\n    const entitlements = this.getValidJwtEntitlements_(\n      raw,\n      /* requireNonExpired */ true,\n      isReadyToPay\n    );\n    if (entitlements && entitlements.enablesThis()) {\n      this.storage_.set(ENTS_STORAGE_KEY, raw);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sends a pingback that marks a metering entitlement as used.\n   * @param {!Entitlements} entitlements\n   */\n  sendPingback_(entitlements) {\n    const entitlement = entitlements.getEntitlementForThis();\n    if (!entitlement || entitlement.source !== GOOGLE_METERING_SOURCE) {\n      return;\n    }\n\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.EVENT_UNLOCKED_BY_METER, false);\n\n    const jwt = new EntitlementJwt();\n    jwt.setSource(entitlement.source);\n    jwt.setJwt(entitlement.subscriptionToken);\n\n    const message = new EntitlementsRequest();\n    message.setUsedEntitlement(jwt);\n    message.setClientEventTime(toTimestamp(Date.now()));\n\n    const url =\n      '/publication/' +\n      encodeURIComponent(this.publicationId_) +\n      '/entitlements';\n\n    this.fetcher_.sendPost(serviceUrl(url), message);\n  }\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  getEntitlementsFlow_(params) {\n    return this.fetchEntitlementsWithCaching_(params).then((entitlements) => {\n      this.onEntitlementsFetched_(entitlements);\n      return entitlements;\n    });\n  }\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlementsWithCaching_(params) {\n    return Promise.all([\n      this.storage_.get(ENTS_STORAGE_KEY),\n      this.storage_.get(IS_READY_TO_PAY_STORAGE_KEY),\n    ]).then((cachedValues) => {\n      const raw = cachedValues[0];\n      const irtp = cachedValues[1];\n      // Try cache first.\n      const needsDecryption = !!(params && params.encryption);\n      if (raw && !needsDecryption) {\n        const cached = this.getValidJwtEntitlements_(\n          raw,\n          /* requireNonExpired */ true,\n          irtpStringToBoolean(irtp)\n        );\n        if (cached && cached.enablesThis()) {\n          // Already have a positive response.\n          this.positiveRetries_ = 0;\n          return cached;\n        }\n      }\n      // If cache didn't match, perform fetch.\n      return this.fetchEntitlements_(params).then((ents) => {\n        // If the product is enabled by cacheable entitlements, store them in cache.\n        if (ents && ents.enablesThisWithCacheableEntitlements() && ents.raw) {\n          this.storage_.set(ENTS_STORAGE_KEY, ents.raw);\n        }\n        return ents;\n      });\n    });\n  }\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlements_(params) {\n    // TODO(dvoytenko): Replace retries with consistent fetch.\n    let positiveRetries = this.positiveRetries_;\n    this.positiveRetries_ = 0;\n    const attempt = () => {\n      positiveRetries--;\n      return this.fetch_(params).then((entitlements) => {\n        if (entitlements.enablesThis() || positiveRetries <= 0) {\n          return entitlements;\n        }\n        return new Promise((resolve) => {\n          this.win_.setTimeout(() => {\n            resolve(attempt());\n          }, 550);\n        });\n      });\n    };\n    return attempt();\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setToastShown(value) {\n    this.storage_.set(TOAST_STORAGE_KEY, value ? '1' : '0');\n  }\n\n  /**\n   */\n  blockNextNotification() {\n    this.blockNextNotification_ = true;\n  }\n\n  /**\n   */\n  unblockNextNotification() {\n    this.blockNextNotification_ = false;\n  }\n\n  /**\n   * The JSON must either contain a \"signedEntitlements\" with JWT, or\n   * \"entitlements\" field with plain JSON object.\n   * @param {!Object} json\n   * @return {!Entitlements}\n   */\n  parseEntitlements(json) {\n    const isReadyToPay = json['isReadyToPay'];\n    if (isReadyToPay == null) {\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    } else {\n      this.storage_.set(IS_READY_TO_PAY_STORAGE_KEY, String(isReadyToPay));\n    }\n    const signedData = json['signedEntitlements'];\n    const decryptedDocumentKey = json['decryptedDocumentKey'];\n    if (signedData) {\n      const entitlements = this.getValidJwtEntitlements_(\n        signedData,\n        /* requireNonExpired */ false,\n        isReadyToPay,\n        decryptedDocumentKey\n      );\n      if (entitlements) {\n        return entitlements;\n      }\n    } else {\n      const plainEntitlements = json['entitlements'];\n      if (plainEntitlements) {\n        return this.createEntitlements_(\n          '',\n          plainEntitlements,\n          isReadyToPay,\n          decryptedDocumentKey\n        );\n      }\n    }\n    // Empty response.\n    return this.createEntitlements_('', [], isReadyToPay);\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean} requireNonExpired\n   * @param {boolean=} isReadyToPay\n   * @param {?string=} decryptedDocumentKey\n   * @return {?Entitlements}\n   * @private\n   */\n  getValidJwtEntitlements_(\n    raw,\n    requireNonExpired,\n    isReadyToPay,\n    decryptedDocumentKey\n  ) {\n    try {\n      const jwt = this.jwtHelper_.decode(raw);\n      if (requireNonExpired) {\n        const now = Date.now();\n        const exp = jwt['exp'];\n        if (parseFloat(exp) * 1000 < now) {\n          return null;\n        }\n      }\n      const entitlementsClaim = jwt['entitlements'];\n      return (\n        (entitlementsClaim &&\n          this.createEntitlements_(\n            raw,\n            entitlementsClaim,\n            isReadyToPay,\n            decryptedDocumentKey\n          )) ||\n        null\n      );\n    } catch (e) {\n      // Ignore the error.\n      this.win_.setTimeout(() => {\n        throw e;\n      });\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} raw\n   * @param {!Object|!Array<!Object>} json\n   * @param {boolean=} isReadyToPay\n   * @param {?string=} decryptedDocumentKey\n   * @return {!Entitlements}\n   * @private\n   */\n  createEntitlements_(raw, json, isReadyToPay, decryptedDocumentKey) {\n    return new Entitlements(\n      SERVICE_ID,\n      raw,\n      Entitlement.parseListFromJson(json),\n      this.pageConfig_.getProductId(),\n      this.ack_.bind(this),\n      this.consume_.bind(this),\n      isReadyToPay,\n      decryptedDocumentKey\n    );\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  onEntitlementsFetched_(entitlements) {\n    // Skip any notifications and toast if other flows are ongoing.\n    // TODO(dvoytenko): what's the right action when pay flow was canceled?\n    const blockNotification = this.blockNextNotification_;\n    this.blockNextNotification_ = false;\n    if (blockNotification) {\n      return;\n    }\n\n    // Notify on the received entitlements.\n    this.deps_\n      .callbacks()\n      .triggerEntitlementsResponse(Promise.resolve(entitlements));\n\n    const entitlement = entitlements.getEntitlementForThis();\n    if (!entitlement) {\n      this.deps_\n        .eventManager()\n        .logSwgEvent(AnalyticsEvent.EVENT_NO_ENTITLEMENTS, false);\n      return;\n    }\n\n    this.maybeShowToast_(entitlement);\n  }\n\n  /**\n   * @param {!Entitlement} entitlement\n   * @return {!Promise}\n   * @private\n   */\n  maybeShowToast_(entitlement) {\n    // Don't show toast for metering entitlements.\n    if (entitlement.source === GOOGLE_METERING_SOURCE) {\n      this.deps_\n        .eventManager()\n        .logSwgEvent(AnalyticsEvent.EVENT_HAS_METERING_ENTITLEMENTS, false);\n      return Promise.resolve();\n    }\n\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.EVENT_UNLOCKED_BY_SUBSCRIPTION, false);\n    // Check if storage bit is set. It's only set by the `Entitlements.ack` method.\n    return this.storage_.get(TOAST_STORAGE_KEY).then((value) => {\n      const toastWasShown = value === '1';\n      if (toastWasShown) {\n        return;\n      }\n\n      // Show toast.\n      const source = entitlement.source || 'google';\n      return new Toast(\n        this.deps_,\n        feUrl('/toastiframe'),\n        feArgs({\n          'publicationId': this.publicationId_,\n          'source': source,\n        })\n      ).open();\n    });\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  ack_(entitlements) {\n    if (entitlements.getEntitlementForThis()) {\n      this.setToastShown(true);\n    }\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @param {?Function=} onCloseDialog Called after the user closes the dialog.\n   * @private\n   */\n  consume_(entitlements, onCloseDialog) {\n    if (entitlements.enablesThisWithGoogleMetering()) {\n      const meterToastApi = new MeterToastApi(this.deps_);\n      meterToastApi.setOnCancelCallback(() => {\n        if (onCloseDialog) {\n          onCloseDialog();\n        }\n        meterToastApi.removeCloseEventListener();\n        this.sendPingback_(entitlements);\n      });\n      return meterToastApi.start();\n    }\n  }\n\n  /**\n   * @param {!GetEntitlementsParamsExternalDef=} params\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetch_(params) {\n    return hash(getCanonicalUrl(this.deps_.doc()))\n      .then((hashedCanonicalUrl) => {\n        const urlParams = [];\n\n        // Add encryption param.\n        if (params && params.encryption) {\n          urlParams.push(\n            'crypt=' +\n              encodeURIComponent(params.encryption.encryptedDocumentKey)\n          );\n        }\n\n        // Add metering params.\n        if (\n          this.publicationId_ &&\n          params &&\n          params.metering &&\n          params.metering.state\n        ) {\n          /** @type {!GetEntitlementsParamsInternalDef} */\n          const encodableParams = {\n            metering: {\n              clientTypes: [MeterClientTypes.LICENSED_BY_GOOGLE],\n              owner: this.publicationId_,\n              resource: {\n                hashedCanonicalUrl,\n              },\n              state: {\n                id: params.metering.state.id,\n                attributes: [],\n              },\n            },\n          };\n\n          // Add attributes.\n          const standardAttributes = params.metering.state.standardAttributes;\n          if (standardAttributes) {\n            Object.keys(standardAttributes).forEach((key) => {\n              encodableParams.metering.state.attributes.push({\n                name: 'standard_' + key,\n                timestamp: standardAttributes[key].timestamp,\n              });\n            });\n          }\n          const customAttributes = params.metering.state.customAttributes;\n          if (customAttributes) {\n            Object.keys(customAttributes).forEach((key) => {\n              encodableParams.metering.state.attributes.push({\n                name: 'custom_' + key,\n                timestamp: customAttributes[key].timestamp,\n              });\n            });\n          }\n\n          // Encode params.\n          const encodedParams = btoa(JSON.stringify(encodableParams));\n          urlParams.push('encodedParams=' + encodedParams);\n        }\n\n        // Build URL.\n        let url =\n          '/publication/' +\n          encodeURIComponent(this.publicationId_) +\n          '/entitlements';\n        if (urlParams.length > 0) {\n          url += '?' + urlParams.join('&');\n        }\n        return serviceUrl(url);\n      })\n      .then((url) => {\n        this.deps_\n          .eventManager()\n          .logSwgEvent(AnalyticsEvent.ACTION_GET_ENTITLEMENTS, false);\n        return this.fetcher_.fetchCredentialedJson(url);\n      })\n      .then((json) => {\n        if (json.errorMessages && json.errorMessages.length > 0) {\n          json.errorMessages.forEach((errorMessage) => {\n            warn('SwG Entitlements: ' + errorMessage);\n          });\n        }\n        return this.parseEntitlements(json);\n      });\n  }\n}\n\n/**\n * Convert String value of isReadyToPay\n * (from JSON or Cache) to a boolean value.\n * @param {string} value\n * @return {boolean|undefined}\n * @private\n */\nfunction irtpStringToBoolean(value) {\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return undefined;\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {Event} from '../api/logger-api';\n\n/** @const {!Object<string,AnalyticsEvent>} */\nconst PublisherEventToAnalyticsEvent = {\n  [Event.IMPRESSION_PAYWALL]: AnalyticsEvent.IMPRESSION_PAYWALL,\n  [Event.IMPRESSION_AD]: AnalyticsEvent.IMPRESSION_AD,\n  [Event.IMPRESSION_OFFERS]: AnalyticsEvent.IMPRESSION_OFFERS,\n  [Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [Event.ACTION_OFFER_SELECTED]: AnalyticsEvent.ACTION_OFFER_SELECTED,\n  [Event.ACTION_PAYMENT_FLOW_STARTED]:\n    AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n  [Event.ACTION_PAYMENT_COMPLETED]: AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n  [Event.EVENT_CUSTOM]: AnalyticsEvent.EVENT_CUSTOM,\n};\n\n/** @const {!Object<number,?Event>} */\nconst AnalyticsEventToPublisherEvent = {\n  [AnalyticsEvent.UNKNOWN]: null,\n  [AnalyticsEvent.IMPRESSION_PAYWALL]: Event.IMPRESSION_PAYWALL,\n  [AnalyticsEvent.IMPRESSION_AD]: Event.IMPRESSION_AD,\n  [AnalyticsEvent.IMPRESSION_OFFERS]: Event.IMPRESSION_OFFERS,\n  [AnalyticsEvent.IMPRESSION_SUBSCRIBE_BUTTON]: null,\n  [AnalyticsEvent.IMPRESSION_SMARTBOX]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIBE]: null,\n  [AnalyticsEvent.ACTION_PAYMENT_COMPLETE]: Event.ACTION_PAYMENT_COMPLETED,\n  [AnalyticsEvent.ACTION_ACCOUNT_CREATED]: null,\n  [AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED]:\n    Event.ACTION_PAYMENT_FLOW_STARTED,\n  [AnalyticsEvent.ACTION_OFFER_SELECTED]: Event.ACTION_OFFER_SELECTED,\n  [AnalyticsEvent.EVENT_PAYMENT_FAILED]: null,\n  [AnalyticsEvent.EVENT_CUSTOM]: Event.EVENT_CUSTOM,\n};\n\n/**\n * Converts a propensity event enum into an analytics event enum.\n * @param {!Event|string} propensityEvent\n * @returns {!AnalyticsEvent}\n */\nexport function publisherEventToAnalyticsEvent(propensityEvent) {\n  return PublisherEventToAnalyticsEvent[propensityEvent];\n}\n\n/**\n * Converts an analytics event enum into a propensity event enum.\n * @param {!AnalyticsEvent} analyticsEvent\n * @returns {?Event}\n */\nexport function analyticsEventToPublisherEvent(analyticsEvent) {\n  return AnalyticsEventToPublisherEvent[analyticsEvent];\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const ExperimentFlags = {\n  /**\n   * Enables the feature that allows you to replace one subscription\n   * for another in the subscribe() API.\n   */\n  REPLACE_SUBSCRIPTION: 'replace-subscription',\n\n  /**\n   * Enables the contributions feature.\n   * DEPRECATED. This flag can be removed once not used by anyone.\n   */\n  CONTRIBUTIONS: 'contributions',\n\n  /**\n   * Enables the Propensity feature\n   */\n  PROPENSITY: 'propensity',\n\n  /**\n   * Enables the Smartbox feature.\n   */\n  SMARTBOX: 'smartbox',\n\n  /**\n   * Enables using new Activities APIs\n   */\n  HEJIRA: 'hejira',\n\n  /** Enables logging to both the new SwG Clearcut service and the pre-existing\n   *  Clearcut iframe while we verify the new logging system works.\n   *  Publishers should not activate this experiment.\n   */\n  LOGGING_BEACON: 'logging-beacon',\n\n  /** Enables googleTransactionID change. With the experiment on the ID is\n   *  changed from '<uuid>' to '<uuid>.swg'.\n   */\n  UPDATE_GOOGLE_TRANSACTION_ID: 'update-google-transaction-id',\n\n  /**\n   * Enables PayClient to be instantiated within start() instead of upon instantiation.\n   * Also moves google preconnects to Runtime from PayClient, and runs Pay\n   * preloads upon start() instead of within the ctor.\n   */\n  PAY_CLIENT_LAZYLOAD: 'pay-client-lazyload',\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ErrorUtils} from '../utils/errors';\nimport {parseQueryString} from '../utils/url';\n\n/**\n * @fileoverview\n *\n * Client-side experiments in SwG.\n *\n * The experiments can be set in a few different ways:\n *  1. By gulp build rules using `--experiments=${experimentsString}` argument.\n *  2. By `#swg.experiments=${experimentsString}` parameter in the URL's\n *     fragment.\n *  3. By `swg.configure({experiments: [array]})` call.\n *\n * The `${experimentsString}` is defined as following:\n *  - experimentString = (experimentSpec,)*\n *  - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n *\n * Some examples:\n *  - `A,B` - defines two experiments \"A\" and \"B\" that will be turned on.\n *  - `A:100,B:100` - the same: \"A\" and \"B\" will be turned on.\n *  - `A:0` - the experiment \"A\" will be disabled.\n *  - `A:1` - enable the experiment \"A\" in 1% of impressions.\n *  - `A:10c` - enable the experiment \"A\" in 10% of impressions with 10%\n *    control. In this case, 20% of the impressions will be split into two\n *    categories: experiment and control. Notice, a control can be requested\n *    only for the fraction under 20%.\n */\n\n/**\n * @enum {string}\n */\nconst Selection = {\n  EXPERIMENT: 'e',\n  CONTROL: 'c',\n};\n\n/**\n * A comma-separated set of experiments.\n * @type {string}\n */\nlet experimentsString = '$experiments$';\n\n/**\n * A parsed map of experiments.\n * @type {?Object<string, boolean>}\n */\nlet experimentMap = null;\n\n/**\n * @param {string} s\n * @package Visible for testing only.\n */\nexport function setExperimentsStringForTesting(s) {\n  experimentsString = s;\n  experimentMap = null;\n}\n\n/**\n * Ensures that the experiments have been initialized and returns them.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperiments(win) {\n  if (!experimentMap) {\n    experimentMap = {};\n    let combinedExperimentString = experimentsString;\n    try {\n      const query = parseQueryString(win.location.hash);\n      const experimentStringFromHash = query['swg.experiments'];\n      if (experimentStringFromHash) {\n        combinedExperimentString += ',' + experimentStringFromHash;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      ErrorUtils.throwAsync(e);\n    }\n\n    // Format:\n    // - experimentString = (experimentSpec,)*\n    combinedExperimentString.split(',').forEach((s) => {\n      s = s.trim();\n      if (!s) {\n        return;\n      }\n      try {\n        parseSetExperiment(win, experimentMap, s);\n      } catch (e) {\n        // Ignore: experiment parsing cannot block runtime.\n        ErrorUtils.throwAsync(e);\n      }\n    });\n  }\n  return experimentMap;\n}\n\n/**\n * @param {!Window} win\n * @param {?Object<string, boolean>} experimentMap\n * @param {string} spec\n */\nfunction parseSetExperiment(win, experimentMap, spec) {\n  // Format:\n  // - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n  let experimentId;\n  let fraction;\n  let control = false;\n  const eq = spec.indexOf(':');\n  if (eq == -1) {\n    experimentId = spec;\n    fraction = 100;\n    control = false;\n  } else {\n    experimentId = spec.substring(0, eq).trim();\n    spec = spec.substring(eq + 1);\n    if (spec.substring(spec.length - 1) == Selection.CONTROL) {\n      control = true;\n      spec = spec.substring(0, spec.length - 1);\n    }\n    fraction = parseInt(spec, 10);\n  }\n  if (isNaN(fraction)) {\n    throw new Error('invalid fraction');\n  }\n\n  // Calculate \"on\"/\"off\".\n  let on;\n  if (fraction > 99) {\n    // Explicitly \"on\".\n    on = true;\n  } else if (fraction < 1) {\n    // Explicitly \"off\".\n    on = false;\n  } else if (win.sessionStorage) {\n    // Fractional and possibly with the control.\n    // Note that:\n    // a. We can't do persistent experiments if storage is not available.\n    // b. We can't run control on more than 20%.\n    control = control && fraction <= 20;\n    try {\n      // Set fraction in the experiment to make it unlaunchable.\n      const storageKey =\n        'subscribe.google.com:e:' +\n        experimentId +\n        ':' +\n        fraction +\n        (control ? 'c' : '');\n      let selection = parseSelection(win.sessionStorage.getItem(storageKey));\n      if (!selection) {\n        // Is experiment/control range?\n        if (win.Math.random() * 100 <= fraction * (control ? 2 : 1)) {\n          const inExperiment = control ? win.Math.random() <= 0.5 : true;\n          selection = inExperiment ? Selection.EXPERIMENT : Selection.CONTROL;\n          win.sessionStorage.setItem(storageKey, selection);\n        }\n      }\n      on = !!selection;\n      if (selection == Selection.CONTROL) {\n        experimentId = 'c-' + experimentId;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      on = false;\n      ErrorUtils.throwAsync(e);\n    }\n  } else {\n    on = false;\n  }\n\n  experimentMap[experimentId] = on;\n}\n\n/**\n * @param {?string} s\n * @return {?Selection}\n */\nfunction parseSelection(s) {\n  // Do a simple if-then to inline the whole Selection enum.\n  return s == Selection.EXPERIMENT\n    ? Selection.EXPERIMENT\n    : s == Selection.CONTROL\n    ? Selection.CONTROL\n    : null;\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  return getExperiments(win)[experimentId] || false;\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean} on\n */\nexport function setExperiment(win, experimentId, on) {\n  getExperiments(win)[experimentId] = on;\n}\n\n/**\n * @return {!Array<string>}\n */\nexport function getOnExperiments(win) {\n  const experimentMap = getExperiments(win);\n  const experiments = [];\n  for (const experiment in experimentMap) {\n    if (experimentMap[experiment]) {\n      experiments.push(experiment);\n    }\n  }\n  return experiments;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Xhr} from '../utils/xhr';\nimport {serializeProtoMessageForUrl} from '../utils/url';\n\n/**\n * @interface\n */\nexport class Fetcher {\n  /**\n   * @param {string} unusedUrl\n   * @return {!Promise<!Object>}\n   */\n  fetchCredentialedJson(unusedUrl) {}\n\n  /**\n   * @param {string} unusedUrl\n   * @param {!../utils/xhr.FetchInitDef} unusedInit\n   * @return {!Promise<!../utils/xhr.FetchResponse>}\n   */\n  fetch(unusedUrl, unusedInit) {}\n\n  /**\n   * POST data to a URL endpoint, do not wait for a response.\n   * @param {!string} unusedUrl\n   * @param {!string|!Object} unusedData\n   */\n  sendBeacon(unusedUrl, unusedData) {}\n\n  /**\n   * POST data to a URL endpoint, get a Promise for a response\n   * @param {!string} unusedUrl\n   * @param {!string|!Object} unusedMessage\n   * @return {!Promise<!../utils/xhr.FetchResponse>}\n   */\n  sendPost(unusedUrl, unusedMessage) {}\n}\n\n/**\n * @implements {Fetcher}\n */\nexport class XhrFetcher {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Xhr} */\n    this.xhr_ = new Xhr(win);\n  }\n\n  /** @override */\n  fetchCredentialedJson(url) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      headers: {'Accept': 'text/plain, application/json'},\n      credentials: 'include',\n    });\n    return this.fetch(url, init).then((response) => response.json());\n  }\n\n  sendPost(url, message) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n      },\n      credentials: 'include',\n      body: 'f.req=' + serializeProtoMessageForUrl(message),\n    });\n    return this.fetch(url, init).then(\n      (response) => (response && response.json()) || {}\n    );\n  }\n\n  /** @override */\n  fetch(url, init) {\n    return this.xhr_.fetch(url, init);\n  }\n\n  /** @override */\n  sendBeacon(url, data) {\n    if (navigator.sendBeacon) {\n      const headers = {type: 'application/x-www-form-urlencoded;charset=UTF-8'};\n      const blob = new Blob(\n        ['f.req=' + serializeProtoMessageForUrl(data)],\n        headers\n      );\n      navigator.sendBeacon(url, blob);\n      return;\n    }\n    // Only newer browsers support beacon.  Fallback to standard XHR POST.\n    this.sendPost(url, data);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class JsError {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise} */\n    this.microTask_ = Promise.resolve();\n  }\n\n  /**\n   * @param {...*} var_args\n   * @return {!Promise}\n   */\n  error(var_args) {\n    const args = Array.prototype.slice.call(arguments, 0);\n    return this.microTask_.then(() => {\n      const error = createErrorVargs.apply(null, args);\n      if (error.reported) {\n        return;\n      }\n      const img = this.doc_.getWin().document.createElement('img');\n      img.src =\n        '$frontend$/_/SubscribewithgoogleClientUi/jserror' +\n        '?error=' +\n        encodeURIComponent(String(error)) +\n        '&script=' +\n        encodeURIComponent('$frontend$/swg/js/v1/swg.js') +\n        '&line=' +\n        (error.lineNumber || 1) +\n        '&trace=' +\n        encodeURIComponent(error.stack);\n      // Appending this image to DOM is not necessary.\n      error.reported = true;\n    });\n  }\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n */\nfunction createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error}\n */\nfunction duplicateErrorIfNecessary(error) {\n  const messageProperty = Object.getOwnPropertyDescriptor(error, 'message');\n  if (messageProperty && messageProperty.writable) {\n    return error;\n  }\n\n  const {message, stack} = error;\n  const e = new Error(message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = stack;\n  return e;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AnalyticsEvent,\n  LinkSaveTokenRequest,\n  LinkingInfoResponse,\n} from '../proto/api_messages';\nimport {SubscriptionFlows, WindowOpenMode} from '../api/subscriptions';\nimport {acceptPortResultData} from '../utils/activity-utils';\nimport {createCancelError, isCancelError} from '../utils/errors';\nimport {feArgs, feOrigin, feUrl} from './services';\n\nconst LINK_REQUEST_ID = 'swg-link';\n\n/**\n * The flow to link an existing publisher account to an existing google account.\n */\nexport class LinkbackFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @param {{ampReaderId: (string|undefined)}=} params\n   * @return {!Promise}\n   */\n  start(params = {}) {\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n    const forceRedirect =\n      this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT;\n    const args = params.ampReaderId\n      ? feArgs({\n          'publicationId': this.pageConfig_.getPublicationId(),\n          'ampReaderId': params.ampReaderId,\n        })\n      : feArgs({\n          'publicationId': this.pageConfig_.getPublicationId(),\n        });\n    const opener = this.activityPorts_.open(\n      LINK_REQUEST_ID,\n      feUrl('/linkbackstart'),\n      forceRedirect ? '_top' : '_blank',\n      args,\n      {}\n    );\n    this.deps_.eventManager().logSwgEvent(AnalyticsEvent.IMPRESSION_LINK);\n    this.dialogManager_.popupOpened(opener && opener.targetWin);\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for Link accounts flow.\n */\nexport class LinkCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /**\n     * Handler function.\n     * @param {!../components/activities.ActivityPortDef} port\n     */\n    function handler(port) {\n      deps.entitlementsManager().blockNextNotification();\n      deps.callbacks().triggerLinkProgress();\n      deps.dialogManager().popupClosed();\n      const promise = acceptPortResultData(\n        port,\n        feOrigin(),\n        /* requireOriginVerified */ false,\n        /* requireSecureChannel */ false\n      );\n      return promise.then(\n        (response) => {\n          deps\n            .eventManager()\n            .logSwgEvent(AnalyticsEvent.ACTION_LINK_CONTINUE, true);\n          const flow = new LinkCompleteFlow(deps, response);\n          flow.start();\n        },\n        (reason) => {\n          if (isCancelError(reason)) {\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_LINK_CANCEL, true);\n            deps\n              .callbacks()\n              .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          } else {\n            // The user chose to continue but there was an error.\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_LINK_CONTINUE, true);\n          }\n        }\n      );\n    }\n    deps.activities().onResult(LINK_REQUEST_ID, handler);\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Object} response\n   */\n  constructor(deps, response) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!./entitlements-manager.EntitlementsManager} */\n    this.entitlementsManager_ = deps.entitlementsManager();\n\n    /** @private @const {!./callbacks.Callbacks} */\n    this.callbacks_ = deps.callbacks();\n\n    const index = (response && response['index']) || '0';\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linkconfirmiframe', '/u/' + index),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    /** @private {?function()} */\n    this.completeResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.completePromise_ = new Promise((resolve) => {\n      this.completeResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    const promise = this.activityIframeView_.acceptResultAndVerify(\n      feOrigin(),\n      /* requireOriginVerified */ true,\n      /* requireSecureChannel */ true\n    );\n    promise\n      .then((response) => {\n        this.complete_(response);\n      })\n      .catch((reason) => {\n        // Rethrow async.\n        setTimeout(() => {\n          throw reason;\n        });\n      })\n      .then(() => {\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      });\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.EVENT_GOOGLE_UPDATED, true);\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.IMPRESSION_GOOGLE_UPDATED, true);\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {?Object} response\n   * @private\n   */\n  complete_(response) {\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.ACTION_GOOGLE_UPDATED_CLOSE, true);\n    this.callbacks_.triggerLinkComplete();\n    this.callbacks_.resetLinkProgress();\n    this.entitlementsManager_.setToastShown(true);\n    this.entitlementsManager_.unblockNextNotification();\n    this.entitlementsManager_.reset((response && response['success']) || false);\n    if (response && response['entitlements']) {\n      this.entitlementsManager_.pushNextEntitlements(response['entitlements']);\n    }\n    this.completeResolver_();\n  }\n\n  /** @return {!Promise} */\n  whenComplete() {\n    return this.completePromise_;\n  }\n}\n\n/**\n * The flow to save subscription information from an existing publisher account\n * to an existing google account.  The accounts may or may not already be\n * linked.\n */\nexport class LinkSaveFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SaveSubscriptionRequestCallback} callback\n   */\n  constructor(deps, callback) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {!../api/subscriptions.SaveSubscriptionRequestCallback} */\n    this.callback_ = callback;\n\n    /** @private {?Promise<!../api/subscriptions.SaveSubscriptionRequest>} */\n    this.requestPromise_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n  }\n\n  /**\n   * @return {?Promise<!../api/subscriptions.SaveSubscriptionRequest>}\n   * @package Visible for testing.\n   */\n  getRequestPromise() {\n    return this.requestPromise_;\n  }\n\n  /**\n   * @private\n   */\n  complete_() {\n    this.dialogManager_.completeView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {!Object} result\n   * @return {!Promise<boolean>}\n   * @private\n   */\n  handleLinkSaveResponse_(result) {\n    // This flow is complete\n    this.complete_();\n    let startPromise;\n    let linkConfirm = null;\n    if (result['linked']) {\n      // When linking succeeds, start link confirmation flow\n      this.dialogManager_.popupClosed();\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n      linkConfirm = new LinkCompleteFlow(this.deps_, result);\n      startPromise = linkConfirm.start();\n    } else {\n      startPromise = Promise.reject(createCancelError(this.win_, 'not linked'));\n    }\n    const completePromise = startPromise.then(() => {\n      this.deps_.callbacks().triggerLinkProgress();\n      return linkConfirm.whenComplete();\n    });\n\n    return completePromise.then(() => {\n      return true;\n    });\n  }\n\n  /**\n   * @param {LinkingInfoResponse} response\n   * @private\n   */\n  sendLinkSaveToken_(response) {\n    if (!response || !response.getRequested()) {\n      return;\n    }\n    this.requestPromise_ = new Promise((resolve) => {\n      resolve(this.callback_());\n    })\n      .then((request) => {\n        const saveRequest = new LinkSaveTokenRequest();\n        if (request && request.token) {\n          if (request.authCode) {\n            throw new Error('Both authCode and token are available');\n          } else {\n            saveRequest.setToken(request.token);\n          }\n        } else if (request && request.authCode) {\n          saveRequest.setAuthCode(request.authCode);\n        } else {\n          throw new Error('Neither token or authCode is available');\n        }\n        this.activityIframeView_.execute(saveRequest);\n      })\n      .catch((reason) => {\n        // The flow is complete.\n        this.complete_();\n        throw reason;\n      });\n  }\n\n  /**\n   * @return {?Promise}\n   */\n  /**\n   * Starts the save subscription\n   * @return {!Promise}\n   */\n  start() {\n    const iframeArgs = this.activityPorts_.addDefaultArguments({\n      'isClosable': true,\n    });\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linksaveiframe'),\n      iframeArgs,\n      /* shouldFadeBody */ false,\n      /* hasLoadingIndicator */ true\n    );\n    this.activityIframeView_.on(\n      LinkingInfoResponse,\n      this.sendLinkSaveToken_.bind(this)\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_,\n      /* hidden */ true\n    );\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.IMPRESSION_SAVE_SUBSCR_TO_GOOGLE);\n    /** {!Promise<boolean>} */\n    return this.activityIframeView_\n      .acceptResultAndVerify(\n        feOrigin(),\n        /* requireOriginVerified */ true,\n        /* requireSecureChannel */ true\n      )\n      .then((result) => {\n        return this.handleLinkSaveResponse_(result);\n      })\n      .catch((reason) => {\n        // In case this flow wasn't complete, complete it here\n        this.complete_();\n        // Handle cancellation from user, link confirm start or completion here\n        if (isCancelError(reason)) {\n          this.deps_\n            .eventManager()\n            .logSwgEvent(\n              AnalyticsEvent.ACTION_SAVE_SUBSCR_TO_GOOGLE_CANCEL,\n              true\n            );\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          return false;\n        }\n        throw reason;\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {isBoolean, isEnumValue, isObject} from '../utils/types';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\n\n/**\n * @implements {../api/logger-api.LoggerApi}\n */\nexport class Logger {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!isEnumValue(SubscriptionState, state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.eventManager_.logEvent({\n      eventType: AnalyticsEvent.EVENT_SUBSCRIPTION_STATE,\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: null,\n      additionalParameters: {\n        state,\n        productsOrSkus,\n      },\n    });\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    let data = null;\n    if (\n      !isEnumValue(Event, userEvent.name) ||\n      !publisherEventToAnalyticsEvent(userEvent.name)\n    ) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = Object.assign({}, data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n    this.eventManager_.logEvent({\n      eventType: publisherEventToAnalyticsEvent(userEvent.name),\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\nexport class LoginNotificationApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // No need to ask the user. Just tell them you're logging them in.\n        userConsent: false,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Continues the Login flow (after waiting).\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_NOTIFICATION);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      (reason) => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\n\nexport class LoginPromptApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // First ask the user if they want us to log them in.\n        userConsent: true,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Prompts the user to login.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      (reason) => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2020 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\nexport class MeterRegwallApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {{ gsiUrl: string, alreadyRegisteredUrl: string}} params\n   */\n  constructor(deps, params) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/meterregwalliframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        gsiUrl: params.gsiUrl,\n        alreadyRegisteredUrl: params.alreadyRegisteredUrl,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Prompts the user to register to the meter.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_METER_REGWALL);\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2020 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {\n  ToastCloseRequest,\n  ViewSubscriptionsResponse,\n} from '../proto/api_messages';\nimport {feArgs, feUrl} from './services';\nimport {setImportantStyles, setStyle} from '../utils/style';\n\nconst IFRAME_BOX_SHADOW =\n  'rgba(60, 64, 67, .3) 0 -2px 5px, rgba(60, 64, 67, .15) 0 -5px 5px';\n\nexport class MeterToastApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/metertoastiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        hasSubscriptionCallback: deps.callbacks().hasSubscribeRequestCallback(),\n      }),\n      /* shouldFadeBody */ false\n    );\n\n    /** @private @const {!function()} */\n    this.sendCloseRequestFunction_ = () => {\n      const closeRequest = new ToastCloseRequest();\n      closeRequest.setClose(true);\n      this.activityIframeView_.execute(closeRequest);\n    };\n  }\n\n  /**\n   * Shows the user the metering toast.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_METER_TOAST);\n    this.activityIframeView_.on(\n      ViewSubscriptionsResponse,\n      this.startNativeFlow_.bind(this)\n    );\n    return this.dialogManager_.openView(this.activityIframeView_).then(() => {\n      this.setDialogBoxShadow_();\n      // Allow closing of the iframe with any scroll or click event.\n      this.win_.addEventListener('click', this.sendCloseRequestFunction_);\n      this.win_.addEventListener('touchstart', this.sendCloseRequestFunction_);\n      this.win_.addEventListener('mousedown', this.sendCloseRequestFunction_);\n      this.win_.addEventListener('wheel', this.sendCloseRequestFunction_);\n      // Making body's overflow property 'hidden' to prevent scrolling\n      // while swiping on the iframe.\n      const $body = this.win_.document.body;\n      setStyle($body, 'overflow', 'hidden');\n    });\n  }\n\n  /**\n   * Sets a callback function to happen onCancel.\n   * @param {function()} onCancelCallback\n   */\n  setOnCancelCallback(onCancelCallback) {\n    this.activityIframeView_.onCancel(onCancelCallback);\n  }\n\n  /**\n   * Removes the event listeners that close the iframe and make the body visible.\n   */\n  removeCloseEventListener() {\n    this.win_.removeEventListener('click', this.sendCloseRequestFunction_);\n    this.win_.removeEventListener('touchstart', this.sendCloseRequestFunction_);\n    this.win_.removeEventListener('mousedown', this.sendCloseRequestFunction_);\n    this.win_.removeEventListener('wheel', this.sendCloseRequestFunction_);\n    const $body = this.win_.document.body;\n    setStyle($body, 'overflow', 'visible');\n  }\n\n  /**\n   * Changes the iframe box shadow to match desired specifications on mobile.\n   */\n  setDialogBoxShadow_() {\n    const mq = this.win_.matchMedia('(max-width: 640px), (max-height: 640px)');\n    const element = this.dialogManager_.getDialog().getElement();\n    if (mq.matches) {\n      setImportantStyles(element, {'box-shadow': IFRAME_BOX_SHADOW});\n    }\n    mq.addListener((changed) => {\n      if (changed.matches) {\n        setImportantStyles(element, {'box-shadow': IFRAME_BOX_SHADOW});\n      } else {\n        setImportantStyles(element, {'box-shadow': ''});\n      }\n    });\n  }\n\n  /**\n   * @param {ViewSubscriptionsResponse} response\n   * @private\n   */\n  startNativeFlow_(response) {\n    if (response.getNative()) {\n      this.deps_.callbacks().triggerSubscribeRequest();\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {serviceUrl} from './services';\n\nexport class OffersApi {\n  /**\n   * @param {!../model/page-config.PageConfig} config\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(config, fetcher) {\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.config_ = config;\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n  }\n\n  /**\n   * @param {?string=} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   */\n  getOffers(productId = this.config_.getProductId()) {\n    if (!productId) {\n      throw new Error('getOffers requires productId in config or arguments');\n    }\n    return this.fetch_(productId);\n  }\n\n  /**\n   * @param {string} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   * @private\n   */\n  fetch_(productId) {\n    const url = serviceUrl(\n      '/publication/' +\n        encodeURIComponent(this.config_.getPublicationId()) +\n        '/offers' +\n        '?label=' +\n        encodeURIComponent(productId)\n    );\n    // TODO(dvoytenko): switch to a non-credentialed request after launch.\n    return this.fetcher_.fetchCredentialedJson(url).then((json) => {\n      return json['offers'] || [];\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AlreadySubscribedResponse,\n  SkuSelectedResponse,\n  SubscribeResponse,\n  ViewSubscriptionsResponse,\n} from '../proto/api_messages';\nimport {AnalyticsEvent, EventParams} from '../proto/api_messages';\nimport {PayStartFlow} from './pay-flow';\nimport {ProductType, SubscriptionFlows} from '../api/subscriptions';\nimport {assert} from '../utils/log';\nimport {feArgs, feUrl} from './services';\n\n/**\n * @param {string} sku\n * @return {!EventParams}\n */\nfunction getEventParams(sku) {\n  return new EventParams([, , , , sku]);\n}\n\n/**\n * Offers view is closable when request was originated from 'AbbrvOfferFlow'\n * or from 'SubscribeOptionFlow'.\n */\nconst OFFERS_VIEW_CLOSABLE = true;\n\n// The value logged when the offers screen shows all available SKUs.\nconst ALL_SKUS = '*';\n\n/**\n * The class for Offers flow.\n */\nexport class OffersFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    let isClosable = options && options.isClosable;\n    if (isClosable == undefined) {\n      isClosable = false; // Default is to hide Close button.\n    }\n\n    const feArgsObj = deps.activities().addDefaultArguments({\n      'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n      'productType': ProductType.SUBSCRIPTION,\n      'list': (options && options.list) || 'default',\n      'skus': (options && options.skus) || null,\n      'isClosable': isClosable,\n    });\n\n    if (options && options.oldSku) {\n      feArgsObj['oldSku'] = options.oldSku;\n      assert(feArgsObj['skus'], 'Need a sku list if old sku is provided!');\n\n      // Remove old sku from offers if in list.\n      let skuList = feArgsObj['skus'];\n      const /** @type {string} */ oldSku = feArgsObj['oldSku'];\n      skuList = skuList.filter((sku) => sku !== oldSku);\n\n      assert(\n        skuList.length > 0,\n        'Sku list only contained offer user already has'\n      );\n      feArgsObj['skus'] = skuList;\n    }\n\n    // Redirect to payments if only one upgrade option is passed.\n    if (feArgsObj['skus'] && feArgsObj['skus'].length === 1) {\n      const sku = feArgsObj['skus'][0];\n      const /** @type {string|undefined} */ oldSku = feArgsObj['oldSku'];\n      // Update subscription triggers experimental flag if oldSku is passed,\n      // so we need to check for oldSku to decide if it needs to be sent.\n      // Otherwise we might accidentally block a regular subscription request.\n      if (oldSku) {\n        const skuSelectedResponse = new SkuSelectedResponse();\n        skuSelectedResponse.setSku(sku);\n        skuSelectedResponse.setOldSku(oldSku);\n        this.startPayFlow_(skuSelectedResponse);\n        return;\n      }\n    }\n\n    /** @private  @const {!Array<!string>} */\n    this.skus_ = feArgsObj['skus'] || [ALL_SKUS];\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/offersiframe'),\n      feArgsObj,\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   * @private\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    if (sku) {\n      const /** @type {../api/subscriptions.SubscriptionRequest} */ subscriptionRequest = {\n          'skuId': sku,\n        };\n      const oldSku = response.getOldSku();\n      if (oldSku) {\n        subscriptionRequest['oldSku'] = oldSku;\n        this.deps_.analytics().setSku(oldSku);\n      }\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_OFFER_SELECTED,\n        true,\n        getEventParams(sku)\n      );\n      new PayStartFlow(this.deps_, subscriptionRequest).start();\n    }\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {ViewSubscriptionsResponse} response\n   * @private\n   */\n  startNativeFlow_(response) {\n    if (response.getNative()) {\n      this.deps_.callbacks().triggerSubscribeRequest();\n    }\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    if (this.activityIframeView_) {\n      // So no error if skipped to payment screen.\n      // Start/cancel events.\n      // The second parameter is required by Propensity in AMP.\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.SHOW_OFFERS, {\n        skus: this.skus_,\n        source: 'SwG',\n      });\n      this.activityIframeView_.onCancel(() => {\n        this.deps_\n          .callbacks()\n          .triggerFlowCanceled(SubscriptionFlows.SHOW_OFFERS);\n      });\n      this.activityIframeView_.on(\n        SkuSelectedResponse,\n        this.startPayFlow_.bind(this)\n      );\n      this.activityIframeView_.on(\n        AlreadySubscribedResponse,\n        this.handleLinkRequest_.bind(this)\n      );\n      this.activityIframeView_.on(\n        ViewSubscriptionsResponse,\n        this.startNativeFlow_.bind(this)\n      );\n\n      return this.dialogManager_.openView(this.activityIframeView_);\n    }\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for subscribe option flow.\n */\nexport class SubscribeOptionFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      deps.win(),\n      this.activityPorts_,\n      feUrl('/optionsiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    });\n    this.activityIframeView_.on(\n      SubscribeResponse,\n      this.maybeOpenOffersFlow_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(\n      (result) => {\n        const data = result.data;\n        const response = new SubscribeResponse();\n        if (data['subscribe']) {\n          response.setSubscribe(true);\n        }\n        this.maybeOpenOffersFlow_(response);\n      },\n      (reason) => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS\n    );\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {SubscribeResponse} response\n   * @private\n   */\n  maybeOpenOffersFlow_(response) {\n    if (response.getSubscribe()) {\n      const options = this.options_ || {};\n      if (options.isClosable == undefined) {\n        options.isClosable = OFFERS_VIEW_CLOSABLE;\n      }\n      this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n      new OffersFlow(this.deps_, options).start();\n    }\n  }\n}\n\n/**\n * The class for Abbreviated Offer flow.\n *\n */\nexport class AbbrvOfferFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest=} options\n   */\n  constructor(deps, options = {}) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/abbrvofferiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * Starts the offers flow\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    });\n\n    // If the user is already subscribed, trigger login flow\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n\n    // If result is due to requesting offers, redirect to offers flow\n    this.activityIframeView_.acceptResult().then((result) => {\n      if (result.data['viewOffers']) {\n        const options = this.options_ || {};\n        if (options.isClosable == undefined) {\n          options.isClosable = OFFERS_VIEW_CLOSABLE;\n        }\n        this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n        new OffersFlow(this.deps_, options).start();\n        return;\n      }\n      if (result.data['native']) {\n        this.deps_.callbacks().triggerSubscribeRequest();\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return;\n      }\n    });\n\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PaymentsAsyncClient} from '../../third_party/gpay/src/payjs_async';\nimport {Preconnect} from '../utils/preconnect';\nimport {bytesToString, stringToBytes} from '../utils/bytes';\nimport {createCancelError} from '../utils/errors';\nimport {feCached} from './services';\n\nconst REDIRECT_STORAGE_KEY = 'subscribe.google.com:rk';\n\n/**\n * @typedef {{\n *   forceRedirect: (boolean|undefined),\n * }}\n */\nexport let PayOptionsDef;\n\n/**\n * @const {!Object<string, string>}\n * @package Visible for testing only.\n */\nexport const PAY_ORIGIN = {\n  'PRODUCTION': 'https://pay.google.com',\n  'SANDBOX': 'https://pay.sandbox.google.com',\n};\n\n/** @return {string} */\nfunction payUrl() {\n  return feCached(PAY_ORIGIN['$payEnvironment$'] + '/gp/p/ui/pay');\n}\n\n/**\n */\nexport class PayClient {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.responseCallback_ = null;\n\n    /** @private {?PaymentDataRequest} */\n    this.request_ = null;\n\n    /** @private {?Promise<!PaymentData>} */\n    this.response_ = null;\n\n    /** @private @const {!./analytics-service.AnalyticsService} */\n    this.analytics_ = deps.analytics();\n\n    /** @private @const {!RedirectVerifierHelper} */\n    this.redirectVerifierHelper_ = new RedirectVerifierHelper(this.win_);\n\n    /** @private {?PaymentsAsyncClient} */\n    this.client_ = null;\n\n    /** @private @const {!Preconnect} */\n    this.preconnect_ = new Preconnect(this.win_.document);\n\n    // Prepare new verifier pair.\n    this.redirectVerifierHelper_.prepare();\n\n    /** @private @const {!./client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /**\n   * @param {!PaymentOptions} options\n   * @param {string} googleTransactionId\n   * @param {function(!Promise<!PaymentData>)} handler\n   * @return {!PaymentsAsyncClient}\n   * @private\n   */\n  createClient_(options, googleTransactionId, handler) {\n    // Assign Google Transaction ID to PaymentsAsyncClient.googleTransactionId_\n    // so it can be passed to gpay_async.js and stored in payment clearcut log.\n    PaymentsAsyncClient.googleTransactionId_ = googleTransactionId;\n    return new PaymentsAsyncClient(\n      options,\n      handler,\n      /* useIframe */ false,\n      this.activityPorts_.getOriginalWebActivityPorts()\n    );\n  }\n\n  /**\n   * @param {!../utils/preconnect.Preconnect} pre\n   */\n  preconnect(pre) {\n    pre.prefetch(payUrl());\n    pre.prefetch(\n      'https://payments.google.com/payments/v4/js/integrator.js?ss=md'\n    );\n    pre.prefetch('https://clients2.google.com/gr/gr_full_2.0.6.js');\n  }\n\n  /**\n   * @return {string}\n   */\n  getType() {\n    // TODO(alin04): remove once all references removed.\n    return 'PAYJS';\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentRequest\n   * @param {!PayOptionsDef=} options\n   */\n  start(paymentRequest, options = {}) {\n    this.request_ = paymentRequest;\n\n    if (!this.client_) {\n      this.preconnect(this.preconnect_);\n      this.client_ = this.createClient_(\n        /** @type {!PaymentOptions} */\n        ({\n          environment: '$payEnvironment$',\n          'i': {\n            'redirectKey': this.redirectVerifierHelper_.restoreKey(),\n          },\n        }),\n        this.analytics_.getTransactionId(),\n        this.handleResponse_.bind(this)\n      );\n    }\n    if (options.forceRedirect) {\n      paymentRequest = Object.assign(paymentRequest, {\n        'forceRedirect': options.forceRedirect || false,\n      });\n    }\n    setInternalParam(\n      paymentRequest,\n      'disableNative',\n      // The page cannot be iframed at this time. May be relaxed later\n      // for AMP and similar contexts.\n      this.win_ != this.top_()\n    );\n    let resolver = null;\n    const promise = new Promise((resolve) => (resolver = resolve));\n    // Notice that the callback for verifier may execute asynchronously.\n    this.redirectVerifierHelper_.useVerifier((verifier) => {\n      if (verifier) {\n        setInternalParam(paymentRequest, 'redirectVerifier', verifier);\n      }\n      if (options.forceRedirect) {\n        const client = this.client_;\n        this.eventManager_.getReadyPromise().then(() => {\n          this.analytics_.getLoggingPromise().then(() => {\n            client.loadPaymentData(paymentRequest);\n            resolver(true);\n          });\n        });\n      } else {\n        this.client_.loadPaymentData(paymentRequest);\n        resolver(true);\n      }\n    });\n    return promise;\n  }\n\n  /**\n   * @param {function(!Promise<!PaymentData>)} callback\n   */\n  onResponse(callback) {\n    this.responseCallback_ = callback;\n    const response = this.response_;\n    if (response) {\n      Promise.resolve().then(() => {\n        if (response) {\n          callback(this.convertResponse_(response, this.request_));\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {!Promise<!PaymentData>} responsePromise\n   * @private\n   */\n  handleResponse_(responsePromise) {\n    this.response_ = responsePromise;\n    if (this.responseCallback_) {\n      this.responseCallback_(\n        this.convertResponse_(this.response_, this.request_)\n      );\n    }\n  }\n\n  /**\n   * @param {!Promise<!PaymentData>} response\n   * @param {?PaymentDataRequest} request\n   * @return {!Promise<!PaymentData>}\n   * @private\n   */\n  convertResponse_(response, request) {\n    return response\n      .then(\n        // Temporary client side solution to remember the\n        // input params. TODO: Remove this once server-side\n        // input preservation is done and is part of the response.\n        (res) => {\n          if (request) {\n            res['paymentRequest'] = request;\n          }\n          return res;\n        }\n      )\n      .catch((reason) => {\n        if (typeof reason == 'object' && reason['statusCode'] == 'CANCELED') {\n          const error = createCancelError(this.win_);\n          if (request) {\n            error['productType'] = /** @type {!PaymentDataRequest} */ (request)[\n              'i'\n            ]['productType'];\n          } else {\n            error['productType'] = null;\n          }\n          return Promise.reject(error);\n        }\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * @return {!Window}\n   * @private\n   */\n  top_() {\n    // Only exists for testing since it's not possible to override `window.top`.\n    return this.win_.top;\n  }\n}\n\n/**\n * @typedef {{\n *   key: string,\n *   verifier: string,\n * }}\n */\nlet RedirectVerifierPairDef;\n\n/**\n * This helper generates key/verifier pair for the redirect mode. When the\n * redirect mode is used, the encrypted payload is returned via nivigation URL.\n * This payload need to be decrypted and to avoid session fixation attacks, a\n * verifier has to be used. This redirect verifier is not the only session\n * verifier in use: we also use GAIA. However, we have to fallback to this\n * verifier when GAIA is not available.\n *\n * @package Visible for testing only.\n */\nexport class RedirectVerifierHelper {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private {boolean} */\n    this.pairCreated_ = false;\n\n    /** @private {?RedirectVerifierPairDef} */\n    this.pair_ = null;\n\n    /** @private {?Promise<?RedirectVerifierPairDef>} */\n    this.pairPromise_ = null;\n  }\n\n  /**\n   * To avoid popup blockers, the key/verifier pair is created as soon as\n   * possible.\n   * @return {?Promise}\n   */\n  prepare() {\n    return this.getOrCreatePair_(() => {});\n  }\n\n  /**\n   * Calls the provided callback with the generated redirect verifier. This\n   * API is sync/async, which is a big anti-pattern. However, it's necessary\n   * to reduce the risk of popup blockers. If the verifier is already available\n   * (see `prepare` method), the callback will be called immediately and thus\n   * in the same event loop as the user action.\n   *\n   * The return verifier could be `null`. This could mean either that its\n   * generation failed, or if the platform doesn't support necessary APIs, such\n   * as Web Crypto. The redirect can still proceed and try to fallback on GAIA\n   * as a redirect verifier. The set of platforms where GAIA is not available\n   * and the redirect verifier cannot be created is negligible.\n   *\n   * The key corresponding to the returned verifier is stored in the session\n   * storage and can be later restored using `restoreKey` method.\n   *\n   * @param {function(?string)} callback\n   */\n  useVerifier(callback) {\n    this.getOrCreatePair_((pair) => {\n      if (pair) {\n        try {\n          this.win_.localStorage.setItem(REDIRECT_STORAGE_KEY, pair.key);\n        } catch (e) {\n          // If storage has failed, there's no point in using the verifer.\n          // However, there are other ways to recover the redirect, so it's\n          // not necessarily a fatal condition.\n          pair = null;\n        }\n      }\n      callback((pair && pair.verifier) || null);\n    });\n  }\n\n  /**\n   * Restores the redirect key from the session storage. The key may be null.\n   * @return {?string}\n   */\n  restoreKey() {\n    try {\n      return (\n        (this.win_.localStorage &&\n          this.win_.localStorage.getItem(REDIRECT_STORAGE_KEY)) ||\n        null\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @param {function(?RedirectVerifierPairDef)} callback\n   * @return {?Promise}\n   * @private\n   */\n  getOrCreatePair_(callback) {\n    this.createPair_();\n    if (this.pairCreated_) {\n      // Already created.\n      callback(this.pair_);\n    } else if (this.pairPromise_) {\n      // Otherwise wait for it to be created.\n      this.pairPromise_.then((pair) => callback(pair));\n    }\n    return this.pairPromise_;\n  }\n\n  /**\n   * @private\n   */\n  createPair_() {\n    // Either already created or already started.\n    if (this.pairCreated_ || this.pairPromise_) {\n      return;\n    }\n\n    // Check that the platform can fully support verification. That means\n    // that it's expected to implement the following APIs:\n    // a. Local storage (localStorage);\n    // b. WebCrypto (crypto.subtle);\n    // c. Crypto random (crypto.getRandomValues);\n    // d. SHA284 (crypto.subtle.digest).\n    let supportsLocalStorage;\n    try {\n      supportsLocalStorage = !!this.win_.localStorage;\n    } catch (e) {\n      // Note: This can happen when cookies are disabled.\n      supportsLocalStorage = false;\n    }\n    const crypto = this.win_.crypto;\n    if (\n      supportsLocalStorage &&\n      crypto &&\n      crypto.getRandomValues &&\n      crypto.subtle &&\n      crypto.subtle.digest\n    ) {\n      this.pairPromise_ = new Promise((resolve, reject) => {\n        // 1. Use crypto random to create a 128-bit (16 byte) redirect key.\n        const keyBytes = new Uint8Array(16);\n        crypto.getRandomValues(keyBytes);\n\n        // 2. Encode key as base64.\n        const key = btoa(bytesToString(keyBytes));\n\n        // 3. Create a hash.\n        crypto.subtle.digest({name: 'SHA-384'}, stringToBytes(key)).then(\n          (buffer) => {\n            const verifier = btoa(\n              bytesToString(\n                new Uint8Array(/** @type {!ArrayBuffer} */ (buffer))\n              )\n            );\n            resolve({key, verifier});\n          },\n          (reason) => {\n            reject(reason);\n          }\n        );\n      })\n        .catch(() => {\n          // Ignore failures. A failure to create a redirect verifier is often\n          // recoverable.\n          return null;\n        })\n        .then((pair) => {\n          this.pairCreated_ = true;\n          this.pair_ = pair;\n          return pair;\n        });\n    } else {\n      // Not supported.\n      this.pairCreated_ = true;\n      this.pair_ = null;\n    }\n  }\n}\n\n/**\n * @param {!PaymentDataRequest} paymentRequest\n * @param {string} param\n * @param {*} value\n */\nfunction setInternalParam(paymentRequest, param, value) {\n  paymentRequest['i'] = Object.assign(paymentRequest['i'] || {}, {\n    [param]: value,\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The Flow goes like this:\n * a. Start Payments\n * b. Complete Payments\n * c. Create Account\n * d. Acknowledge Account\n *\n * In other words, Flow = Payments + Account Creation.\n */\n\nimport {\n  AccountCreationRequest,\n  EntitlementsResponse,\n} from '../proto/api_messages';\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {AnalyticsEvent, EventParams} from '../proto/api_messages';\nimport {JwtHelper} from '../utils/jwt';\nimport {\n  ProductType,\n  SubscriptionFlows,\n  WindowOpenMode,\n} from '../api/subscriptions';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {getPropertyFromJsonString, parseJson} from '../utils/json';\nimport {isCancelError} from '../utils/errors';\n\n/**\n * String values input by the publisher are mapped to the number values.\n * @type {!Object<string, number>}\n */\nexport const ReplaceSkuProrationModeMapping = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  'IMMEDIATE_WITH_TIME_PRORATION': 1,\n};\n\nexport const RecurrenceMapping = {\n  'AUTO': 1,\n  'ONE_TIME': 2,\n};\n\n/**\n * @param {string} sku\n * @return {!EventParams}\n */\nfunction getEventParams(sku) {\n  return new EventParams([, , , , sku]);\n}\n\n/**\n * The flow to initiate payment process.\n */\nexport class PayStartFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SubscriptionRequest} subscriptionRequest\n   * @param {!../api/subscriptions.ProductType} productType\n   */\n  constructor(\n    deps,\n    subscriptionRequest,\n    productType = ProductType.SUBSCRIPTION\n  ) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!./pay-client.PayClient} */\n    this.payClient_ = deps.payClient();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../api/subscriptions.SubscriptionRequest} */\n    this.subscriptionRequest_ = subscriptionRequest;\n\n    /**@private @const {!ProductType} */\n    this.productType_ = productType;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /**\n   * Starts the payments flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Add the 'publicationId' key to the subscriptionRequest_ object.\n    const swgPaymentRequest = Object.assign({}, this.subscriptionRequest_, {\n      'publicationId': this.pageConfig_.getPublicationId(),\n    });\n\n    // Map the proration mode to the enum value (if proration exists).\n    const prorationMode = swgPaymentRequest['replaceSkuProrationMode'];\n    if (prorationMode) {\n      swgPaymentRequest['replaceSkuProrationMode'] =\n        ReplaceSkuProrationModeMapping[prorationMode];\n    } else if (swgPaymentRequest['oldSku']) {\n      swgPaymentRequest['replaceSkuProrationMode'] =\n        ReplaceSkuProrationModeMapping['IMMEDIATE_WITH_TIME_PRORATION'];\n    }\n    // Assign one-time recurrence enum if applicable\n    if (swgPaymentRequest['oneTime']) {\n      swgPaymentRequest['paymentRecurrence'] = RecurrenceMapping['ONE_TIME'];\n      delete swgPaymentRequest['oneTime'];\n    }\n\n    // Start/cancel events.\n    const flow =\n      this.productType_ == ProductType.UI_CONTRIBUTION\n        ? SubscriptionFlows.CONTRIBUTE\n        : SubscriptionFlows.SUBSCRIBE;\n\n    this.deps_.callbacks().triggerFlowStarted(flow, this.subscriptionRequest_);\n    if (swgPaymentRequest['oldSku']) {\n      this.analyticsService_.setSku(swgPaymentRequest['oldSku']);\n    }\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n      true,\n      getEventParams(swgPaymentRequest['skuId'])\n    );\n    PayCompleteFlow.waitingForPayClient_ = true;\n    this.payClient_.start(\n      /** @type {!PaymentDataRequest} */\n      ({\n        'apiVersion': 1,\n        'allowedPaymentMethods': ['CARD'],\n        'environment': '$payEnvironment$',\n        'playEnvironment': '$playEnvironment$',\n        'swg': swgPaymentRequest,\n        'i': {\n          'startTimeMs': Date.now(),\n          'productType': this.productType_,\n        },\n      }),\n      {\n        forceRedirect:\n          this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT,\n      }\n    );\n    return Promise.resolve();\n  }\n}\n\n/**\n * The flow for successful payments completion.\n */\nexport class PayCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /** @const @type {./client-event-manager.ClientEventManager} */\n    const eventManager = deps.eventManager();\n\n    deps.payClient().onResponse((payPromise) => {\n      deps.entitlementsManager().blockNextNotification();\n      const flow = new PayCompleteFlow(deps);\n      const promise = validatePayResponse(\n        deps,\n        payPromise,\n        flow.complete.bind(flow)\n      );\n      deps.callbacks().triggerPaymentResponse(promise);\n      return promise.then(\n        (response) => {\n          const sku = parseSkuFromPurchaseDataSafe(response.purchaseData);\n          deps.analytics().setSku(sku || '');\n          eventManager.logSwgEvent(\n            AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n            true,\n            getEventParams(sku || '')\n          );\n          flow.start(response);\n        },\n        (reason) => {\n          if (isCancelError(reason)) {\n            const productType = /** @type {!Object} */ (reason)['productType'];\n            const flow =\n              productType == ProductType.UI_CONTRIBUTION\n                ? SubscriptionFlows.CONTRIBUTE\n                : SubscriptionFlows.SUBSCRIBE;\n            deps.callbacks().triggerFlowCanceled(flow);\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_USER_CANCELED_PAYFLOW, true);\n          } else {\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.EVENT_PAYMENT_FAILED, false);\n            deps.jserror().error('Pay failed', reason);\n            throw reason;\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?SubscribeResponse} */\n    this.response_ = null;\n\n    /** @private {?Promise} */\n    this.readyPromise_ = null;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private {?string} */\n    this.sku_ = null;\n  }\n\n  /**\n   * Starts the payments completion flow.\n   * @param {!SubscribeResponse} response\n   * @return {!Promise}\n   */\n  start(response) {\n    this.sku_ = parseSkuFromPurchaseDataSafe(response.purchaseData);\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_ACCOUNT_CHANGED,\n      true,\n      getEventParams(this.sku_ || '')\n    );\n    this.deps_.entitlementsManager().reset(true);\n    this.response_ = response;\n    // TODO(dianajing): future-proof isOneTime flag\n    const args = {\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'productType': this.response_['productType'],\n      'isSubscriptionUpdate': !!this.response_['oldSku'],\n      'isOneTime': !!this.response_['paymentRecurrence'],\n    };\n    // TODO(dvoytenko, #400): cleanup once entitlements is launched everywhere.\n    if (response.userData && response.entitlements) {\n      args['idToken'] = response.userData.idToken;\n      this.deps_\n        .entitlementsManager()\n        .pushNextEntitlements(response.entitlements.raw);\n    } else {\n      args['loginHint'] = response.userData && response.userData.email;\n    }\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/payconfirmiframe'),\n      feArgs(args),\n      /* shouldFadeBody */ true\n    );\n\n    this.activityIframeView_.on(\n      EntitlementsResponse,\n      this.handleEntitlementsResponse_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(() => {\n      // The flow is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    });\n    this.readyPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.readyPromise_;\n  }\n\n  /**\n   * @param {!EntitlementsResponse} response\n   * @private\n   */\n  handleEntitlementsResponse_(response) {\n    const jwt = response.getJwt();\n    if (jwt) {\n      this.deps_.entitlementsManager().pushNextEntitlements(jwt);\n    }\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  complete() {\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.ACTION_ACCOUNT_CREATED,\n      true,\n      getEventParams(this.sku_ || '')\n    );\n    this.deps_.entitlementsManager().unblockNextNotification();\n    this.readyPromise_.then(() => {\n      const accountCompletionRequest = new AccountCreationRequest();\n      accountCompletionRequest.setComplete(true);\n      this.activityIframeView_.execute(accountCompletionRequest);\n    });\n    return this.activityIframeView_\n      .acceptResult()\n      .catch(() => {\n        // Ignore errors.\n      })\n      .then(() => {\n        this.eventManager_.logSwgEvent(\n          AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED,\n          true,\n          getEventParams(this.sku_ || '')\n        );\n        this.deps_.entitlementsManager().setToastShown(true);\n      });\n  }\n}\n\n/** @private {boolean} */\nPayCompleteFlow.waitingForPayClient_ = false;\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Promise<!Object>} payPromise\n * @param {function():!Promise} completeHandler\n * @return {!Promise<!SubscribeResponse>}\n */\nfunction validatePayResponse(deps, payPromise, completeHandler) {\n  const wasRedirect = !PayCompleteFlow.waitingForPayClient_;\n  PayCompleteFlow.waitingForPayClient_ = false;\n  return payPromise.then((data) => {\n    // 1) We log against a random TX ID which is how we track a specific user\n    //    anonymously.\n    // 2) If there was a redirect to gPay, we may have lost our stored TX ID.\n    // 3) Pay service is supposed to give us the TX ID it logged against.\n    let eventType = AnalyticsEvent.UNKNOWN;\n    let eventParams = undefined;\n    if (typeof data !== 'object' || !data['googleTransactionId']) {\n      // If gPay doesn't give us a TX ID it means that something may\n      // be wrong.  If we previously logged then we are at least continuing to\n      // log against the same TX ID.  If we didn't previously log then we have\n      // lost all connection to the events that preceded the payment event and\n      // we at least want to know why that data was lost.\n      eventParams = new EventParams();\n      eventParams.setHadLogged(!wasRedirect);\n      eventType = AnalyticsEvent.EVENT_GPAY_NO_TX_ID;\n    } else {\n      const oldTxId = deps.analytics().getTransactionId();\n      const newTxId = data['googleTransactionId'];\n\n      if (wasRedirect) {\n        // This is the expected case for full redirects.  It may be happening\n        // unexpectedly at other times too though and we want to be aware of\n        // it if it does.\n        deps.analytics().setTransactionId(newTxId);\n        eventType = AnalyticsEvent.EVENT_GPAY_CANNOT_CONFIRM_TX_ID;\n      } else {\n        if (oldTxId === newTxId) {\n          // This is the expected case for non-redirect pay events\n          eventType = AnalyticsEvent.EVENT_CONFIRM_TX_ID;\n        } else {\n          // This is an unexpected case: gPay rejected our TX ID and created\n          // its own.  Log the gPay TX ID but keep our logging consistent.\n          eventParams = new EventParams();\n          eventParams.setGpayTransactionId(newTxId);\n          eventType = AnalyticsEvent.EVENT_CHANGED_TX_ID;\n        }\n      }\n    }\n    deps.eventManager().logSwgEvent(eventType, true, eventParams);\n    return parseSubscriptionResponse(deps, data, completeHandler);\n  });\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {*} data\n * @param {function():!Promise} completeHandler\n * @return {!SubscribeResponse}\n */\nexport function parseSubscriptionResponse(deps, data, completeHandler) {\n  let swgData = null;\n  let raw = null;\n  let productType = ProductType.SUBSCRIPTION;\n  let oldSku = null;\n  let paymentRecurrence = null;\n\n  if (data) {\n    if (typeof data == 'string') {\n      raw = /** @type {string} */ (data);\n    } else {\n      // Assume it's a json object in the format:\n      // `{integratorClientCallbackData: \"...\"}` or `{swgCallbackData: \"...\"}`.\n      const json = /** @type {!Object} */ (data);\n      if ('swgCallbackData' in json) {\n        swgData = /** @type {!Object} */ (json['swgCallbackData']);\n      } else if ('integratorClientCallbackData' in json) {\n        raw = json['integratorClientCallbackData'];\n      }\n      if ('paymentRequest' in data) {\n        oldSku = (data['paymentRequest']['swg'] || {})['oldSku'];\n        paymentRecurrence = (data['paymentRequest']['swg'] || {})[\n          'paymentRecurrence'\n        ];\n        productType =\n          (data['paymentRequest']['i'] || {})['productType'] ||\n          ProductType.SUBSCRIPTION;\n      }\n    }\n  }\n  if (raw && !swgData) {\n    raw = atob(raw);\n    if (raw) {\n      const parsed = parseJson(raw);\n      swgData = parsed['swgCallbackData'];\n    }\n  }\n  if (!swgData) {\n    throw new Error('unexpected payment response');\n  }\n  raw = JSON.stringify(/** @type {!JsonObject} */ (swgData));\n  return new SubscribeResponse(\n    raw,\n    parsePurchaseData(swgData),\n    parseUserData(swgData),\n    parseEntitlements(deps, swgData),\n    productType,\n    completeHandler,\n    oldSku,\n    paymentRecurrence\n  );\n}\n\n/**\n * @param {!Object} swgData\n * @return {!PurchaseData}\n */\nfunction parsePurchaseData(swgData) {\n  const raw = swgData['purchaseData'];\n  const signature = swgData['purchaseDataSignature'];\n  return new PurchaseData(raw, signature);\n}\n\n/**\n * @param {!Object} swgData\n * @return {?UserData}\n * @package Visible for testing.\n */\nexport function parseUserData(swgData) {\n  const idToken = swgData['idToken'];\n  if (!idToken) {\n    return null;\n  }\n  const jwt = /** @type {!Object} */ (new JwtHelper().decode(idToken));\n  return new UserData(idToken, jwt);\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Object} swgData\n * @return {?../api/entitlements.Entitlements}\n * @package Visible for testing.\n */\nexport function parseEntitlements(deps, swgData) {\n  if (swgData['signedEntitlements']) {\n    return deps.entitlementsManager().parseEntitlements(swgData);\n  }\n  return null;\n}\n\n/**\n * @param {!PurchaseData} purchaseData\n * @return {?string}\n */\nfunction parseSkuFromPurchaseDataSafe(purchaseData) {\n  return /** @type {?string} */ (getPropertyFromJsonString(\n    purchaseData.raw,\n    'productId'\n  ) || null);\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AnalyticsEvent,\n  EventOriginator,\n  EventParams,\n} from '../proto/api_messages';\nimport {addQueryParam} from '../utils/url';\nimport {adsUrl} from './services';\nimport {analyticsEventToPublisherEvent} from './event-type-mapping';\nimport {isBoolean, isObject} from '../utils/types';\n\n/**\n * Implements interface to Propensity server\n */\nexport class PropensityServer {\n  /**\n   * Page configuration is known when Propensity API\n   * is available, publication ID is therefore used\n   * in constructor for the server interface.\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n    /** @private @const {string} */\n    this.publicationId_ = this.deps_.pageConfig().getPublicationId();\n    /** @private {?string} */\n    this.clientId_ = null;\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n    /** @private @const {number} */\n    this.version_ = 1;\n\n    this.deps_\n      .eventManager()\n      .registerEventListener(this.handleClientEvent_.bind(this));\n  }\n\n  /**\n   * @private\n   * @return {string}\n   */\n  getDocumentCookie_() {\n    return this.win_.document.cookie;\n  }\n\n  /**\n   * Returns the client ID to be used.\n   * @return {?string}\n   * @private\n   */\n  getClientId_() {\n    if (!this.clientId_) {\n      // Match '__gads' (name of the cookie) dropped by Ads Tag.\n      const gadsmatch = this.getDocumentCookie_().match(\n        '(^|;)\\\\s*__gads\\\\s*=\\\\s*([^;]+)'\n      );\n      // Since the cookie will be consumed using decodeURIComponent(),\n      // use encodeURIComponent() here to match.\n      this.clientId_ = gadsmatch && encodeURIComponent(gadsmatch.pop());\n    }\n    return this.clientId_;\n  }\n\n  /**\n   * @private\n   * @param {string} url\n   * @return {string}\n   */\n  propensityUrl_(url) {\n    url = addQueryParam(url, 'u_tz', '240');\n    url = addQueryParam(url, 'v', String(this.version_));\n    const clientId = this.getClientId_();\n    if (clientId) {\n      url = addQueryParam(url, 'cookie', clientId);\n    }\n    url = addQueryParam(url, 'cdm', this.win_.location.hostname);\n    return url;\n  }\n\n  /**\n   * @param {string} state\n   * @param {?string} productsOrSkus\n   */\n  sendSubscriptionState(state, productsOrSkus) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let url = adsUrl('/subopt/data');\n    url = addQueryParam(url, 'states', this.publicationId_ + ':' + state);\n    if (productsOrSkus) {\n      url = addQueryParam(url, 'extrainfo', productsOrSkus);\n    }\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   * @param {string} event\n   * @param {?string} context\n   * @private\n   */\n  sendEvent_(event, context) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let url = adsUrl('/subopt/data');\n    url = addQueryParam(url, 'events', this.publicationId_ + ':' + event);\n    if (context) {\n      url = addQueryParam(url, 'extrainfo', context);\n    }\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   *\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    /**\n     * Does a live check of the config because we don't know when publisher\n     * called to enable (it may be after a consent dialog).\n     */\n    if (\n      !this.deps_.config().enablePropensity &&\n      event.eventOriginator !== EventOriginator.PROPENSITY_CLIENT\n    ) {\n      return;\n    }\n\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      this.sendSubscriptionState(\n        event.additionalParameters['state'],\n        event.additionalParameters['productsOrSkus']\n      );\n      return;\n    }\n    const propEvent = analyticsEventToPublisherEvent(event.eventType);\n    if (propEvent == null) {\n      return;\n    }\n    let additionalParameters = event.additionalParameters;\n    // The EventParams object is private to SwG analytics.  Do not send.\n    if (additionalParameters instanceof EventParams) {\n      additionalParameters = undefined;\n    }\n    if (isBoolean(event.isFromUserAction)) {\n      if (!isObject(additionalParameters)) {\n        additionalParameters = {};\n      }\n      additionalParameters['is_active'] = event.isFromUserAction;\n    }\n    this.sendEvent_(\n      propEvent,\n      JSON.stringify(/** @type {?JsonObject} */ (additionalParameters))\n    );\n  }\n\n  /**\n   * @param {JsonObject} response\n   * @return {!../api/propensity-api.PropensityScore}\n   */\n  parsePropensityResponse_(response) {\n    let defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({});\n    if (!response['header']) {\n      defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n        header: {ok: false},\n        body: {error: 'No valid response'},\n      });\n      return defaultScore;\n    }\n    const status = response['header'];\n    let scoreDetails = undefined;\n    if (status['ok']) {\n      const scores = response['scores'];\n      scoreDetails = [];\n      for (let i = 0; i < scores.length; i++) {\n        const result = scores[i];\n        const scoreStatus = !!result['score'];\n        let scoreDetail;\n        if (scoreStatus) {\n          const value = /** @type {!../api/propensity-api.Score} */ ({\n            value: result['score'],\n            bucketed: result['score_type'] == 2,\n          });\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            score: value,\n          });\n        } else {\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            error: result['error_message'],\n          });\n        }\n        scoreDetails.push(scoreDetail);\n      }\n      if (scoreDetails) {\n        defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n          header: {ok: true},\n          body: {scores: scoreDetails},\n        });\n      }\n      return defaultScore;\n    }\n    defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n      header: {ok: false},\n      body: {error: response['error']},\n    });\n    return defaultScore;\n  }\n  /**\n   * @param {string} referrer\n   * @param {string} type\n   * @return {?Promise<../api/propensity-api.PropensityScore>}\n   */\n  getPropensity(referrer, type) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    const url =\n      adsUrl('/subopt/pts?products=') +\n      this.publicationId_ +\n      '&type=' +\n      type +\n      '&ref=' +\n      referrer;\n    return this.fetcher_\n      .fetch(this.propensityUrl_(url), init)\n      .then((result) => result.json())\n      .then((response) => {\n        return this.parsePropensityResponse_(response);\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as PropensityApi from '../api/propensity-api';\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {EventOriginator} from '../proto/api_messages';\nimport {PropensityServer} from './propensity-server';\nimport {isBoolean} from '../utils/types';\nimport {isEnumValue, isObject} from '../utils/types';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\n\n/**\n * @implements {PropensityApi.PropensityApi}\n */\nexport class Propensity {\n  /**\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   *\n   * IMPORTANT: deps may not be full initialized config and pageConfig are\n   * available immediately, other function should be gated on a ready promise.\n   * #TODO(jpettitt) switch refactor to take out the win and use deps to get win\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private {PropensityServer} */\n    this.propensityServer_ = new PropensityServer(win, deps, fetcher);\n\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!Object.values(SubscriptionState).includes(state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.propensityServer_.sendSubscriptionState(state, productsOrSkus);\n  }\n\n  /** @override */\n  getPropensity(type) {\n    if (type && !Object.values(PropensityApi.PropensityType).includes(type)) {\n      throw new Error('Invalid propensity type requested');\n    }\n    if (!type) {\n      type = PropensityApi.PropensityType.GENERAL;\n    }\n    return this.propensityServer_.getPropensity(\n      this.win_.document.referrer,\n      type\n    );\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    const analyticsEvent = publisherEventToAnalyticsEvent(userEvent.name);\n    let data = null;\n    if (!isEnumValue(Event, userEvent.name) || !analyticsEvent) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = {};\n        Object.assign(data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n\n    this.eventManager_.logEvent({\n      eventType: analyticsEvent,\n      eventOriginator: EventOriginator.PROPENSITY_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AbbrvOfferFlow, OffersFlow, SubscribeOptionFlow} from './offers-flow';\nimport {ActivityPorts} from '../components/activities';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {AnalyticsMode} from '../api/subscriptions';\nimport {AnalyticsService} from './analytics-service';\nimport {ButtonApi} from './button-api';\nimport {Callbacks} from './callbacks';\nimport {ClientEventManager} from './client-event-manager';\nimport {ContributionsFlow} from './contributions-flow';\nimport {DeferredAccountFlow} from './deferred-account-flow';\nimport {DepsDef} from './deps';\nimport {DialogManager} from '../components/dialog-manager';\nimport {Doc, resolveDoc} from '../model/doc';\nimport {EntitlementsManager} from './entitlements-manager';\nimport {ExperimentFlags} from './experiment-flags';\nimport {Fetcher, XhrFetcher} from './fetcher';\nimport {JsError} from './jserror';\nimport {\n  LinkCompleteFlow,\n  LinkSaveFlow,\n  LinkbackFlow,\n} from './link-accounts-flow';\nimport {Logger} from './logger';\nimport {LoginNotificationApi} from './login-notification-api';\nimport {LoginPromptApi} from './login-prompt-api';\nimport {MeterRegwallApi} from './meter-regwall-api';\nimport {OffersApi} from './offers-api';\nimport {PageConfig} from '../model/page-config';\nimport {\n  PageConfigResolver,\n  getControlFlag,\n} from '../model/page-config-resolver';\nimport {PayClient} from './pay-client';\nimport {PayCompleteFlow, PayStartFlow} from './pay-flow';\nimport {Preconnect} from '../utils/preconnect';\nimport {\n  ProductType,\n  Subscriptions,\n  WindowOpenMode,\n  defaultConfig,\n} from '../api/subscriptions';\nimport {Propensity} from './propensity';\nimport {CSS as SWG_DIALOG} from '../../build/css/components/dialog.css';\nimport {Storage} from './storage';\nimport {WaitForSubscriptionLookupApi} from './wait-for-subscription-lookup-api';\nimport {assert} from '../utils/log';\nimport {debugLog} from '../utils/log';\nimport {injectStyleSheet, isLegacyEdgeBrowser} from '../utils/dom';\nimport {isBoolean} from '../utils/types';\nimport {isExperimentOn} from './experiments';\nimport {setExperiment} from './experiments';\n\nconst RUNTIME_PROP = 'SWG';\nconst RUNTIME_LEGACY_PROP = 'SUBSCRIPTIONS'; // MIGRATE\n\n/**\n * Reference to the runtime, for testing.\n * @private {!Runtime}\n */\nlet runtimeInstance_;\n\n/**\n * Returns runtime for testing if available. Throws if the runtime is not\n * initialized yet.\n * @visibleForTesting\n * @return {!Runtime}\n */\nexport function getRuntime() {\n  assert(runtimeInstance_, 'not initialized yet');\n  return runtimeInstance_;\n}\n\n/**\n * Installs SwG runtime.\n * @param {!Window} win\n */\nexport function installRuntime(win) {\n  // Only install the SwG runtime once.\n  if (win[RUNTIME_PROP] && !Array.isArray(win[RUNTIME_PROP])) {\n    return;\n  }\n\n  // Create a SwG runtime.\n  const runtime = new Runtime(win);\n\n  // Create a public version of the SwG runtime.\n  const publicRuntime = createPublicRuntime(runtime);\n\n  /**\n   * Executes a callback when SwG runtime is ready.\n   * @param {function(!Subscriptions)} callback\n   */\n  function callWhenRuntimeIsReady(callback) {\n    if (!callback) {\n      return;\n    }\n\n    runtime.whenReady().then(() => {\n      callback(publicRuntime);\n    });\n  }\n\n  // Queue up any callbacks the publication might have provided.\n  const waitingCallbacks = [].concat(\n    win[RUNTIME_PROP],\n    win[RUNTIME_LEGACY_PROP]\n  );\n  waitingCallbacks.forEach(callWhenRuntimeIsReady);\n\n  // If any more callbacks are `push`ed to the global SwG variables,\n  // they'll be queued up to receive the SwG runtime when it's ready.\n  win[RUNTIME_PROP] = win[RUNTIME_LEGACY_PROP] = {\n    push: callWhenRuntimeIsReady,\n  };\n\n  // Set variable for testing.\n  runtimeInstance_ = runtime;\n\n  // Kick off subscriptions flow.\n  runtime.startSubscriptionsFlowIfNeeded();\n}\n\n/**\n * @implements {Subscriptions}\n */\nexport class Runtime {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(win);\n\n    /** @private @const {!Promise} */\n    this.ready_ = Promise.resolve();\n\n    /** @private {?string} */\n    this.productOrPublicationId_ = null;\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = {};\n\n    /** @private {boolean} */\n    this.committed_ = false;\n\n    /** @private {?function((!ConfiguredRuntime|!Promise))} */\n    this.configuredResolver_ = null;\n\n    /** @private @const {!Promise<!ConfiguredRuntime>} */\n    this.configuredPromise_ = new Promise((resolve) => {\n      this.configuredResolver_ = resolve;\n    });\n\n    /** @private {?PageConfigResolver} */\n    this.pageConfigResolver_ = null;\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, this.configuredPromise_);\n    this.buttonApi_.init(); // Injects swg-button stylesheet.\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * @param {boolean} commit\n   * @return {!Promise<!ConfiguredRuntime>}\n   * @private\n   */\n  configured_(commit) {\n    if (!this.committed_ && commit) {\n      this.committed_ = true;\n      /** @type {!Promise<!PageConfig>} */\n      let pageConfigPromise;\n      if (this.productOrPublicationId_) {\n        pageConfigPromise = Promise.resolve(\n          new PageConfig(this.productOrPublicationId_, /* locked */ false)\n        );\n      } else {\n        this.pageConfigResolver_ = new PageConfigResolver(this.doc_);\n        pageConfigPromise = this.pageConfigResolver_\n          .resolveConfig()\n          .then((config) => {\n            this.pageConfigResolver_ = null;\n            return config;\n          });\n      }\n      pageConfigPromise.then(\n        (pageConfig) => {\n          this.configuredResolver_(\n            new ConfiguredRuntime(\n              this.doc_,\n              pageConfig,\n              /* integr */ {configPromise: this.configuredPromise_},\n              this.config_\n            )\n          );\n          this.configuredResolver_ = null;\n        },\n        (reason) => {\n          this.configuredResolver_(Promise.reject(reason));\n          this.configuredResolver_ = null;\n        }\n      );\n    } else if (commit && this.pageConfigResolver_) {\n      this.pageConfigResolver_.check();\n    }\n    return this.configuredPromise_;\n  }\n\n  /**\n   * Starts the subscription flow if it hasn't been started and the page is\n   * configured to start it automatically.\n   *\n   * @return {?Promise}\n   * @package\n   */\n  startSubscriptionsFlowIfNeeded() {\n    const control = getControlFlag(this.win_.document);\n    debugLog(control, 'mode');\n    if (control == 'manual') {\n      // \"Skipping automatic start because control flag is set to \"manual\".\n      return null;\n    }\n    return this.start();\n  }\n\n  /** @override */\n  init(productOrPublicationId) {\n    assert(!this.committed_, 'already configured');\n    this.productOrPublicationId_ = productOrPublicationId;\n\n    // Process the page's config.\n    this.configured_(true);\n  }\n\n  /** @override */\n  configure(config) {\n    // Accumulate config for startup.\n    Object.assign(this.config_, config);\n    return this.configured_(false).then((runtime) => runtime.configure(config));\n  }\n\n  /** @override */\n  start() {\n    return this.configured_(true).then((runtime) => runtime.start());\n  }\n\n  /** @override */\n  reset() {\n    return this.configured_(true).then((runtime) => runtime.reset());\n  }\n\n  /** @override */\n  clear() {\n    return this.configured_(true).then((runtime) => runtime.clear());\n  }\n\n  /** @override */\n  getEntitlements(params) {\n    return this.configured_(true).then((runtime) =>\n      runtime.getEntitlements(params)\n    );\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnEntitlementsResponse(callback)\n    );\n  }\n\n  /** @override */\n  getOffers(options) {\n    return this.configured_(true).then((runtime) => runtime.getOffers(options));\n  }\n\n  /** @override */\n  showOffers(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showOffers(options)\n    );\n  }\n\n  /** @override */\n  showUpdateOffers(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showUpdateOffers(options)\n    );\n  }\n\n  /** @override */\n  showSubscribeOption(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showSubscribeOption(options)\n    );\n  }\n\n  /** @override */\n  showAbbrvOffer(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showAbbrvOffer(options)\n    );\n  }\n\n  /** @override */\n  showContributionOptions(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showContributionOptions(options)\n    );\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.configured_(true).then((runtime) =>\n      runtime.waitForSubscriptionLookup(accountPromise)\n    );\n  }\n\n  /** @override */\n  showMeterRegwall(params) {\n    return this.configured_(true).then((runtime) =>\n      runtime.showMeterRegwall(params)\n    );\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnNativeSubscribeRequest(callback)\n    );\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnSubscribeResponse(callback)\n    );\n  }\n\n  /** @override */\n  subscribe(sku) {\n    return this.configured_(true).then((runtime) => runtime.subscribe(sku));\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    return this.configured_(true).then((runtime) =>\n      runtime.updateSubscription(subscriptionRequest)\n    );\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnContributionResponse(callback)\n    );\n  }\n\n  /** @override */\n  setOnPaymentResponse(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnPaymentResponse(callback)\n    );\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    return this.configured_(true).then((runtime) =>\n      runtime.contribute(skuOrSubscriptionRequest)\n    );\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(options) {\n    return this.configured_(true).then((runtime) =>\n      runtime.completeDeferredAccountCreation(options)\n    );\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnLoginRequest(callback)\n    );\n  }\n\n  /** @override */\n  triggerLoginRequest(request) {\n    return this.configured_(false).then((runtime) =>\n      runtime.triggerLoginRequest(request)\n    );\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnLinkComplete(callback)\n    );\n  }\n\n  /** @override */\n  linkAccount(params = {}) {\n    return this.configured_(true).then((runtime) =>\n      runtime.linkAccount(params)\n    );\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnFlowStarted(callback)\n    );\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    return this.configured_(false).then((runtime) =>\n      runtime.setOnFlowCanceled(callback)\n    );\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.configured_(true).then((runtime) => {\n      return runtime.saveSubscription(saveSubscriptionRequestCallback);\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.configured_(true).then((runtime) => {\n      return runtime.showLoginPrompt();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.configured_(true).then((runtime) => {\n      return runtime.showLoginNotification();\n    });\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, callback) {\n    return this.buttonApi_.create(optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, callback) {\n    return this.configured_(true).then((runtime) =>\n      runtime.attachSmartButton(button, optionsOrCallback, callback)\n    );\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, callback) {\n    return this.buttonApi_.attach(button, optionsOrCallback, callback);\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return this.configured_(true).then((runtime) => {\n      return runtime.getPropensityModule();\n    });\n  }\n\n  /** @override */\n  getLogger() {\n    return this.configured_(true).then((runtime) => runtime.getLogger());\n  }\n\n  /** @override */\n  getEventManager() {\n    return this.configured_(true).then((runtime) => runtime.getEventManager());\n  }\n\n  /** @override */\n  setShowcaseEntitlement(unusedEntitlement) {\n    // TODO\n  }\n}\n\n/**\n * @implements {DepsDef}\n * @implements {Subscriptions}\n */\nexport class ConfiguredRuntime {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {{\n   *     fetcher: (!Fetcher|undefined),\n   *     configPromise: (!Promise|undefined),\n   *   }=} integr\n   * @param {!../api/subscriptions.Config=} config\n   */\n  constructor(winOrDoc, pageConfig, integr, config) {\n    integr = integr || {};\n    integr.configPromise = integr.configPromise || Promise.resolve();\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = new ClientEventManager(integr.configPromise);\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private @const {!Window} */\n    this.win_ = this.doc_.getWin();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = defaultConfig();\n\n    if (isLegacyEdgeBrowser(this.win_)) {\n      // TODO(dvoytenko, b/120607343): Find a way to remove this restriction\n      // or move it to Web Activities.\n      this.config_.windowOpenMode = WindowOpenMode.REDIRECT;\n    }\n    if (config) {\n      this.configure_(config);\n    }\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {!Promise} */\n    this.documentParsed_ = this.doc_.whenReady();\n\n    /** @private @const {!JsError} */\n    this.jserror_ = new JsError(this.doc_);\n\n    /** @private @const {!Fetcher} */\n    this.fetcher_ = integr.fetcher || new XhrFetcher(this.win_);\n\n    /** @private @const {!Storage} */\n    this.storage_ = new Storage(this.win_);\n\n    /** @private @const {!DialogManager} */\n    this.dialogManager_ = new DialogManager(this.doc_);\n\n    /** @private @const {!Callbacks} */\n    this.callbacks_ = new Callbacks();\n\n    // WARNING: DepsDef ('this') is being progressively defined below.\n    // Constructors will crash if they rely on something that doesn't exist yet.\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = new ActivityPorts(this);\n\n    /** @private @const {!AnalyticsService} */\n    this.analyticsService_ = new AnalyticsService(this, this.fetcher_);\n    this.analyticsService_.start();\n\n    /** @private @const {!PayClient} */\n    this.payClient_ = new PayClient(this);\n\n    /** @private @const {!Logger} */\n    this.logger_ = new Logger(this);\n\n    /** @private @const {!EntitlementsManager} */\n    this.entitlementsManager_ = new EntitlementsManager(\n      this.win_,\n      this.pageConfig_,\n      this.fetcher_,\n      this // See note about 'this' above\n    );\n\n    /** @private @const {!Propensity} */\n    this.propensityModule_ = new Propensity(\n      this.win_,\n      this, // See note about 'this' above\n      this.fetcher_\n    );\n\n    // ALL CLEAR: DepsDef definition now complete.\n    this.eventManager_.logSwgEvent(AnalyticsEvent.IMPRESSION_PAGE_LOAD, false);\n\n    /** @private @const {!OffersApi} */\n    this.offersApi_ = new OffersApi(this.pageConfig_, this.fetcher_);\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, Promise.resolve(this));\n\n    const preconnect = new Preconnect(this.win_.document);\n\n    preconnect.prefetch('$assets$/loader.svg');\n    preconnect.preconnect('https://www.gstatic.com/');\n    preconnect.preconnect('https://fonts.googleapis.com/');\n    preconnect.preconnect('https://www.google.com/');\n    LinkCompleteFlow.configurePending(this);\n    PayCompleteFlow.configurePending(this);\n\n    injectStyleSheet(this.doc_, SWG_DIALOG);\n\n    // Report redirect errors if any.\n    this.activityPorts_.onRedirectError((error) => {\n      this.analyticsService_.addLabels(['redirect']);\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.EVENT_PAYMENT_FAILED,\n        false\n      );\n      this.jserror_.error('Redirect error', error);\n    });\n  }\n\n  /** @override */\n  doc() {\n    return this.doc_;\n  }\n\n  /** @override */\n  win() {\n    return this.win_;\n  }\n\n  /** @override */\n  pageConfig() {\n    return this.pageConfig_;\n  }\n\n  /** @override */\n  jserror() {\n    return this.jserror_;\n  }\n\n  /** @override */\n  activities() {\n    return this.activityPorts_;\n  }\n\n  /** @override */\n  payClient() {\n    return this.payClient_;\n  }\n\n  /** @override */\n  dialogManager() {\n    return this.dialogManager_;\n  }\n\n  /** @override */\n  entitlementsManager() {\n    return this.entitlementsManager_;\n  }\n\n  /** @override */\n  callbacks() {\n    return this.callbacks_;\n  }\n\n  /** @override */\n  storage() {\n    return this.storage_;\n  }\n\n  /** @override */\n  analytics() {\n    return this.analyticsService_;\n  }\n\n  /** @override */\n  init() {\n    // Implemented by the `Runtime` class.\n  }\n\n  /** @override */\n  configure(config) {\n    // Indirected for constructor testing.\n    this.configure_(config);\n  }\n\n  /**\n   * @param {!../api/subscriptions.Config} config\n   * @private\n   */\n  configure_(config) {\n    // Validate first.\n    let error = '';\n    for (const k in config) {\n      const v = config[k];\n      switch (k) {\n        case 'windowOpenMode':\n          if (v != WindowOpenMode.AUTO && v != WindowOpenMode.REDIRECT) {\n            error = 'Unknown windowOpenMode: ' + v;\n          }\n          break;\n        case 'experiments':\n          v.forEach((experiment) => setExperiment(this.win_, experiment, true));\n          if (this.analytics()) {\n            // If analytics service isn't set up yet, then it will get the\n            // experiments later.\n            this.analytics().addLabels(v);\n          }\n          break;\n        case 'analyticsMode':\n          if (v != AnalyticsMode.DEFAULT && v != AnalyticsMode.IMPRESSIONS) {\n            error = 'Unknown analytics mode: ' + v;\n          }\n          break;\n        case 'enableSwgAnalytics':\n          if (!isBoolean(v)) {\n            error = 'Unknown enableSwgAnalytics value: ' + v;\n          }\n          break;\n        case 'enablePropensity':\n          if (!isBoolean(v)) {\n            error = 'Unknown enablePropensity value: ' + v;\n          }\n          break;\n        default:\n          error = 'Unknown config property: ' + k;\n      }\n    }\n    // Throw error string if it's not null\n    assert(!error, error || undefined);\n    // Assign.\n    Object.assign(this.config_, config);\n  }\n\n  /** @override */\n  config() {\n    return this.config_;\n  }\n\n  /** @override */\n  reset() {\n    this.entitlementsManager_.reset();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  clear() {\n    this.entitlementsManager_.clear();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  start() {\n    // No need to run entitlements without a product or for an unlocked page.\n    if (!this.pageConfig_.getProductId() || !this.pageConfig_.isLocked()) {\n      return Promise.resolve();\n    }\n    this.getEntitlements();\n  }\n\n  /** @override */\n  getEntitlements(params) {\n    return this.entitlementsManager_\n      .getEntitlements(params)\n      .then((entitlements) => {\n        // Auto update internal things tracking the user's current SKU.\n        if (entitlements) {\n          try {\n            const skus = entitlements.entitlements.map(\n              (entitlement) =>\n                entitlement.getSku() || 'unknown subscriptionToken'\n            );\n            if (skus.length > 0) {\n              this.analyticsService_.setSku(skus.join(','));\n            }\n          } catch (ex) {}\n        }\n        return entitlements.clone();\n      });\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    this.callbacks_.setOnEntitlementsResponse(callback);\n  }\n\n  /** @override */\n  getOffers(options) {\n    return this.offersApi_.getOffers(options && options.productId);\n  }\n\n  /** @override */\n  showOffers(options) {\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showOffers() method cannot be used to update a subscription. ' +\n        'Use the showUpdateOffers() method instead.';\n      assert(options ? !options['oldSku'] : true, errorMessage);\n      const flow = new OffersFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showUpdateOffers(options) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showUpdateOffers() method cannot be used for new subscribers. ' +\n        'Use the showOffers() method instead.';\n      assert(options ? !!options['oldSku'] : false, errorMessage);\n      const flow = new OffersFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showSubscribeOption(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new SubscribeOptionFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showAbbrvOffer(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new AbbrvOfferFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showContributionOptions(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new ContributionsFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.documentParsed_.then(() => {\n      const wait = new WaitForSubscriptionLookupApi(this, accountPromise);\n      return wait.start();\n    });\n  }\n\n  /** @override */\n  showMeterRegwall(meterRegwallArgs) {\n    return this.documentParsed_.then(() => {\n      const wait = new MeterRegwallApi(this, meterRegwallArgs);\n      return wait.start();\n    });\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    this.callbacks_.setOnLoginRequest(callback);\n  }\n\n  /** @override */\n  triggerLoginRequest(request) {\n    this.callbacks_.triggerLoginRequest(request);\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    this.callbacks_.setOnLinkComplete(callback);\n  }\n\n  /** @override */\n  linkAccount(params = {}) {\n    return this.documentParsed_.then(() => {\n      return new LinkbackFlow(this).start(params);\n    });\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.documentParsed_.then(() => {\n      return new LinkSaveFlow(this, saveSubscriptionRequestCallback).start();\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.documentParsed_.then(() => {\n      return new LoginPromptApi(this).start();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.documentParsed_.then(() => {\n      return new LoginNotificationApi(this).start();\n    });\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    this.callbacks_.setOnSubscribeRequest(callback);\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    this.callbacks_.setOnSubscribeResponse(callback);\n  }\n\n  /** @override */\n  setOnPaymentResponse(callback) {\n    this.callbacks_.setOnPaymentResponse(callback);\n  }\n\n  /** @override */\n  subscribe(sku) {\n    const errorMessage =\n      'The subscribe() method can only take a sku as its parameter; ' +\n      'for subscription updates please use the updateSubscription() method';\n    assert(typeof sku === 'string', errorMessage);\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, {'skuId': sku}).start();\n    });\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    const errorMessage =\n      'The updateSubscription() method should be used for subscription ' +\n      'updates; for new subscriptions please use the subscribe() method';\n    assert(\n      subscriptionRequest ? subscriptionRequest['oldSku'] : false,\n      errorMessage\n    );\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, subscriptionRequest).start();\n    });\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    this.callbacks_.setOnContributionResponse(callback);\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    /** @type {!../api/subscriptions.SubscriptionRequest} */\n    const request =\n      typeof skuOrSubscriptionRequest == 'string'\n        ? {'skuId': skuOrSubscriptionRequest}\n        : skuOrSubscriptionRequest;\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(\n        this,\n        request,\n        ProductType.UI_CONTRIBUTION\n      ).start();\n    });\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(options) {\n    return this.documentParsed_.then(() => {\n      return new DeferredAccountFlow(this, options || null).start();\n    });\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    this.callbacks_.setOnFlowStarted(callback);\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    this.callbacks_.setOnFlowCanceled(callback);\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, callback) {\n    // This is a minor duplication to allow this code to be sync.\n    return this.buttonApi_.create(optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, callback) {\n    // This is a minor duplication to allow this code to be sync.\n    this.buttonApi_.attach(button, optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, callback) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.SMARTBOX),\n      'Not yet launched!'\n    );\n    this.buttonApi_.attachSmartButton(\n      this,\n      button,\n      optionsOrCallback,\n      callback\n    );\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return Promise.resolve(this.propensityModule_);\n  }\n\n  /**\n   * This one exists as an internal helper so SwG logging doesn't require a promise.\n   * @return {!ClientEventManager}\n   */\n  eventManager() {\n    return this.eventManager_;\n  }\n\n  /**\n   * This one exists as a public API so publishers can subscribe to SwG events.\n   * @override */\n  getEventManager() {\n    return Promise.resolve(this.eventManager_);\n  }\n\n  /** @override */\n  getLogger() {\n    return Promise.resolve(this.logger_);\n  }\n\n  /** @override */\n  setShowcaseEntitlement(unusedEntitlement) {\n    // TODO\n  }\n}\n\n/**\n * @param {!Runtime} runtime\n * @return {!Subscriptions}\n */\nfunction createPublicRuntime(runtime) {\n  return /** @type {!Subscriptions} */ ({\n    init: runtime.init.bind(runtime),\n    configure: runtime.configure.bind(runtime),\n    start: runtime.start.bind(runtime),\n    reset: runtime.reset.bind(runtime),\n    clear: runtime.clear.bind(runtime),\n    getEntitlements: runtime.getEntitlements.bind(runtime),\n    linkAccount: runtime.linkAccount.bind(runtime),\n    showLoginPrompt: runtime.showLoginPrompt.bind(runtime),\n    showLoginNotification: runtime.showLoginNotification.bind(runtime),\n    getOffers: runtime.getOffers.bind(runtime),\n    showOffers: runtime.showOffers.bind(runtime),\n    showUpdateOffers: runtime.showUpdateOffers.bind(runtime),\n    showAbbrvOffer: runtime.showAbbrvOffer.bind(runtime),\n    showMeterRegwall: runtime.showMeterRegwall.bind(runtime),\n    showSubscribeOption: runtime.showSubscribeOption.bind(runtime),\n    showContributionOptions: runtime.showContributionOptions.bind(runtime),\n    waitForSubscriptionLookup: runtime.waitForSubscriptionLookup.bind(runtime),\n    subscribe: runtime.subscribe.bind(runtime),\n    updateSubscription: runtime.updateSubscription.bind(runtime),\n    contribute: runtime.contribute.bind(runtime),\n    completeDeferredAccountCreation: runtime.completeDeferredAccountCreation.bind(\n      runtime\n    ),\n    setOnEntitlementsResponse: runtime.setOnEntitlementsResponse.bind(runtime),\n    setOnLoginRequest: runtime.setOnLoginRequest.bind(runtime),\n    triggerLoginRequest: runtime.triggerLoginRequest.bind(runtime),\n    setOnLinkComplete: runtime.setOnLinkComplete.bind(runtime),\n    setOnNativeSubscribeRequest: runtime.setOnNativeSubscribeRequest.bind(\n      runtime\n    ),\n    setOnPaymentResponse: runtime.setOnPaymentResponse.bind(runtime),\n    setOnSubscribeResponse: runtime.setOnSubscribeResponse.bind(runtime),\n    setOnContributionResponse: runtime.setOnContributionResponse.bind(runtime),\n    setOnFlowStarted: runtime.setOnFlowStarted.bind(runtime),\n    setOnFlowCanceled: runtime.setOnFlowCanceled.bind(runtime),\n    saveSubscription: runtime.saveSubscription.bind(runtime),\n    createButton: runtime.createButton.bind(runtime),\n    attachButton: runtime.attachButton.bind(runtime),\n    attachSmartButton: runtime.attachSmartButton.bind(runtime),\n    getPropensityModule: runtime.getPropensityModule.bind(runtime),\n    getLogger: runtime.getLogger.bind(runtime),\n    getEventManager: runtime.getEventManager.bind(runtime),\n    setShowcaseEntitlement: runtime.setShowcaseEntitlement.bind(runtime),\n  });\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getSubscriptionsClassForTesting() {\n  return Subscriptions;\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getFetcherClassForTesting() {\n  return Fetcher;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addQueryParam, parseQueryString, parseUrl} from '../utils/url';\n\n/**\n * Have to put these in the map to avoid compiler optimization. Due to\n * optimization issues, this map only allows property-style keys. E.g. \"hr1\",\n * as opposed to \"1hr\".\n * @type {!Object<string, number>}\n * @package Visible for testing only.\n */\nexport const CACHE_KEYS = {\n  'nocache': 1,\n  'hr1': 3600000, // 1hr = 1000 * 60 * 60\n  'hr12': 43200000, // 12hr = 1000 * 60 * 60 * 12\n};\n\n/**\n * @return {string}\n */\nexport function feOrigin() {\n  return parseUrl('$frontend$').origin;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function serviceUrl(url) {\n  return '$frontend$/swg/_/api/v1' + url;\n}\n\n/**\n * @param {string} url  Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function adsUrl(url) {\n  return '$adsServer$' + url;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/offersiframe\".\n * @param {string=} prefix\n * @return {string} The complete URL.\n */\nexport function feUrl(url, prefix = '') {\n  // Add cache param.\n  url = feCached('$frontend$' + prefix + '/swg/_/ui/v1' + url);\n\n  // Optionally add jsmode param. This allows us to test against \"aggressively\" compiled Boq JS.\n  const query = parseQueryString(self.location.hash);\n  const boqJsMode = query['swg.boqjsmode'];\n  if (boqJsMode !== undefined) {\n    url = addQueryParam(url, 'jsmode', boqJsMode);\n  }\n\n  return url;\n}\n\n/**\n * @param {string} url FE URL.\n * @return {string} The complete URL including cache param.\n */\nexport function feCached(url) {\n  return addQueryParam(url, '_', cacheParam('$frontendCache$'));\n}\n\n/**\n * @param {!Object<string, ?>} args\n * @return {!Object<string, ?>}\n */\nexport function feArgs(args) {\n  return Object.assign(args, {\n    '_client': 'SwG $internalRuntimeVersion$',\n  });\n}\n\n/**\n * @param {string} cacheKey\n * @return {string}\n * @package Visible for testing only.\n */\nexport function cacheParam(cacheKey) {\n  let period = CACHE_KEYS[cacheKey];\n  if (period == null) {\n    period = 1;\n  }\n  if (period === 0) {\n    return '_';\n  }\n  const now = Date.now();\n  return String(period <= 1 ? now : Math.floor(now / period));\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SmartBoxMessage} from '../proto/api_messages';\nimport {createElement} from '../utils/dom';\nimport {feArgs, feUrl} from './services';\nimport {setImportantStyles} from '../utils/style';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * @enum {string}\n */\nexport const Theme = {\n  LIGHT: 'light',\n  DARK: 'dark',\n};\n\n/**\n * The class for Smart button Api.\n */\nexport class SmartSubscriptionButtonApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {!../api/subscriptions.SmartButtonOptions} options\n   * @param {function()=} callback\n   */\n  constructor(deps, button, options, callback) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!Element} */\n    this.button_ = button;\n\n    /** @private {!../api/subscriptions.SmartButtonOptions} */\n    this.options_ = options;\n\n    /** @private const {function()=} */\n    this.callback_ = callback;\n\n    /** @private @const {string} */\n    this.src_ = feUrl('/smartboxiframe');\n\n    const frontendArguments = {\n      'productId': this.deps_.pageConfig().getProductId(),\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'theme': (this.options_ && this.options_.theme) || 'light',\n      'lang': (this.options_ && this.options_.lang) || 'en',\n    };\n    const messageTextColor = this.options_ && this.options_.messageTextColor;\n    if (messageTextColor) {\n      frontendArguments['messageTextColor'] = messageTextColor;\n    }\n\n    /** @private @const {!Object} */\n    this.args_ = feArgs(frontendArguments);\n  }\n\n  /**\n   * @param {SmartBoxMessage} smartBoxMessage\n   */\n  handleSmartBoxClick_(smartBoxMessage) {\n    if (smartBoxMessage && smartBoxMessage.getIsClicked()) {\n      if (!this.callback_) {\n        throw new Error('No callback!');\n      }\n      this.callback_();\n      return;\n    }\n  }\n\n  /**\n   * Make a call to build button content and listens for the 'click' message.\n   * @return {!Element}\n   */\n  start() {\n    setImportantStyles(this.iframe_, {\n      'opacity': 1,\n      'position': 'absolute',\n      'top': 0,\n      'bottom': 0,\n      'left': 0,\n      'height': '100%',\n      'right': 0,\n      'width': '100%',\n    });\n    this.button_.appendChild(this.iframe_);\n    const args = this.activityPorts_.addDefaultArguments(this.args_);\n    this.activityPorts_\n      .openIframe(this.iframe_, this.src_, args)\n      .then((port) => {\n        port.on(SmartBoxMessage, this.handleSmartBoxClick_.bind(this));\n      });\n    return this.iframe_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PREFIX = 'subscribe.google.com';\n\nexport class Storage {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, !Promise<?string>>} */\n    this.values_ = {};\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise<?string>}\n   */\n  get(key) {\n    if (!this.values_[key]) {\n      this.values_[key] = new Promise((resolve) => {\n        if (this.win_.sessionStorage) {\n          try {\n            resolve(this.win_.sessionStorage.getItem(storageKey(key)));\n          } catch (e) {\n            // Ignore error.\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    }\n    return this.values_[key];\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {!Promise}\n   */\n  set(key, value) {\n    this.values_[key] = Promise.resolve(value);\n    return new Promise((resolve) => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.setItem(storageKey(key), value);\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise}\n   */\n  remove(key) {\n    delete this.values_[key];\n    return new Promise((resolve) => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.removeItem(storageKey(key));\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n}\n\n/**\n * @param {string} key\n * @return {string}\n */\nfunction storageKey(key) {\n  return PREFIX + ':' + key;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {feArgs, feUrl} from './services';\n\nconst NO_PROMISE_ERR = 'No account promise provided';\n\nexport class WaitForSubscriptionLookupApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Promise} accountPromise\n   */\n  constructor(deps, accountPromise) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private {!Promise} */\n    this.accountPromise_ = accountPromise || Promise.reject(NO_PROMISE_ERR);\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/waitforsubscriptionlookupiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n      }),\n      /* shouldFadeBody */ true,\n      /* hasLoadingIndicator */ true\n    );\n  }\n\n  /**\n   * Starts the Login Flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.accountPromise_.then(\n      (account) => {\n        // Account was found.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return account;\n      },\n      (reason) => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Message} from '../proto/api_messages'; // eslint-disable-line no-unused-vars\nimport {View} from '../components/view';\nimport {acceptPortResultData} from '../utils/activity-utils';\nimport {createElement} from '../utils/dom';\nimport {isCancelError} from '../utils/errors';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * Class to build and render Activity iframe view.\n */\nexport class ActivityIframeView extends View {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {string} src\n   * @param {!Object<string, ?>=} args\n   * @param {boolean=} shouldFadeBody\n   * @param {boolean=} hasLoadingIndicator\n   */\n  constructor(\n    win,\n    activityPorts,\n    src,\n    args,\n    shouldFadeBody = false,\n    hasLoadingIndicator = false\n  ) {\n    super();\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args || {};\n\n    /** @private @const {boolean} */\n    this.shouldFadeBody_ = shouldFadeBody;\n\n    /** @private @const {boolean} */\n    this.hasLoadingIndicator_ = hasLoadingIndicator;\n\n    /** @private {?../components/activities.ActivityIframePort} */\n    this.port_ = null;\n\n    /**\n     * @private\n     * {?function<!web-activities/activity-ports.ActivityIframePort|!Promise>}\n     */\n    this.portResolver_ = null;\n\n    /**\n     * @private @const\n     * {!Promise<!web-activities/activity-ports.ActivityIframePort>}\n     */\n    this.portPromise_ = new Promise((resolve) => {\n      this.portResolver_ = resolve;\n    });\n  }\n\n  /** @override */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /** @override */\n  init(dialog) {\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then((port) => this.onOpenIframeResponse_(port, dialog));\n  }\n\n  /**\n   * Returns if document should fade for this view.\n   * @return {boolean}\n   */\n  shouldFadeBody() {\n    return this.shouldFadeBody_;\n  }\n\n  /**\n   * Returns if the view shows loading indicator.\n   * @return {boolean}\n   */\n  hasLoadingIndicator() {\n    return this.hasLoadingIndicator_;\n  }\n\n  /**\n   * @param {!../components/activities.ActivityIframePort} port\n   * @param {!../components/dialog.Dialog} dialog\n   * @return {!Promise}\n   */\n  onOpenIframeResponse_(port, dialog) {\n    this.port_ = port;\n    this.portResolver_(port);\n\n    this.port_.onResizeRequest((height) => {\n      dialog.resizeView(this, height);\n    });\n\n    return this.port_.whenReady();\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   * @private\n   */\n  getPortPromise_() {\n    return this.portPromise_;\n  }\n\n  /**\n   * @param {!function(new: T)}  message\n   * @param {function(../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    this.getPortPromise_().then((port) => {\n      port.on(message, callback);\n    });\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.getPortPromise_().then((port) => {\n      port.execute(request);\n    });\n  }\n\n  /**\n   * Accepts results from the caller.\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.getPortPromise_().then((port) => port.acceptResult());\n  }\n\n  /**\n   * Accepts results from the caller and verifies origin.\n   * @param {string} requireOrigin\n   * @param {boolean} requireOriginVerified\n   * @param {boolean} requireSecureChannel\n   * @return {!Promise<!Object>}\n   */\n  acceptResultAndVerify(\n    requireOrigin,\n    requireOriginVerified,\n    requireSecureChannel\n  ) {\n    return this.getPortPromise_().then((port) => {\n      return acceptPortResultData(\n        port,\n        requireOrigin,\n        requireOriginVerified,\n        requireSecureChannel\n      );\n    });\n  }\n\n  /**\n   * Completes the flow.\n   * @return {!Promise}\n   */\n  whenComplete() {\n    return this.acceptResult();\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  onCancel(callback) {\n    this.acceptResult().catch((reason) => {\n      if (isCancelError(reason)) {\n        callback();\n      }\n      throw reason;\n    });\n  }\n\n  /** @override */\n  resized() {\n    if (this.port_) {\n      this.port_.resized();\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\n\n/**\n * Loading indicator class. Builds the loading indicator view to be injected in\n * parent element <iframe class=\"swg-dialog\"> element. Provides methods to\n * show/hide loading indicator.\n */\nexport class LoadingView {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.loadingContainer_ = createElement(\n      this.doc_,\n      'swg-loading-container',\n      {}\n    );\n\n    /** @private @const {!Element} */\n    this.loading_ = createElement(this.doc_, 'swg-loading', {});\n    this.loadingContainer_.appendChild(this.loading_);\n\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n\n    // Build the animated loading indicator.\n    this.buildLoadingIndicator_();\n  }\n\n  /**\n   * Gets the populated loading container.\n   * @return {!Element}\n   */\n  getElement() {\n    return this.loadingContainer_;\n  }\n\n  /**\n   * Shows the loading indicator within the container element.\n   */\n  show() {\n    this.loadingContainer_.style.removeProperty('display');\n  }\n\n  /**\n   * Hides the loading indicator within the container element.\n   */\n  hide() {\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n  }\n\n  /**\n   * Populates the loading indivicator. The populated element\n   * can be added in any view, when required.\n   * @private\n   */\n  buildLoadingIndicator_() {\n    const loadingContainer = this.loading_;\n\n    const loadingIndicatorTopContainer = createElement(\n      this.doc_,\n      'swg-loading-animate',\n      {}\n    );\n    loadingContainer.appendChild(loadingIndicatorTopContainer);\n\n    const loadingIndicatorChildContainer = createElement(\n      this.doc_,\n      'swg-loading-image',\n      {}\n    );\n    loadingIndicatorTopContainer.appendChild(loadingIndicatorChildContainer);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\nimport {resetStyles, setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\n/** @const {!Object<string, string|number>} */\nexport const toastImportantStyles = {\n  'height': 0,\n};\n\n/** @typedef {{\n *    text: string,\n *    action: ({label: string, handler: function()}|undefined)\n *  }}\n */\nexport let ToastSpecDef;\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n  'class': 'swg-toast',\n};\n\n/**\n * The class Notification toast.\n */\nexport class Toast {\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   * @param {string} src\n   * @param {!Object<string, ?>} args\n   */\n  constructor(deps, src, args) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      iframeAttributes\n    ));\n\n    setImportantStyles(this.iframe_, toastImportantStyles);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise((resolve) => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * Returns the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Opens the notification toast.\n   * @return {!Promise}\n   */\n  open() {\n    this.doc_.getBody().appendChild(this.iframe_); // Fires onload.\n    return this.buildToast_();\n  }\n\n  /**\n   * Builds the content of the iframe. On load, animates the toast.\n   */\n  buildToast_() {\n    const toastDurationSeconds = 7;\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then((port) => {\n        return port.whenReady();\n      })\n      .then(() => {\n        resetStyles(this.iframe_, ['height']);\n\n        this.animate_(() => {\n          setImportantStyles(this.iframe_, {\n            'transform': 'translateY(100%)',\n            'opactiy': 1,\n            'visibility': 'visible',\n          });\n          return transition(\n            this.iframe_,\n            {\n              'transform': 'translateY(0)',\n              'opacity': 1,\n              'visibility': 'visible',\n            },\n            400,\n            'ease-out'\n          );\n        });\n\n        // Close the Toast after the specified duration.\n        this.doc_.getWin().setTimeout(() => {\n          this.close();\n        }, (toastDurationSeconds + 1) * 1000);\n      });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Closes the toast.\n   * @return {!Promise}\n   */\n  close() {\n    return this.animate_(() => {\n      // Remove the toast from the DOM after animation is complete.\n      this.doc_.getWin().setTimeout(() => {\n        this.doc_.getBody().removeChild(this.iframe_);\n        return Promise.resolve();\n      }, 500);\n\n      return transition(\n        this.iframe_,\n        {\n          'transform': 'translateY(100%)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        400,\n        'ease-out'\n      );\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!../components/activities.ActivityPortDef} port\n * @param {string} requireOrigin\n * @param {boolean} requireOriginVerified\n * @param {boolean} requireSecureChannel\n * @return {!Promise<!Object>}\n */\nexport function acceptPortResultData(\n  port,\n  requireOrigin,\n  requireOriginVerified,\n  requireSecureChannel\n) {\n  return port.acceptResult().then((result) => {\n    if (\n      result.origin != requireOrigin ||\n      (requireOriginVerified && !result.originVerified) ||\n      (requireSecureChannel && !result.secureChannel)\n    ) {\n      throw new Error('channel mismatch');\n    }\n    return result.data;\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from './style';\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nexport function transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise((resolve) => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(\n        el,\n        Object.assign(\n          {\n            'transition': `transform ${tr}, opacity ${tr}`,\n          },\n          props\n        )\n      );\n    });\n  }).then(() => {\n    setImportantStyles(el, {\n      'transition': previousTransitionValue,\n    });\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_'};\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function utf8DecodeSync(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8EncodeSync(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, (ch) => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/]/g, (ch) => base64UrlEncodeSubs[ch]);\n}\n","/**\n * Copyright 2020 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Timestamp} from '../proto/api_messages';\n\n/**\n * @param {!number} millis\n * @return {!Timestamp}\n */\nexport function toTimestamp(millis) {\n  return new Timestamp(\n    [Math.floor(millis / 1000), (millis % 1000) * 1000000],\n    false\n  );\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Whether the document has loaded all the css and sub-resources.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentComplete(doc) {\n  return getReadyState(doc) == 'complete';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nexport function onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback once when document's state satisfies the condition.\n * @param {!Document} doc\n * @param {function(!Document):boolean} condition\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, condition, callback) {\n  if (condition(doc)) {\n    // Execute callback right now.\n    callback(doc);\n    return;\n  }\n\n  // Execute callback (once!) after condition is satisfied.\n  let callbackHasExecuted = false;\n  const readyListener = () => {\n    if (condition(doc) && !callbackHasExecuted) {\n      callback(doc);\n      callbackHasExecuted = true;\n      doc.removeEventListener('readystatechange', readyListener);\n    }\n  };\n  doc.addEventListener('readystatechange', readyListener);\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentReady(doc) {\n  return new Promise((resolve) => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Returns a promise that is resolved when document is complete.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentComplete(doc) {\n  return new Promise((resolve) => {\n    onDocumentState(doc, isDocumentComplete, resolve);\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {setStyles} from './style';\n\n/** @const @enum{string} */\nexport const styleLinkAttrs = {\n  'rel': 'stylesheet',\n  'type': 'text/css',\n};\n\n/** @const {string} */\nexport const styleType = 'text/css';\n\n/** @const {string} */\nexport const styleExistsQuerySelector = 'link[rel=stylesheet][href]';\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!Object<string, string|number|boolean|!Object<string, string|number|boolean>>} attributes\n * @return {!Element} updated element.\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    if (attr == 'style') {\n      setStyles(\n        element,\n        /** @type {!Object<string, string|boolean|number>} */\n        (attributes[attr])\n      );\n    } else {\n      element.setAttribute(\n        attr,\n        /** @type {string|boolean|number} */ (attributes[attr])\n      );\n    }\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!Object<string, string>} attributes\n * @param {?(string|!Node|!ArrayLike<!Node>|!Array<!Node>)=} content\n * @return {!Element} created element.\n */\nexport function createElement(doc, tagName, attributes, content) {\n  const element = doc.createElement(tagName);\n  addAttributesToElement(element, attributes);\n  if (content != null) {\n    if (typeof content == 'string') {\n      element.textContent = content;\n    } else if (content.nodeType) {\n      element.appendChild(content);\n    } else if ('length' in content) {\n      for (let i = 0; i < content.length; i++) {\n        element.appendChild(content[i]);\n      }\n    } else {\n      assert(false, 'Unsupported content: %s', content);\n    }\n  }\n  return element;\n}\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n/**\n * Removes all children from the parent element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  parent.textContent = '';\n}\n\n/**\n * Injects the provided styles in the HEAD section of the document.\n * @param {!../model/doc.Doc} doc The document object.\n * @param {string} styleText The style string.\n * @return {!Element}\n */\nexport function injectStyleSheet(doc, styleText) {\n  const styleElement = createElement(doc.getWin().document, 'style', {\n    'type': styleType,\n  });\n  styleElement.textContent = styleText;\n  doc.getHead().appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node=} stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while (\n    (currentElement = currentElement.parentNode) &&\n    currentElement != stopNode\n  );\n  return false;\n}\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nexport function isConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n/**\n * Returns true if current browser is a legacy version of Edge.\n *\n * Starting in January 2020, new versions of Edge will use the Chromium engine.\n * These versions won't include the word \"Edge\" in their useragent.\n * Instead, they'll include the word \"Edg\".\n * So far, it seems safe to avoid detecting these new versions of Edge.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isLegacyEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n","/**\n * Copyright 2020 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const AMP_USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error}\n */\nfunction duplicateErrorIfNecessary(error) {\n  const messageProperty = Object.getOwnPropertyDescriptor(error, 'message');\n  if (messageProperty && messageProperty.writable) {\n    return error;\n  }\n\n  const {message, stack} = error;\n  const e = new Error(message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n */\nfunction createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n/** Helper class for throwing standardized errors. */\nexport class ErrorLogger {\n  /**\n   * Constructor.\n   *\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {string=} opt_suffix\n   */\n  constructor(opt_suffix = '') {\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix;\n  }\n\n  /**\n   * Modifies an error before reporting, such as to add metadata.\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) === -1) {\n        error.message = this.suffix_;\n      }\n    }\n  }\n\n  /**\n   * Creates an error.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(\n      null,\n      Array.prototype.slice.call(arguments)\n    );\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true. Used for\n   * expected failure states (ex. incorrect configuration, localStorage\n   * unavailable due to browser settings, etc.) as opposed to unexpected\n   * breakages/failures.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(\n      null,\n      Array.prototype.slice.call(arguments)\n    );\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error.\n   * @param {...*} var_args\n   * @throws {!Error}\n   */\n  error(var_args) {\n    throw this.createError.apply(this, arguments);\n  }\n\n  /**\n   * Throws an error and marks with an expected property.\n   * @param {...*} var_args\n   * @throws {!Error}\n   */\n  expectedError(var_args) {\n    throw this.createExpectedError.apply(this, arguments);\n  }\n}\n\nconst userLogger = new ErrorLogger(\n  self.__AMP_TOP ? AMP_USER_ERROR_SENTINEL : ''\n);\nconst devLogger = new ErrorLogger();\n\nexport const user = () => userLogger;\nexport const dev = () => devLogger;\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createAbortError, isAbortError} from 'web-activities/activity-ports';\n\n/**\n * Whether the specified error is an AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {*} error\n * @return {boolean}\n */\nexport function isCancelError(error) {\n  return isAbortError(error);\n}\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} message\n * @return {!DOMException}\n */\nexport function createCancelError(win, message) {\n  return createAbortError(win, message);\n}\n\n/**\n * A set of error utilities combined in a class to allow easy stubbing in tests.\n */\nexport class ErrorUtils {\n  /**\n   * @param {!Error} error\n   */\n  static throwAsync(error) {\n    setTimeout(() => {\n      throw error;\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** English is the default language. */\nconst DEFAULT_LANGUAGE_CODE = 'en';\n\n/**\n * Gets a message for a given language code, from a map of messages.\n * @param {!Object<string, string>} map\n * @param {?string|?Element} languageCodeOrElement\n * @return {?string}\n */\nexport function msg(map, languageCodeOrElement) {\n  const defaultMsg = map[DEFAULT_LANGUAGE_CODE];\n\n  // Verify params.\n  if (typeof map !== 'object' || !languageCodeOrElement) {\n    return defaultMsg;\n  }\n\n  // Get language code.\n  let languageCode =\n    typeof languageCodeOrElement === 'string'\n      ? languageCodeOrElement\n      : getLanguageCodeFromElement(languageCodeOrElement);\n\n  // Normalize language code.\n  languageCode = languageCode.toLowerCase();\n  languageCode = languageCode.replace(/_/g, '-');\n\n  // Search for a message matching the language code.\n  // If a message can't be found, try again with a less specific language code.\n  const languageCodeSegments = languageCode.split('-');\n  while (languageCodeSegments.length) {\n    const key = languageCodeSegments.join('-');\n    if (key in map) {\n      return map[key];\n    }\n\n    // Simplify language code.\n    // Ex: \"en-US-SF\" => \"en-US\"\n    languageCodeSegments.pop();\n  }\n\n  // There was an attempt.\n  return defaultMsg;\n}\n\n/**\n * Gets a language code (ex: \"en-US\") from a given Element.\n * @param {!Element} element\n * @return {string}\n */\nfunction getLanguageCodeFromElement(element) {\n  if (element.lang) {\n    // Get language from element itself.\n    return element.lang;\n  }\n\n  if (element.ownerDocument && element.ownerDocument.documentElement.lang) {\n    // Get language from element's document.\n    return element.ownerDocument.documentElement.lang;\n  }\n\n  // There was an attempt.\n  return DEFAULT_LANGUAGE_CODE;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (onFailed) {\n      onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Converts the passed string into a JSON object (if possible) and returns the\n * value of the propertyName on that object.\n * @param {string} jsonString\n * @param {string} propertyName\n * @return {*}\n */\nexport function getPropertyFromJsonString(jsonString, propertyName) {\n  const json = tryParseJson(jsonString);\n  return (json && json[propertyName]) || null;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {base64UrlDecodeToBytes, utf8DecodeSync} from './bytes';\nimport {tryParseJson} from './json';\n\n/**\n * @typedef {{\n *   header: (?JsonObject|undefined),\n *   payload: (?JsonObject|undefined),\n *   verifiable: string,\n *   sig: string,\n * }}\n */\nlet JwtTokenInternalDef;\n\n/**\n * Provides helper methods to decode and verify JWT tokens.\n */\nexport class JwtHelper {\n  constructor() {}\n\n  /**\n   * Decodes JWT token and returns its payload.\n   * @param {string} encodedToken\n   * @return {?JsonObject|undefined}\n   */\n  decode(encodedToken) {\n    return this.decodeInternal_(encodedToken).payload;\n  }\n\n  /**\n   * @param {string} encodedToken\n   * @return {!JwtTokenInternalDef}\n   * @private\n   */\n  decodeInternal_(encodedToken) {\n    // See https://jwt.io/introduction/\n    /**\n     * Throws error about invalid token.\n     */\n    function invalidToken() {\n      throw new Error(`Invalid token: \"${encodedToken}\"`);\n    }\n\n    // Encoded token has three parts: header.payload.sig\n    // Note! The padding is not allowed by JWT spec:\n    // http://self-issued.info/docs/draft-goland-json-web-token-00.html#rfc.section.5\n    const parts = encodedToken.split('.');\n    if (parts.length != 3) {\n      invalidToken();\n    }\n    const headerUtf8Bytes = base64UrlDecodeToBytes(parts[0]);\n    const payloadUtf8Bytes = base64UrlDecodeToBytes(parts[1]);\n    return {\n      header: tryParseJson(utf8DecodeSync(headerUtf8Bytes), invalidToken),\n      payload: tryParseJson(utf8DecodeSync(payloadUtf8Bytes), invalidToken),\n      verifiable: `${parts[0]}.${parts[1]}`,\n      sig: parts[2],\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Debug logger, only log message if #swg.log=1\n * @param {...*} var_args [decription]\n */\n\n/* eslint-disable */\n\nfunction debugLog(var_args) {\n  if (/swg.debug=1/.test(self.location.hash)) {\n    const logArgs = Array.prototype.slice.call(arguments, 0);\n    logArgs.unshift('[Subscriptions]');\n    log.apply(log, logArgs);\n  }\n}\n\n/**\n * @param  {...*} var_args [description]\n */\nfunction log(var_args) {\n  console.log.apply(console, arguments);\n}\n\n/**\n * @param  {...*} var_args [description]\n */\nfunction warn(var_args) {\n  console.warn.apply(console, arguments);\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {string=} message The assertion message\n * @param {...*} var_args Arguments substituted into %s in the message.\n * @return {T} The value of shouldBeTrueish.\n * @template T\n */\nfunction assert(shouldBeTrueish, message, var_args) {\n  let firstElement;\n  if (!shouldBeTrueish) {\n    message = message || 'Assertion failed';\n    const splitMessage = message.split('%s');\n    const first = splitMessage.shift();\n    let formatted = first;\n    const messageArray = [];\n    pushIfNonEmpty(messageArray, first);\n    for (let i = 2; i < arguments.length; i++) {\n      const val = arguments[i];\n      if (val && val.tagName) {\n        firstElement = val;\n      }\n      const nextConstant = splitMessage.shift();\n      messageArray.push(val);\n      pushIfNonEmpty(messageArray, nextConstant.trim());\n      formatted += toString(val) + nextConstant;\n    }\n    const e = new Error(formatted);\n    e.fromAssert = true;\n    e.associatedElement = firstElement;\n    e.messageArray = messageArray;\n    throw e;\n  }\n  return shouldBeTrueish;\n}\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\nmodule.exports = {\n  assert,\n  debugLog,\n  warn,\n  log\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a map-like object.\n * If initial is provided, copies its own properties into the\n * newly created object.\n * @param {Object=} initial This should typically be an object literal.\n * @return {!Object}\n * @template T\n */\nexport function map(initial) {\n  const obj = Object.create(null);\n  if (initial) {\n    Object.assign(obj, initial);\n  }\n  return obj;\n}\n\n/**\n * Implements `Array.find()` method that's not yet available in all browsers.\n *\n * @param {?Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {?T}\n * @template T\n */\nexport function findInArray(array, predicate) {\n  if (!array) {\n    return null;\n  }\n  const len = array.length || 0;\n  if (len > 0) {\n    for (let i = 0; i < len; i++) {\n      const other = array[i];\n      if (predicate(other, i, array)) {\n        return other;\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from './dom';\n\nexport class Preconnect {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @param {string} url\n   */\n  preconnect(url) {\n    this.pre_(url, 'preconnect');\n  }\n\n  /**\n   * @param {string} url\n   */\n  dnsPrefetch(url) {\n    this.pre_(url, 'dns-prefetch');\n  }\n\n  /**\n   * @param {string} url\n   */\n  prefetch(url) {\n    this.pre_(url, 'preconnect prefetch');\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} as\n   */\n  preload(url, as) {\n    this.pre_(url, 'preconnect preload', as);\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} rel\n   * @param {?string=} as\n   * @private\n   */\n  pre_(url, rel, as) {\n    // <link rel=\"prefetch\" href=\"...\" as=\"\">\n    const linkEl = createElement(this.doc_, 'link', {\n      'rel': rel,\n      'href': url,\n    });\n    if (as) {\n      linkEl.setAttribute('as', as);\n    }\n    this.doc_.head.appendChild(linkEl);\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an array of random values.  The length of the array is numInts.  Each\n * int will be >= 0 and < maxVal.\n * @param {!number} numInts\n * @param {!number} maxVal\n */\nexport function getRandomInts(numInts, maxVal) {\n  // Ensure array type is appropriate for the max value (performance)\n  const arr =\n    maxVal < 256\n      ? new Uint8Array(numInts)\n      : maxVal < 32768\n      ? new Uint16Array(numInts)\n      : new Uint32Array(numInts);\n\n  const isIE = !!self['msCrypto'];\n  const localCrypto = isIE ? self['msCrypto'] : self.crypto;\n  if (localCrypto && localCrypto.getRandomValues) {\n    localCrypto.getRandomValues(arr);\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = arr[i] % maxVal;\n    }\n  } else {\n    // For older browsers\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = Math.floor(Math.random() * maxVal);\n    }\n  }\n\n  return arr;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getRandomInts} from './random';\nimport {utf8EncodeSync} from './bytes';\n\nconst CHARS = '0123456789ABCDEF';\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes removed and character after to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {!function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, maxIterations = 1) {\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const length = str.length;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n\n/**\n * Ensures the passed value is safe to use for character 19 per rfc4122,\n * sec. 4.1.5.  \"Sets the high bits of clock sequence\".\n * @param {!number} v\n */\nfunction getChar19(v) {\n  return CHARS[(v & 0x3) | 0x8];\n}\n\n/**\n * The returned identifier will always be an 8 digit valid hexidecimal number\n * and will be unique for each MS within a given month.\n * @return {string}\n */\nfunction getMonthlyTimeIdentifier() {\n  const hexTime = Date.now().toString(16);\n  return hexTime.substring(hexTime.length - 8).toUpperCase();\n}\n\n/**\n * Generates a RFC 4122 V4 UUID. Ex: \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n * The first 8 digits are unique for the millisecond of the month.  The rest\n * are randomly generated.\n */\nexport function getUuid() {\n  let uuid = getMonthlyTimeIdentifier() + '-';\n  let rIndex = 0;\n  const rands = getRandomInts(23, 16);\n  for (let i = 9; i < 36; i++) {\n    switch (i) {\n      case 13:\n      case 18:\n      case 23:\n        uuid += '-';\n        break;\n      case 14:\n        uuid += '4';\n        break;\n      case 19:\n        uuid += getChar19(rands[rIndex++]);\n        break;\n      default:\n        uuid += CHARS[rands[rIndex++]];\n        break;\n    }\n  }\n  return uuid;\n}\n\nexport function getSwgTransactionId() {\n  return getUuid() + '.swg';\n}\n\n/**\n * Returns a string whose length matches the length of format.\n * @param {string} str\n * @param {string} format\n * @return {string}\n */\nfunction padString(str, format) {\n  return (format + str).slice(-format.length);\n}\n\nconst PADDING = '00000000';\nfunction toHex(buffer) {\n  const hexCodes = [];\n  const view = new DataView(buffer);\n  for (let i = 0; i < view.byteLength; i += 4) {\n    // toString(16) will give the hex representation of the number without padding\n    const stringValue = view.getUint32(i).toString(16);\n    hexCodes.push(padString(stringValue, PADDING));\n  }\n  return hexCodes.join('');\n}\n\n/**\n * Returns a hexadecimal 128 character string that is the\n * SHA-512 hash of the passed string.\n * @param {string} stringToHash\n * @return {!Promise<string>}\n */\nexport function hash(stringToHash) {\n  const crypto = self.crypto || self.msCrypto;\n  const subtle = crypto.subtle;\n  return subtle\n    .digest('SHA-512', utf8EncodeSync(stringToHash))\n    .then((digest) => toHex(digest));\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './object.js';\nimport {startsWith} from './string';\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n/**\n * Default styles to be set for top level friendly iframe.\n * Some attributes are not included such as height, left, margin-left; since\n * these attributes are updated by @media queries and having these values\n * defined here as !important does not work on IE/edge browsers.\n * @const {!Object<string, string|number>}\n */\nexport const defaultStyles = {\n  'align-content': 'normal',\n  'animation': 'none',\n  'align-items': 'normal',\n  'align-self': 'auto',\n  'alignment-baseline': 'auto',\n  'backface-visibility': 'hidden',\n  'background-clip': 'border-box',\n  'background-image': 'none',\n  'baseline-shift': '0',\n  'block-size': 'auto',\n  'border': 'none',\n  'border-collapse': 'separate',\n  'bottom': '0',\n  'box-sizing': 'border-box',\n  'break-after': 'auto',\n  'break-before': 'auto',\n  'break-inside': 'auto',\n  'buffered-rendering': 'auto',\n  'caption-side': 'top',\n  'caret-color': 'rgb(51, 51, 51)',\n  'clear': 'none',\n  'color': 'rgb(51, 51, 51)',\n  'color-rendering': 'auto',\n  'column-count': 'auto',\n  'column-fill': 'balance',\n  'column-gap': 'normal',\n  'column-rule-color': 'rgb(51, 51, 51)',\n  'column-rule-style': 'none',\n  'column-rule-width': '0',\n  'column-span': 'none',\n  'column-width': 'auto',\n  'contain': 'none',\n  'counter-increment': 'none',\n  'counter-reset': 'none',\n  'cursor': 'auto',\n  'direction': 'inherit',\n  'display': 'block',\n  'empty-cells': 'show',\n  'filter': 'none',\n  'flex': 'none', // flex-grow, flex-shrink, and flex-basis.\n  'flex-flow': 'row nowrap', // flex-direction, flex-wrap.\n  'float': 'none',\n  'flood-color': 'rgb(0, 0, 0)',\n  'flood-opacity': '1',\n  'font': 'none',\n  'font-size': 'medium',\n  'font-family': '',\n  'height': 'auto',\n  'hyphens': 'manual',\n  'image-rendering': 'auto',\n  'inline-size': '', // Setting to 'auto' will not allow override.\n  'isolation': 'auto',\n  'justify-content': 'normal',\n  'justify-items': 'normal',\n  'justify-self': 'auto',\n  'letter-spacing': 'normal',\n  'lighting-color': 'rgb(255, 255, 255)',\n  'line-break': 'auto',\n  'line-height': 'normal',\n  'mask': 'none',\n  'max-block-size': 'none',\n  'max-height': 'none',\n  'max-inline-size': 'none',\n  'max-width': 'none',\n  'min-block-size': 'none',\n  'min-height': '0',\n  'min-inline-size': '0',\n  'min-width': '0',\n  'mix-blend-mode': 'normal',\n  'object-fit': 'fill', // Important for Safari browser.\n  'offset-distance': 'none', // Chrome only (Experimental).\n  'offset-path': 'none', // Chrome only (Experimental).\n  'offset-rotate': 'auto 0deg', // Chrome only (Experimental).\n  'opacity': '1',\n  'order': '0',\n  'orphans': '2',\n  'outline': 'none',\n  'overflow-anchor': 'auto',\n  'overflow-wrap': 'normal',\n  'overflow': 'visible',\n  'padding': '0',\n  'page': '',\n  'perspective': 'none',\n  'pointer-events': 'auto',\n  'position': 'static',\n  'quotes': '',\n  'resize': 'none',\n  'right': '0',\n  'scroll-behavior': 'auto',\n  'tab-size': '8', // Only Chrome, Safari (Experimental).\n  'table-layout': 'auto',\n  'text-align': 'start',\n  'text-align-last': 'auto',\n  'text-anchor': 'start',\n  'text-combine-upright': 'none',\n  'text-decoration': 'none',\n  'text-indent': '0',\n  'text-orientation': 'mixed',\n  'text-overflow': 'clip',\n  'text-rendering': 'auto',\n  'text-shadow': 'none',\n  'text-size-adjust': 'auto',\n  'text-transform': 'none',\n  'text-underline-position': 'auto',\n  'top': 'auto',\n  'touch-action': 'auto',\n  'transform': 'none',\n  'transition': 'none 0s ease 0s',\n  'unicode-bidi': 'normal',\n  'user-select': 'auto',\n  'vector-effect': 'none',\n  'vertical-align': 'baseline',\n  'visibility': 'visible',\n  'white-space': 'normal',\n  'widows': '2',\n  'word-break': 'normal',\n  'word-spacing': '0',\n  'word-wrap': 'normal',\n  'writing-mode': 'horizontal-tb',\n  'zoom': '1',\n  'z-index': 'auto',\n};\n\n/** @const {string} */\nexport const googleFontsUrl =\n  'https://fonts.googleapis.com/css?family=Google+Sans';\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n      getVendorJsPropertyName(styles, k),\n      styles[k].toString(),\n      'important'\n    );\n  }\n}\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {Element} element\n * @param {string} property\n * @param {?string|number|boolean} value\n * @param {string=} units\n * @param {boolean=} bypassCache\n */\nexport function setStyle(element, property, value, units, bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    bypassCache\n  );\n  if (propertyName) {\n    element.style[propertyName] = /** @type {string} */ (units\n      ? value + units\n      : value);\n  }\n}\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    bypassCache\n  );\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, ?string|number|boolean>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} display\n */\nexport function toggle(element, display) {\n  if (display === undefined) {\n    display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', display ? '' : 'none');\n}\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return value + 'px';\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} y\n * @return {string}\n */\nexport function translate(x, y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof y == 'number') {\n    y = px(y);\n  }\n  return `translate(${x}, ${y})`;\n}\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n    /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g,\n    '($1,$2,$3, 1)'\n  );\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */ (win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */ (style) || map();\n}\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach((prop) => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n\n/**\n * Resets all the styles of an element to a given value. Defaults to null.\n * The valid values are 'inherit', 'initial', 'unset' or null.\n * @param {!Element} element\n */\nexport function resetAllStyles(element) {\n  setImportantStyles(element, defaultStyles);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  const str = Object.prototype.toString.call(value);\n  return str === '[object Object]';\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * True if the value is a function.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\n * True if the value is either true or false.\n * @param {?*} value\n * @return {boolean}\n */\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {warn} from './log';\n\n/**\n  @typedef {{\n    href: string,\n    protocol: string,\n    host: string,\n    hostname: string,\n    port: string,\n    pathname: string,\n    search: string,\n    hash: string,\n    origin: string,\n  }}\n  */\nlet LocationDef;\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {Object<string, !LocationDef>}\n */\nlet cache;\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (Array.isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @return {!LocationDef}\n */\nexport function parseUrl(url) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = Object.create(null));\n  }\n\n  const fromCache = cache[url];\n  if (fromCache) {\n    return fromCache;\n  }\n\n  const info = parseUrlWithA(a, url);\n\n  return (cache[url] = info);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @return {!LocationDef}\n */\nfunction parseUrlWithA(a, url) {\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  /** @type {!LocationDef} */\n  const info = {\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: '', // Set below.\n  };\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if (\n    (info.protocol == 'http:' && info.port == 80) ||\n    (info.protocol == 'https:' && info.port == 443)\n  ) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n  return info;\n}\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nexport function parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n    .split('&')\n    .reduce((params, param) => {\n      const item = param.split('=');\n      try {\n        const key = decodeURIComponent(item[0] || '');\n        const value = decodeURIComponent(item[1] || '');\n        if (key) {\n          params[key] = value;\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        warn(`SwG could not parse a URL query param: ${item[0]}`);\n      }\n      return params;\n    }, {});\n}\n\n/**\n * Adds a parameter to a query string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nexport function addQueryParam(url, param, value) {\n  const queryIndex = url.indexOf('?');\n  const fragmentIndex = url.indexOf('#');\n  let fragment = '';\n  if (fragmentIndex != -1) {\n    fragment = url.substring(fragmentIndex);\n    url = url.substring(0, fragmentIndex);\n  }\n  if (queryIndex == -1) {\n    url += '?';\n  } else if (queryIndex < url.length - 1) {\n    url += '&';\n  }\n  url += encodeURIComponent(param) + '=' + encodeURIComponent(value);\n  return url + fragment;\n}\n\n/**\n * @param {!../proto/api_messages.Message} message\n * @return {string}\n */\nexport function serializeProtoMessageForUrl(message) {\n  return JSON.stringify(/** @type {JsonObject} */ (message.toArray(false)));\n}\n\n/**\n * Returns the Url including the path and search, without fregment.\n * @param {string} url\n * @return {string}\n */\nexport function getHostUrl(url) {\n  const locationHref = parseUrl(url);\n  return locationHref.origin + locationHref.pathname + locationHref.search;\n}\n\n/**\n * @param {!../model/doc.Doc} doc\n * @return {string}\n */\nexport function getCanonicalUrl(doc) {\n  const node = doc.getRootNode().querySelector(\"link[rel='canonical']\");\n  return (node && node.href) || '';\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {parseJson} from './json';\nimport {parseUrl} from './url';\nimport {utf8EncodeSync} from './bytes';\n\n/**\n * The \"init\" argument of the Fetch API. Currently, only \"credentials: include\"\n * is implemented.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * @typedef {{\n *   body: (!FormData|string|undefined),\n *   credentials: (string|undefined),\n *   headers: (!Object|undefined),\n *   method: (string|undefined),\n *   responseType: (string)\n * }}\n */\nexport let FetchInitDef;\n\n/** @private @const {!Array<string>} */\nconst allowedMethods_ = ['GET', 'POST'];\n\n/** @private @enum {number} Allowed fetch responses. */\nconst allowedFetchTypes_ = {\n  document: 1,\n  text: 2,\n};\n\n/**\n * A class that polyfills Fetch API.\n */\nexport class Xhr {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Window} */\n    this.win = win;\n  }\n\n  /**\n   * We want to call `fetch_` unbound from any context since it could\n   * be either the native fetch or our polyfill.\n   *\n   * @param {string} input\n   * @param {!FetchInitDef} init\n   * @return {!Promise<!FetchResponse>|!Promise<!Response>}\n   * @private\n   */\n  fetch_(input, init) {\n    // TODO(avimehta): Should the requests go through when page is not visible?\n    assert(typeof input == 'string', 'Only URL supported: %s', input);\n    // In particular, Firefox does not tolerate `null` values for\n    // `credentials`.\n    const creds = init.credentials;\n    assert(\n      creds === undefined || creds == 'include' || creds == 'omit',\n      'Only credentials=include|omit support: %s',\n      creds\n    );\n    // Fallback to xhr polyfill since `fetch` api does not support\n    // responseType = 'document'. We do this so we don't have to do any parsing\n    // and document construction on the UI thread which would be expensive.\n    if (init.responseType == 'document') {\n      return fetchPolyfill(input, init);\n    }\n    return (this.win.fetch || fetchPolyfill).apply(null, arguments);\n  }\n\n  /**\n   * @param {string} input URL\n   * @param {?FetchInitDef} init Fetch options object.\n   * @return {!Promise<!FetchResponse>}\n   */\n  fetch(input, init) {\n    // TODO (avimehta): Figure out if CORS needs be handled the way AMP does it.\n    init = setupInit(init);\n    return this.fetch_(input, init)\n      .then(\n        (response) => response,\n        (reason) => {\n          const targetOrigin = parseUrl(input).origin;\n          throw new Error(\n            `XHR Failed fetching (${targetOrigin}/...):`,\n            reason && reason.message\n          );\n        }\n      )\n      .then((response) => assertSuccess(response));\n  }\n}\n\n/**\n * Normalized method name by uppercasing.\n * @param {string|undefined} method\n * @return {string}\n * @private\n */\nfunction normalizeMethod_(method) {\n  if (method === undefined) {\n    return 'GET';\n  }\n  method = method.toUpperCase();\n\n  assert(\n    allowedMethods_.includes(method),\n    'Only one of %s is currently allowed. Got %s',\n    allowedMethods_.join(', '),\n    method\n  );\n\n  return method;\n}\n\n/**\n * Sets up and normalizes the FetchInitDef\n *\n * @param {?FetchInitDef=} init Fetch options object.\n * @param {string=} accept The HTTP Accept header value.\n * @return {!FetchInitDef}\n */\nfunction setupInit(init, accept) {\n  init = init || /** @type {FetchInitDef} */ ({});\n  init.method = normalizeMethod_(init.method);\n  init.headers = init.headers || {};\n  if (accept) {\n    init.headers['Accept'] = accept;\n  }\n  return init;\n}\n\n/**\n * A minimal polyfill of Fetch API. It only polyfills what we currently use.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * Notice that the \"fetch\" method itself is not exported as that would require\n * us to immediately support a much wide API.\n *\n * @param {string} input\n * @param {!FetchInitDef} init\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function fetchPolyfill(input, init) {\n  return new Promise(function (resolve, reject) {\n    const xhr = createXhrRequest(init.method || 'GET', input);\n\n    if (init.credentials == 'include') {\n      xhr.withCredentials = true;\n    }\n\n    if (init.responseType in allowedFetchTypes_) {\n      xhr.responseType = init.responseType;\n    }\n\n    if (init.headers) {\n      Object.keys(init.headers).forEach(function (header) {\n        xhr.setRequestHeader(header, init.headers[header]);\n      });\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n        return;\n      }\n      if (xhr.status < 100 || xhr.status > 599) {\n        xhr.onreadystatechange = null;\n        reject(new Error(`Unknown HTTP status ${xhr.status}`));\n        return;\n      }\n\n      // TODO(dvoytenko): This is currently simplified: we will wait for the\n      // whole document loading to complete. This is fine for the use cases\n      // we have now, but may need to be reimplemented later.\n      if (xhr.readyState == /* COMPLETE */ 4) {\n        resolve(new FetchResponse(xhr));\n      }\n    };\n    xhr.onerror = () => {\n      reject(new Error('Network failure'));\n    };\n    xhr.onabort = () => {\n      reject(new Error('Request aborted'));\n    };\n\n    if (init.method == 'POST') {\n      xhr.send(init.body);\n    } else {\n      xhr.send();\n    }\n  });\n}\n\n/**\n * @param {string} method\n * @param {string} url\n * @return {!XMLHttpRequest}\n * @private\n */\nfunction createXhrRequest(method, url) {\n  const xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else {\n    throw new Error('CORS is not supported');\n  }\n  return xhr;\n}\n\n/**\n * If 415 or in the 5xx range.\n * @param {number} status\n */\nfunction isRetriable(status) {\n  return status == 415 || (status >= 500 && status < 600);\n}\n\n/**\n * Returns the response if successful or otherwise throws an error.\n * @param {!FetchResponse} response\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function assertSuccess(response) {\n  return new Promise((resolve) => {\n    if (response.ok) {\n      return resolve(response);\n    }\n\n    const {status} = response;\n    const err = new Error(`HTTP error ${status}`);\n    err.retriable = isRetriable(status);\n    // TODO(@jridgewell, #9448): Callers who need the response should\n    // skip processing.\n    err.response = response;\n    throw err;\n  });\n}\n\n/**\n * Response object in the Fetch API.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n */\nexport class FetchResponse {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n\n    /** @const {number} */\n    this.status = this.xhr_.status;\n\n    /** @const {boolean} */\n    this.ok = this.status >= 200 && this.status < 300;\n\n    /** @const {!FetchResponseHeaders} */\n    this.headers = new FetchResponseHeaders(xhr);\n\n    /** @type {boolean} */\n    this.bodyUsed = false;\n\n    /** @type {?ReadableStream} */\n    this.body = null;\n  }\n\n  /**\n   * Create a copy of the response and return it.\n   * @return {!FetchResponse}\n   */\n  clone() {\n    assert(!this.bodyUsed, 'Body already used');\n    return new FetchResponse(this.xhr_);\n  }\n\n  /**\n   * Drains the response and returns the text.\n   * @return {!Promise<string>}\n   * @private\n   */\n  drainText_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    return Promise.resolve(this.xhr_.responseText);\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * text.\n   * @return {!Promise<string>}\n   */\n  text() {\n    return this.drainText_();\n  }\n\n  /**\n   * Drains the response and returns the JSON object.\n   * @return {!Promise<!JsonObject>}\n   */\n  json() {\n    return /** @type {!Promise<!JsonObject>} */ (this.drainText_().then(\n      parseJson\n    ));\n  }\n\n  /**\n   * Reads the xhr responseXML.\n   * @return {!Promise<!Document>}\n   * @private\n   */\n  document_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    assert(\n      this.xhr_.responseXML,\n      'responseXML should exist. Make sure to return ' +\n        'Content-Type: text/html header.'\n    );\n    return /** @type {!Promise<!Document>} */ (Promise.resolve(\n      assert(this.xhr_.responseXML)\n    ));\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * ArrayBuffer.\n   * @return {!Promise<!ArrayBuffer>}\n   */\n  arrayBuffer() {\n    return /** @type {!Promise<!ArrayBuffer>} */ (this.drainText_().then(\n      utf8EncodeSync\n    ));\n  }\n}\n\n/**\n * Provides access to the response headers as defined in the Fetch API.\n * @private Visible for testing.\n */\nexport class FetchResponseHeaders {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n  }\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  get(name) {\n    return this.xhr_.getResponseHeader(name);\n  }\n\n  /**\n   * @param {string} name\n   * @return {boolean}\n   */\n  has(name) {\n    return this.xhr_.getResponseHeader(name) != null;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MAX_Z_INDEX = 2147483647;\n\nconst Constants = {};\n\n/**\n * Supported environments.\n *\n * @enum {string}\n */\nConstants.Environment = {\n  LOCAL: 'LOCAL',\n  PREPROD: 'PREPROD',\n  PRODUCTION: 'PRODUCTION',\n  SANDBOX: 'SANDBOX',\n  TEST: 'TEST',\n  TIN: 'TIN',\n};\n\n/**\n * Supported payment methods.\n *\n * @enum {string}\n */\nConstants.PaymentMethod = {\n  CARD: 'CARD',\n  TOKENIZED_CARD: 'TOKENIZED_CARD',\n  UPI: 'UPI',\n};\n\n/**\n * Auth methods.\n *\n * @enum {string}\n */\nConstants.AuthMethod = {\n  CRYPTOGRAM_3DS: 'CRYPTOGRAM_3DS',\n  PAN_ONLY: 'PAN_ONLY',\n};\n\n/**\n * Returned result status.\n *\n * @enum {string}\n */\nConstants.ResponseStatus = {\n  CANCELED: 'CANCELED',\n  DEVELOPER_ERROR: 'DEVELOPER_ERROR',\n};\n\n/**\n * Supported total price status.\n *\n * @enum {string}\n */\nConstants.TotalPriceStatus = {\n  ESTIMATED: 'ESTIMATED',\n  FINAL: 'FINAL',\n  NOT_CURRENTLY_KNOWN: 'NOT_CURRENTLY_KNOWN',\n};\n\n/**\n * Supported Google Pay payment button type.\n *\n * @enum {string}\n */\nConstants.ButtonType = {\n  SHORT: 'short',\n  LONG: 'long',\n};\n\n/**\n * Supported button colors.\n *\n * @enum {string}\n */\nConstants.ButtonColor = {\n  DEFAULT: 'default',  // Currently defaults to black.\n  BLACK: 'black',\n  WHITE: 'white',\n};\n\n/**\n * Id attributes.\n *\n * @enum {string}\n */\nConstants.Id = {\n  POPUP_WINDOW_CONTAINER: 'popup-window-container',\n};\n\n/** @const {string} */\nConstants.STORAGE_KEY_PREFIX = 'google.payments.api.storage';\n\n/** @const {string} */\nConstants.IS_READY_TO_PAY_RESULT_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.isreadytopay.result';\n\n/** @const {string} */\nConstants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.upi.canMakePaymentCache';\n\n\nConstants.CLASS_PREFIX = 'google-payments-';\nConstants.IFRAME_ACTIVE_CONTAINER_CLASS =\n    `${Constants.CLASS_PREFIX}activeContainer`;\nConstants.IFRAME_CONTAINER_CLASS = `${Constants.CLASS_PREFIX}dialogContainer`;\nConstants.IFRAME_STYLE_CENTER_CLASS = `${Constants.CLASS_PREFIX}dialogCenter`;\nConstants.IFRAME_STYLE_CLASS = `${Constants.CLASS_PREFIX}dialog`;\n\nConstants.IFRAME_STYLE = `\n.${Constants.IFRAME_STYLE_CLASS} {\n    animation: none 0s ease 0s 1 normal none running;\n    background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n    background-blend-mode: normal;\n    border: 0 none #333;\n    border-radius: 8px 8px 0 0;\n    border-collapse: separate;\n    bottom: 0;\n    box-shadow: #808080 0 3px 0 0, #808080 0 0 22px;\n    box-sizing: border-box;\n    letter-spacing: normal;\n    max-height: 100%;\n    overflow: visible;\n    position: fixed;\n    width: 100%;\n    z-index: ${MAX_Z_INDEX};\n    -webkit-appearance: none;\n    left: 0;\n}\n@media (min-width: 480px) {\n  .${Constants.IFRAME_STYLE_CLASS} {\n    width: 480px !important;\n    left: -240px !important;\n    margin-left: calc(100vw - 100vw / 2) !important;\n  }\n}\n.${Constants.IFRAME_CONTAINER_CLASS} {\n  background-color: rgba(0,0,0,0.26);\n  bottom: 0;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  right: 0;\n}\n.iframeContainer {\n  -webkit-overflow-scrolling: touch;\n}\n`;\n\nConstants.IFRAME_STYLE_CENTER = `\n.${Constants.IFRAME_STYLE_CENTER_CLASS} {\n  animation: none 0s ease 0s 1 normal none running;\n  background-blend-mode: normal;\n  background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n  border-collapse: separate;\n  border-radius: 8px;\n  border: 0px none #333;\n  bottom: auto;\n  box-shadow: #808080 0 0 22px;\n  box-sizing: border-box;\n  left: -240px;\n  letter-spacing: normal;\n  margin-left: calc(100vw - 100vw / 2) !important;\n  max-height: 90%;\n  overflow: visible;\n  position: absolute;\n  top: 100%;\n  transform: scale(0.8);\n  width: 480px;\n  z-index: ${MAX_Z_INDEX};\n  -webkit-appearance: none;\n}\n@media (min-height: 667px) {\n  .${Constants.IFRAME_STYLE_CENTER_CLASS} {\n    max-height: 600px;\n  }\n}\n.${Constants.IFRAME_ACTIVE_CONTAINER_CLASS} {\n  top: 50%;\n  transform: scale(1.0) translateY(-50%);\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_CARD_INFO_IMAGE =\n    'background-image: url(https://pay.google.com/gp/p/generate_gpay_btn_img);';\n\nConstants.BUTTON_LOCALE_TO_MIN_WIDTH = {\n  'en': 152,\n  'bg': 163,\n  'cs': 192,\n  'de': 183,\n  'es': 183,\n  'fr': 183,\n  'hr': 157,\n  'id': 186,\n  'ja': 148,\n  'ko': 137,\n  'ms': 186,\n  'nl': 167,\n  'pl': 182,\n  'pt': 193,\n  'ru': 206,\n  'sk': 157,\n  'sl': 211,\n  'sr': 146,\n  'tr': 161,\n  'uk': 207,\n  'zh': 156,\n};\n\n/**\n * Name of the graypane.\n *\n * @const {string}\n */\nConstants.GPAY_GRAYPANE = 'gpay-graypane';\n\n/**\n * Class used for the gpay button.\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CLASS = 'gpay-button';\n\nConstants.BUTTON_STYLE = `\n.${Constants.GPAY_BUTTON_CLASS} {\n  background-origin: content-box;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: contain;\n  border: 0px;\n  border-radius: 4px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n  cursor: pointer;\n  height: 40px;\n  min-height: 40px;\n  padding: 11px 24px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black {\n  background-color: #000;\n  box-shadow: none;\n  padding: 12px 24px 10px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/dark_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/light_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.active {\n  background-color: #5f6368;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.hover {\n  background-color: #3c4043;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.active {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.focus {\n  box-shadow: #e8e8e8 0 1px 1px 0, #e8e8e8 0 1px 3px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.hover {\n  background-color: #f8f8f8;\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_OFFER_ICON_ADDITIONAL_STYLE = 'position: relative;';\n\nConstants.GPAY_OFFER_ICON_CLASS = 'gpay-offer-icon';\n\nConstants.GPAY_OFFER_ICON_SVG =\n    \"<svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\" \" +\n    \"version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\" +\n    \"\\\"http://www.w3.org/1999/xlink\\\" class=\\\"gpay-offer-icon\\\"><defs><path d=\\\"M19.41,9.58 L10.41,0.58 \" +\n    \"C10.05,0.22 9.55,0 9,0 L2,0 C0.9,0 0,0.9 0,2 L0,9 C0,9.55 0.22,10.05 \" +\n    \"0.59,10.42 L9.59,19.42 C9.95,19.78 10.45,20 11,20 C11.55,20 12.05,19.78 \" +\n    \"12.41,19.41 L19.41,12.41 C19.78,12.05 20,11.55 20,11 C20,10.45 19.77,\" +\n    \"9.94 19.41,9.58 Z\\\" id=\\\"path-1\\\"></path></defs><g id=\\\"buttons_10.05\\\"\" +\n    \" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\" +\n    \"<g id=\\\"Artboard\\\" transform=\\\"translate(-40.000000, -43.000000)\\\">\" +\n    \"<g id=\\\"Group-3\\\" transform=\\\"translate(40.000000, 43.000000)\\\">\" +\n    \"<g id=\\\"Group-2-Copy-2\\\"><g id=\\\"Group-Copy\\\"><g id=\\\"ic_loyalty_24px\\\">\" +\n    \"<mask id=\\\"mask-2\\\" fill=\\\"white\\\"><use xlink:href=\\\"#path-1\\\"></use>\" +\n    \"</mask><use id=\\\"gpay-Shape\\\" fill=\\\"#FF6100\\\" fill-rule=\\\"nonzero\\\" \" +\n    \"xlink:href=\\\"#path-1\\\"></use><path d=\\\"M3.5,5 C2.67,5 2,4.33 2,3.5 C2,\" +\n    \"2.67 2.67,2 3.5,2 C4.33,2 5,2.67 5,3.5 C5,4.33 4.33,5 3.5,5 Z\\\" \" +\n    \"id=\\\"Path\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\" mask=\\\"url(#mask-2)\\\">\" +\n    \"</path></g></g></g><g id=\\\"Group-13-Copy-7\\\" transform=\\\"translate\" +\n    \"(6.000000, 6.000000)\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\">\" +\n    \"<g id=\\\"Group-13-Copy-2\\\"><path d=\\\"M2.15217391,4.55172414 C0.963561082,\" +\n    \"4.55172414 1.99840144e-14,3.53278598 1.99840144e-14,2.27586207 \" +\n    \"C1.99840144e-14,1.01893816 0.963561082,6.30606678e-14 2.15217391,6.\" +\n    \"30606678e-14 C3.34078674,6.30606678e-14 4.30434783,1.01893816 4.30434783,\" +\n    \"2.27586207 C4.30434783,3.53278598 3.34078674,4.55172414 2.15217391,\" +\n    \"4.55172414 Z M2.15217391,3.31034483 C2.69245247,3.31034483 3.13043478,2.\" +\n    \"84719112 3.13043478,2.27586207 C3.13043478,1.70453302 2.69245247,\" +\n    \"1.24137931 2.15217391,1.24137931 C1.61189535,1.24137931 1.17391304,1\" +\n    \".70453302 1.17391304,2.27586207 C1.17391304,2.84719112 1.61189535,3.\" +\n    \"31034483 2.15217391,3.31034483 Z\\\" id=\\\"Combined-Shape\\\"></path>\" +\n    \"<path d=\\\"M6.84782609,9 C5.65921326,9 4.69565217,7.98106184 4.69565217,\" +\n    \"6.72413793 C4.69565217,5.46721402 5.65921326,4.44827586 6.84782609,\" +\n    \"4.44827586 C8.03643892,4.44827586 9,5.46721402 9,6.72413793 C9,7.98106184\" +\n    \" 8.03643892,9 6.84782609,9 Z M6.84782609,7.75862069 C7.38810465,\" +\n    \"7.75862069 7.82608696,7.29546698 7.82608696,6.72413793 C7.82608696\" +\n    \",6.15280888 7.38810465,5.68965517 6.84782609,5.68965517 C6.30754753,\" +\n    \"5.68965517 5.86956522,6.15280888 5.86956522,6.72413793 C5.86956522,\" +\n    \"7.29546698 6.30754753,7.75862069 6.84782609,7.75862069 Z\\\" \" +\n    \"id=\\\"Combined-Shape\\\"></path><polygon id=\\\"Rectangle\\\" \" +\n    \"transform=\\\"translate(4.497720, 4.541938) rotate(34.000000) \" +\n    \"translate(-4.497720, -4.541938) \\\" points=\\\"3.77901778 -0.202295978 \" +\n    \"4.9740273 -0.171019161 5.21642263 9.28617278 4.02141311 9.25489596\\\">\" +\n    \"</polygon></g></g></g></g></g></svg>\";\n\nConstants.GPAY_OFFER_ICON_STYLE = `\n.${Constants.GPAY_OFFER_ICON_CLASS} {\n  position: absolute;\n  right: -5px;\n  top: -5px;\n}\n\n#ic_loyalty_24px use.hover {\n  fill: #FC853B;\n}\n`;\n\nConstants.GPAY_OFFER_DESCRIPTION_CLASS = 'gpay-offer-description';\n\nConstants.GPAY_OFFER_DESCRIPTION_STYLE = `\n@import url(//fonts.googleapis.com/css?family=Google+Sans:500);\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS} {\n  text-align: center;\n  font: 10px 'Google Sans';\n  margin-top: 2px;\n  margin-bottom: 0px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.gpay-btn-clicked {\n  color: #3C4043;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.long {\n  min-width: 152px;\n  width: 240px;\n}\n`;\n\n/**\n * Class used for the new gpay button with card info (last 4 digits, card net).\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CARD_INFO_CLASS = 'gpay-card-info-btn';\n\nConstants.GPAY_BUTTON_CARD_INFO_BUTTON_STYLE = `\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS} {\n    background-origin: content-box;\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 0px;\n    border-radius: 4px;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n    cursor: pointer;\n    height: 40px;\n    min-height: 40px;\n    padding: 11px 24px;\n    background-color: #000;\n    box-shadow: none;\n    padding: 9px 24px 10px;\n    min-width: 190px;\n    width: 240px;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.active {\n    background-color: #5f6368;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.hover {\n    background-color: #3c4043;\n  }\n  `;\n\n\n/**\n * Trusted domain for secure context validation\n *\n * @const {string}\n */\nConstants.TRUSTED_DOMAIN = '.google.com';\n\nexport {Constants};\n\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * Injects the provided style sheet to the document head.\n * @param {string} styleText The stylesheet to be injected.\n * @return {!Element}\n */\nfunction injectStyleSheet(styleText) {\n  const styleElement = document.createElement('style');\n  styleElement.type = 'text/css';\n  styleElement.textContent = styleText;\n  document.head.appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Injects the pay with google iframe.\n * @param {string} iframeClassName The classname of the iFrame wrapper.\n * @return {!{container: !Element, iframe:!HTMLIFrameElement}}\n */\nfunction injectIframe(iframeClassName) {\n  const container = document.createElement('div');\n  container.classList.add(Constants.IFRAME_CONTAINER_CLASS);\n  const iframeContainer = document.createElement('div');\n  iframeContainer.classList.add('iframeContainer');\n  /** @private @const {!HTMLIFrameElement} */\n  const iframe =\n      /** @type {!HTMLIFrameElement} */ (document.createElement('iframe'));\n  iframe.classList.add(iframeClassName);\n  iframe.setAttribute('frameborder', '0');\n  iframe.setAttribute('scrolling', 'no');\n  iframeContainer.appendChild(iframe);\n  container.appendChild(iframeContainer);\n  document.body.appendChild(container);\n  return {'container': container, 'iframe': iframe};\n}\n\nexport {\n  injectStyleSheet,\n  injectIframe,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\nconst MAX_Z_INDEX = 2147483647;\n\n\nclass Graypane {\n\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.element_ = doc.createElement(Constants.GPAY_GRAYPANE);\n    setImportantStyles(this.element_, {\n      'z-index': MAX_Z_INDEX,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n\n    /** @private {?Window} */\n    this.popupWindow_ = null;\n\n    this.element_.addEventListener('click', () => {\n      if (this.popupWindow_) {\n        try {\n          this.popupWindow_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {?Window|undefined} popupWindow\n   * @return {!Promise}\n   */\n  show(popupWindow) {\n    this.popupWindow_ = popupWindow || null;\n    this.doc_.body.appendChild(this.element_);\n    setImportantStyles(this.element_, {\n      'display': 'block',\n      'opacity': 0,\n    });\n    return transition(this.element_, {\n      'opacity': 1,\n    }, 300, 'ease-out');\n  }\n\n  /**\n   * Hides the graypane.\n   * @return {!Promise|undefined}\n   */\n  hide() {\n    this.popupWindow_ = null;\n    if (!this.element_.parentElement) {\n      // Has already been removed or haven't been even added to DOM.\n      // This could be possible after redirect.\n      return;\n    }\n    return transition(this.element_, {\n      'opacity': 0,\n    }, 300, 'ease-out').then(() => {\n      setImportantStyles(this.element_, {'display': 'none'});\n      this.doc_.body.removeChild(this.element_);\n    });\n  }\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n *\n * The `!important` styles are used to avoid accidental specificity overrides\n * from the 3p page's stylesheet.\n *\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nfunction setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(k, styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nfunction transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(el, Object.assign({\n        'transition': `transform ${tr}, opacity ${tr}`,\n      }, props));\n    });\n  }).then(() => {\n    // Stop transition and make sure that the final properties get set.\n    setImportantStyles(el, Object.assign({\n      'transition': previousTransitionValue,\n    }, props));\n  });\n}\n\n\nexport {Graypane};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PostMessageService} from './post_message_service.js';\n\n/**\n * Supported interactions between iframe and merchant page.\n *\n * @enum {number}\n */\n// Next Id: 10\nconst PostMessageEventType = {\n  IS_READY_TO_PAY: 6,\n  LOG_BUTTON_CLICK: 5,\n  LOG_IS_READY_TO_PAY_API: 0,\n  LOG_LOAD_PAYMENT_DATA_API: 1,\n  LOG_RENDER_BUTTON: 2,\n  LOG_INITIALIZE_PAYMENTS_CLIENT: 9,\n  LOG_PAY_FRAME_REQUESTED: 15,\n  LOG_PAY_FRAME_LOADED: 16,\n  LOG_PAY_FRAME_LOADED_WITH_ALL_JS: 17,\n  LOG_INLINE_PAYMENT_WIDGET_INITIALIZE: 4,\n  LOG_INLINE_PAYMENT_WIDGET_SUBMIT: 3,\n  LOG_INLINE_PAYMENT_WIDGET_DISPLAYED: 7,\n  LOG_INLINE_PAYMENT_WIDGET_HIDDEN: 8,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst BuyFlowActivityMode = {\n  UNKNOWN_MODE: 0,\n  IFRAME: 1,\n  POPUP: 2,\n  REDIRECT: 3,\n  ANDROID_NATIVE: 4,\n  PAYMENT_HANDLER: 5,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst PublicErrorCode = {\n  UNKNOWN_ERROR_TYPE: 0,\n  INTERNAL_ERROR: 1,\n  DEVELOPER_ERROR: 2,\n  BUYER_ACCOUNT_ERROR: 3,\n  MERCHANT_ACCOUNT_ERROR: 4,\n  UNSUPPORTED_API_VERSION: 5,\n  BUYER_CANCEL: 6,\n};\n\n/**\n * The presentation mode of the buy flow\n *\n * @enum {number}\n */\nconst BuyFlowMode = {\n  PAY_WITH_GOOGLE: 5,\n  SUBSCRIBE_WITH_GOOGLE: 6,\n};\n\n/**\n * Iframe used for logging and prefetching.\n *\n * @type {?Element}\n */\nlet iframe = null;\n\n/** @type {?PostMessageService} */\nlet postMessageService = null;\n\n/** @type {?string} */\nlet environment = null;\n\n/** @type {?string} */\nlet googleTransactionId = null;\n\n/** @type {number} */\nlet originTimeMs = Date.now();\n\n/** @type {?BuyFlowActivityMode} */\nlet buyFlowActivityMode = null;\n\n/** @type {boolean} */\nlet iframeLoaded = false;\n\n/** @type {!Array<!Object>} */\nlet buffer = [];\n\nclass PayFrameHelper {\n  /**\n   * Creates a hidden iframe for logging and appends it to the top level\n   * document.\n   */\n  static load() {\n    if (iframe) {\n      return;\n    }\n    const initOptions =\n        /** @type {!PaymentOptions} */ (window['gpayInitParams']) || {};\n    environment = initOptions.environment || Constants.Environment.PRODUCTION;\n    iframe = document.createElement('iframe');\n    // Pass in origin because document.referrer inside iframe is empty in\n    // certain cases\n    // Can be replaced by iframe.src=... in non Google context.\n    iframe.src = PayFrameHelper.getIframeUrl_(\n            window.location.origin,\n            initOptions.merchantInfo && initOptions.merchantInfo.merchantId);\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_PAY_FRAME_REQUESTED,\n      'clientLatencyStartMs': Date.now(),\n    });\n    iframe.height = '0';\n    iframe.width = '0';\n    iframe.style.display = 'none';\n    iframe.style.visibility = 'hidden';\n    iframe.onload = function() {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_PAY_FRAME_LOADED_WITH_ALL_JS,\n        'clientLatencyStartMs': Date.now(),\n      });\n      PayFrameHelper.iframeLoaded();\n    };\n    // If the body is already loaded, just append the iframe. Otherwise, we wait\n    // until the DOM has loaded to append the iframe, otherwise document.body is\n    // null.\n    if (document.body) {\n      PayFrameHelper.initialize_();\n    } else {\n      document.addEventListener(\n          'DOMContentLoaded', () => PayFrameHelper.initialize_());\n    }\n  }\n\n  /**\n   * Appends the iframe to the DOM and updates the post message service.\n   * @private\n   */\n  static initialize_() {\n    document.body.appendChild(iframe);\n    postMessageService = new PostMessageService(iframe.contentWindow);\n  }\n\n  /**\n   * Sends a message to the iframe and wait for a response.\n   * Uses the responseHandler specified only if the responseType is a match.\n   *\n   * @param {!Object} data\n   * @param {!PostMessageEventType} eventType\n   * @param {string} responseType\n   * @param {function(!Event)} responseHandler\n   */\n  static sendAndWaitForResponse(\n      data, eventType, responseType, responseHandler) {\n    function callback(event) {\n      if (event.data[responseType]) {\n        responseHandler(event);\n        // We only want to process the response from the payframe once.\n        // so stop listening to the event once processed.\n        PayFrameHelper.removeMessageEventListener_(callback);\n      }\n    }\n\n    PayFrameHelper.addMessageEventListener_(callback);\n\n    const postMessageData = Object.assign({'eventType': eventType}, data);\n    PayFrameHelper.postMessage(postMessageData);\n  }\n\n  /**\n   * Add an event listener for listening to messages received.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static addMessageEventListener_(callback) {\n    window.addEventListener('message', callback);\n  }\n\n  /**\n   * Remove the event listener for listening to messages.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static removeMessageEventListener_(callback) {\n    window.removeEventListener('message', callback);\n  }\n\n  /**\n   * Posts a message to the iframe with the given data.\n   *\n   * @param {!Object} data\n   */\n  static postMessage(data) {\n    if (!iframeLoaded) {\n      buffer.push(data);\n      return;\n    }\n    const postMessageData = Object.assign(\n        {\n          'buyFlowActivityMode': buyFlowActivityMode,\n          'googleTransactionId': googleTransactionId,\n          'originTimeMs': originTimeMs,\n        },\n        data);\n    postMessageService.postMessage(\n        postMessageData, PayFrameHelper.getIframeOrigin_());\n  }\n\n  /**\n   * Sets the activity mode.\n   *\n   * @param {!BuyFlowActivityMode} mode\n   */\n  static setBuyFlowActivityMode(mode) {\n    buyFlowActivityMode = mode;\n  }\n\n  /**\n   * Sets the google transaction id.\n   *\n   * @param {string} txnId\n   */\n  static setGoogleTransactionId(txnId) {\n    googleTransactionId = txnId;\n  }\n\n  /**\n   * Sets the originTimeMs. To be used only for tests.\n   *\n   * @param {number} originTimeMsTemp\n   */\n  static setOriginTimeMs(originTimeMsTemp) {\n    originTimeMs = originTimeMsTemp;\n  }\n\n  /**\n   * Override postMessageService for testing.\n   *\n   * @param {!PostMessageService} messageService\n   */\n  static setPostMessageService(messageService) {\n    postMessageService = messageService;\n  }\n\n  /**\n   * Clears the singleton variables.\n   */\n  static reset() {\n    iframe = null;\n    buffer.length = 0;\n    iframeLoaded = false;\n    buyFlowActivityMode = null;\n  }\n\n  /**\n   * Sets whether the iframe has been loaded or not.\n   *\n   * @param {boolean} loaded\n   */\n  static setIframeLoaded(loaded) {\n    iframeLoaded = loaded;\n  }\n\n  /**\n   * Called whenever the iframe is loaded.\n   */\n  static iframeLoaded() {\n    iframeLoaded = true;\n    buffer.forEach(function(data) {\n      PayFrameHelper.postMessage(data);\n    });\n    buffer.length = 0;\n  }\n\n  /**\n   * Returns the events that have been buffered.\n   *\n   * @return {!Array<!Object>}\n   */\n  static getBuffer() {\n    return buffer;\n  }\n\n  /**\n   * Mocks the iframe as an arbitrary html element instead of actually injecting\n   * it for testing.\n   */\n  static injectIframeForTesting() {\n    PayFrameHelper.reset();\n    iframe = document.createElement('p');\n    PayFrameHelper.iframeLoaded();\n  }\n\n  /**\n   * Returns the payframe origin based on the environment.\n   *\n   * @return {string}\n   * @private\n   */\n  static getIframeOrigin_() {\n    let iframeUrl = 'https://pay';\n    if (environment == Constants.Environment.SANDBOX) {\n      iframeUrl += '.sandbox';\n    } else if (environment == Constants.Environment.PREPROD) {\n      iframeUrl += '-preprod.sandbox';\n    }\n    return iframeUrl + '.google.com';\n  }\n\n  /**\n   * Returns the payframe URL based on the environment.\n   *\n   * @param {string} origin The origin that is opening the payframe.\n   * @param {string|null=} merchantId The merchant id.\n   * @return {string}\n   * @private\n   */\n  static getIframeUrl_(origin, merchantId) {\n    // TrustedResourceUrl header needs to start with https or '//'.\n    const iframeUrl = `https://pay${environment == Constants.Environment.PREPROD ?\n             '-preprod.sandbox' :\n             environment == Constants.Environment.SANDBOX ? '.sandbox' : ''}.google.com/gp/p/ui/payframe?origin=${origin}&mid=%{merchantId}`;\n    return iframeUrl;\n  }\n}\n\nexport {\n  BuyFlowActivityMode,\n  BuyFlowMode,\n  PayFrameHelper,\n  PostMessageEventType,\n  PublicErrorCode,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {PaymentsRequestDelegate} from './payments_request_delegate.js';\nimport {PaymentsWebActivityDelegate} from './payments_web_activity_delegate.js';\nimport {UpiHandler} from './upi_handler.js';\nimport {ActivityPorts} from 'web-activities/activity-ports';\nimport {\n  BuyFlowActivityMode,\n  BuyFlowMode,\n  PayFrameHelper,\n  PostMessageEventType,\n  PublicErrorCode,\n} from './pay_frame_helper.js';\nimport {\n  apiV2DoesMerchantSupportSpecifiedCardType,\n  chromeSupportsPaymentHandler,\n  chromeSupportsPaymentRequest,\n  doesMerchantSupportOnlyTokenizedCards,\n  getUpiPaymentMethod,\n  validatePaymentOptions,\n  validateIsReadyToPayRequest,\n  validatePaymentDataRequest,\n  validateSecureContext,\n} from './validator.js';\n\nimport {createGoogleTransactionId} from './utils.js';\n\nconst TRUSTED_DOMAINS = [\n  'actions.google.com',\n  'amp-actions.sandbox.google.com',\n  'amp-actions-staging.sandbox.google.com',\n  'amp-actions-autopush.sandbox.google.com',\n  'payments.developers.google.com',\n  'payments.google.com',\n];\n\n/**\n * The client for interacting with the Google Payment APIs.\n * <p>\n * The async refers to the fact that this client supports redirects\n * when using webactivties.\n * <p>\n * If you are using this be sure that this is what you want.\n * <p>\n * In almost all cases PaymentsClient is the better client to use because\n * it exposes a promises based api which is easier to deal with.\n * @final\n */\nclass PaymentsAsyncClient {\n  /**\n   * @param {!PaymentOptions} paymentOptions\n   * @param {function(!Promise<!PaymentData>)} onPaymentResponse\n   * @param {boolean=} useIframe\n   * @param {!ActivityPorts=} activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   */\n  constructor(paymentOptions, onPaymentResponse, useIframe, activities) {\n    this.onPaymentResponse_ = onPaymentResponse;\n\n    validatePaymentOptions(paymentOptions);\n\n    /** @private {?number} */\n    this.loadPaymentDataApiStartTimeMs_ = null;\n\n    /** @private @const {string} */\n    this.environment_ =\n      paymentOptions.environment || Constants.Environment.TEST;\n    if (!PaymentsAsyncClient.googleTransactionId_) {\n      PaymentsAsyncClient.googleTransactionId_ =\n        /** @type {string} */ (this.isInTrustedDomain_() &&\n        paymentOptions['i'] &&\n        paymentOptions['i']['googleTransactionId']\n          ? paymentOptions['i']['googleTransactionId']\n          : createGoogleTransactionId(this.environment_));\n    }\n\n    /** @private @const {!PaymentOptions} */\n    this.paymentOptions_ = paymentOptions;\n\n    /** @private @const {!PaymentsClientDelegateInterface} */\n    this.webActivityDelegate_ = new PaymentsWebActivityDelegate(\n      this.environment_,\n      PaymentsAsyncClient.googleTransactionId_,\n      useIframe,\n      activities,\n      paymentOptions['i'] && paymentOptions['i']['redirectKey']\n    );\n\n    /** @private {number} */\n    this.buyFlowMode_ = BuyFlowMode.PAY_WITH_GOOGLE;\n\n    const paymentRequestSupported = chromeSupportsPaymentRequest();\n    // TODO: Remove the temporary hack that disable payments\n    // request for inline flow.\n    /** @private @const {?PaymentsClientDelegateInterface} */\n    this.delegate_ =\n      paymentRequestSupported && !useIframe\n        ? new PaymentsRequestDelegate(this.environment_)\n        : this.webActivityDelegate_;\n\n    this.upiHandler_ = new UpiHandler();\n\n    this.webActivityDelegate_.onResult(this.onResult_.bind(this));\n    this.delegate_.onResult(this.onResult_.bind(this));\n\n    // Load PayFrameHelper upon client construction.\n    PayFrameHelper.load();\n\n    // If web delegate is used anyway then this is overridden in the web\n    // activity delegate when load payment data is called.\n    if (chromeSupportsPaymentHandler()) {\n      PayFrameHelper.setBuyFlowActivityMode(\n        BuyFlowActivityMode.PAYMENT_HANDLER\n      );\n    } else if (paymentRequestSupported) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.ANDROID_NATIVE);\n    }\n\n    PayFrameHelper.setGoogleTransactionId(\n      PaymentsAsyncClient.googleTransactionId_\n    );\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_INITIALIZE_PAYMENTS_CLIENT,\n      'clientLatencyStartMs': Date.now(),\n    });\n\n    window.addEventListener('message', event =>\n      this.handleMessageEvent_(event)\n    );\n  }\n\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @export\n   */\n  isReadyToPay(isReadyToPayRequest) {\n    // Merge with paymentOptions, preferring values from isReadyToPayRequest\n    if (isReadyToPayRequest) {\n      isReadyToPayRequest = Object.assign(\n        {},\n        this.paymentOptions_,\n        isReadyToPayRequest\n      );\n    }\n    const startTimeMs = Date.now();\n    /** @type {?string} */\n    const errorMessage =\n      validateSecureContext() ||\n      validateIsReadyToPayRequest(isReadyToPayRequest);\n    if (errorMessage) {\n      return new Promise((resolve, reject) => {\n        PaymentsAsyncClient.logDevErrorToConsole_('isReadyToPay', errorMessage);\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n          'error': PublicErrorCode.DEVELOPER_ERROR,\n        });\n        reject({\n          'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n          'statusMessage': errorMessage,\n        });\n      });\n    }\n\n    const isReadyToPayPromise = this.isReadyToPay_(isReadyToPayRequest);\n\n    isReadyToPayPromise.then(response => {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n        'clientLatencyStartMs': startTimeMs,\n        'isReadyToPayApiResponse': response,\n      });\n      return response;\n    });\n    return isReadyToPayPromise;\n  }\n\n  /**\n   * Actual implementation of isReadyToPay in a private method so that\n   * we can add callbacks to the promise to measure latencies.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPay_(isReadyToPayRequest) {\n    if (this.upiHandler_.isUpiRequest(isReadyToPayRequest)) {\n      return this.upiHandler_.isReadyToPay(isReadyToPayRequest);\n    }\n    if (\n      chromeSupportsPaymentRequest() &&\n      !isNativeDisabledInRequest(isReadyToPayRequest)\n    ) {\n      if (isReadyToPayRequest.apiVersion >= 2) {\n        return this.isReadyToPayApiV2ForChromePaymentRequest_(\n          isReadyToPayRequest\n        );\n      } else {\n        // This is the apiVersion 1 branch.\n        // If the merchant supports only Tokenized cards then just rely on\n        // delegate to give us the result.\n        // This will need to change once b/78519188 is fixed.\n        const webPromise = this.webActivityDelegate_.isReadyToPay(\n          isReadyToPayRequest\n        );\n        const nativePromise = this.delegate_.isReadyToPay(isReadyToPayRequest);\n        if (\n          doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) &&\n          !chromeSupportsPaymentHandler()\n        ) {\n          return nativePromise;\n        }\n        // Return webIsReadyToPay only if delegateIsReadyToPay has been\n        // executed.\n        return nativePromise.then(() => webPromise);\n      }\n    }\n    const webPromise = this.webActivityDelegate_.isReadyToPay(\n      isReadyToPayRequest\n    );\n    return webPromise;\n  }\n\n  /**\n   * Handle is ready to pay for api v2.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPayApiV2ForChromePaymentRequest_(isReadyToPayRequest) {\n    let defaultPromise = Promise.resolve({'result': false});\n    if (isReadyToPayRequest.existingPaymentMethodRequired) {\n      defaultPromise = Promise.resolve({\n        'result': false,\n        'paymentMethodPresent': false,\n      });\n    }\n\n    let nativePromise = defaultPromise;\n    if (\n      apiV2DoesMerchantSupportSpecifiedCardType(\n        isReadyToPayRequest,\n        Constants.AuthMethod.CRYPTOGRAM_3DS\n      )\n    ) {\n      // If the merchant supports tokenized cards.\n      // Make a separate call to gms core to check if the user isReadyToPay\n      // with just tokenized cards. We can't pass in PAN_ONLY here\n      // because gms core always returns true for PAN_ONLY.\n      // Leave other payment methods as is.\n      const nativeRtpRequest /** @type {!IsReadyToPayRequest} */ = JSON.parse(\n        JSON.stringify(isReadyToPayRequest)\n      );\n      for (let i = 0; i < nativeRtpRequest.allowedPaymentMethods.length; i++) {\n        if (\n          nativeRtpRequest.allowedPaymentMethods[i].type ==\n          Constants.PaymentMethod.CARD\n        ) {\n          nativeRtpRequest.allowedPaymentMethods[i].parameters[\n            'allowedAuthMethods'\n          ] = [Constants.AuthMethod.CRYPTOGRAM_3DS];\n        }\n      }\n\n      nativePromise = this.delegate_.isReadyToPay(nativeRtpRequest);\n    }\n\n    let webPromise = defaultPromise;\n    if (\n      apiV2DoesMerchantSupportSpecifiedCardType(\n        isReadyToPayRequest,\n        Constants.AuthMethod.PAN_ONLY\n      )\n    ) {\n      webPromise = this.webActivityDelegate_.isReadyToPay(isReadyToPayRequest);\n    }\n\n    // Update session storage with payment handler canMakePayment result but\n    // rely on web delegate for actual response\n    if (chromeSupportsPaymentHandler()) {\n      return nativePromise.then(() => webPromise);\n    }\n\n    return nativePromise.then(nativeResult => {\n      if ((nativeResult && nativeResult['result']) == true) {\n        return nativeResult;\n      }\n      return webPromise;\n    });\n  }\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast since current\n   * web flow prefetching is based on the full request parameters.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  prefetchPaymentData(paymentDataRequest) {\n    /** @type {?string} */\n    const errorMessage =\n      validateSecureContext() || validatePaymentDataRequest(paymentDataRequest);\n    if (errorMessage) {\n      PaymentsAsyncClient.logDevErrorToConsole_(\n        'prefetchPaymentData',\n        errorMessage\n      );\n      return;\n    }\n    this.assignInternalParams_(paymentDataRequest);\n    if (\n      chromeSupportsPaymentRequest() &&\n      !isNativeDisabledInRequest(paymentDataRequest)\n    ) {\n      this.delegate_.prefetchPaymentData(paymentDataRequest);\n    } else {\n      // For non chrome supports always use the hosting page.\n      this.webActivityDelegate_.prefetchPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  loadPaymentData(paymentDataRequest) {\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_BUTTON_CLICK,\n    });\n    const errorMessage =\n      validateSecureContext() || validatePaymentDataRequest(paymentDataRequest);\n    this.buyFlowMode_ =\n      paymentDataRequest && paymentDataRequest.swg\n        ? BuyFlowMode.SUBSCRIBE_WITH_GOOGLE\n        : BuyFlowMode.PAY_WITH_GOOGLE;\n    if (errorMessage) {\n      this.onPaymentResponse_(\n        new Promise((resolve, reject) => {\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': PublicErrorCode.DEVELOPER_ERROR,\n            'buyFlowMode': this.buyFlowMode_,\n          });\n          PaymentsAsyncClient.logDevErrorToConsole_(\n            'loadPaymentData',\n            errorMessage\n          );\n          reject({\n            'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n            'statusMessage': errorMessage,\n          });\n        })\n      );\n      return;\n    }\n\n    // Handler for UPI PaymentMethod\n    // Currently we don't support UPI along with other payment methods, if\n    // UPI is in payment methods then we assume it is UPI only.\n    const upiPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n    if (upiPaymentMethod) {\n      this.upiHandler_.loadPaymentData(\n        paymentDataRequest,\n        upiPaymentMethod,\n        this.onResult_.bind(this)\n      );\n      return;\n    }\n\n    const isReadyToPayResult = window.sessionStorage.getItem(\n      Constants.IS_READY_TO_PAY_RESULT_KEY\n    );\n    this.loadPaymentDataApiStartTimeMs_ = Date.now();\n    this.assignInternalParams_(paymentDataRequest);\n    // We want to fall back to the web delegate if payment handler is supported\n    // and isReadyToPay bit is not explicitly set to true (fallback to web if\n    // isReadyToPay wasn't called for PH)\n    if (\n      (chromeSupportsPaymentHandler() && isReadyToPayResult !== 'true') ||\n      isNativeDisabledInRequest(paymentDataRequest)\n    ) {\n      this.webActivityDelegate_.loadPaymentData(paymentDataRequest);\n    } else {\n      this.delegate_.loadPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Log developer error to console.\n   *\n   * @param {string} apiName\n   * @param {?string} errorMessage\n   * @private\n   */\n  static logDevErrorToConsole_(apiName, errorMessage) {\n    console.error('DEVELOPER_ERROR in ' + apiName + ' : ' + errorMessage);\n  }\n\n  /**\n   * Return a <div> element containing a Google Pay payment button.\n   *\n   * @param {!ButtonOptions=} options\n   * @return {!Element}\n   * @export\n   */\n  createButton(options = {}) {\n    const button = null;\n    // Only log if button was created successfully\n    const startTimeMs = Date.now();\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_RENDER_BUTTON,\n      'clientLatencyStartMs': startTimeMs,\n    });\n    return button;\n  }\n\n  /**\n   * @param {!Event} e postMessage event from the AMP page.\n   * @private\n   */\n  handleMessageEvent_(e) {\n    if (this.isInTrustedDomain_()) {\n      // Only handles the event right now if loaded in trusted domain.\n      if (e.data['name'] === 'logPaymentData') {\n        PayFrameHelper.postMessage(e.data['data']);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {boolean}\n   */\n  isInTrustedDomain_() {\n    return TRUSTED_DOMAINS.indexOf(window.location.hostname) != -1;\n  }\n\n  /**\n   * Called when load payment data result is returned. This triggers the payment\n   * response callback passed to the client.\n   *\n   * @private\n   */\n  onResult_(response) {\n    response\n      .then(result => {\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n          'clientLatencyStartMs': this.loadPaymentDataApiStartTimeMs_,\n          'buyFlowMode': this.buyFlowMode_,\n        });\n      })\n      .catch(result => {\n        if (result['errorCode']) {\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': /** @type {!PublicErrorCode} */ (result['errorCode']),\n            'buyFlowMode': this.buyFlowMode_,\n          });\n        } else {\n          // If user closes window we don't get a error code\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': PublicErrorCode.BUYER_CANCEL,\n            'buyFlowMode': this.buyFlowMode_,\n          });\n        }\n      });\n    this.onPaymentResponse_(response);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!PaymentDataRequest}\n   * @private\n   */\n  assignInternalParams_(paymentDataRequest) {\n    const internalParam = {\n      'startTimeMs': Date.now(),\n      'googleTransactionId': PaymentsAsyncClient.googleTransactionId_,\n    };\n    paymentDataRequest['i'] = paymentDataRequest['i']\n      ? Object.assign(internalParam, paymentDataRequest['i'])\n      : internalParam;\n    return paymentDataRequest;\n  }\n}\n\n/** @const {?string} */\nPaymentsAsyncClient.googleTransactionId_;\n\n/**\n * Whether the request specifies that the native support has to be disabled.\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {boolean}\n */\nfunction isNativeDisabledInRequest(request) {\n  return (request['i'] && request['i']['disableNative']) === true;\n}\n\nexport {PaymentsAsyncClient};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface which captures what we need to start up buyflow across surfaces.\n * @interface\n */\nclass PaymentsClientDelegateInterface {\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(isReadyToPayRequest) {}\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  prefetchPaymentData(paymentDataRequest) {}\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  loadPaymentData(paymentDataRequest) {}\n\n  /**\n   * @param {function(!Promise<!PaymentData>)} callback\n   */\n  onResult(callback) {}\n}\n\nexport {PaymentsClientDelegateInterface};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Description of this file.\n */\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\n\n/**\n * An implementation of PaymentsClientDelegateInterface that leverages payment\n * request.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsRequestDelegate {\n  /**\n   * @param {string} environment\n   */\n  constructor(environment) {\n    this.environment_ = environment;\n\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n  }\n\n  /** @override */\n  onResult(callback) {\n    this.callback_ = callback;\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    /** @type{!PaymentRequest} */\n    const paymentRequest = this.createPaymentRequest_(isReadyToPayRequest);\n    return new Promise((resolve, reject) => {\n      paymentRequest.canMakePayment()\n          .then(result => {\n            window.sessionStorage.setItem(\n                Constants.IS_READY_TO_PAY_RESULT_KEY, result.toString());\n            const response = {'result': result};\n            if (isReadyToPayRequest.apiVersion >= 2 &&\n                isReadyToPayRequest.existingPaymentMethodRequired) {\n              // For apiVersion 2, we always use native to only check for\n              // tokenized cards.\n              // For tokenized cards native always does a presence check so\n              // we can say that if canMakePayment is true for native for\n              // tokenizedCards then the user has a payment method which is\n              // present.\n              response['paymentMethodPresent'] = result;\n            }\n            resolve(response);\n          })\n          .catch(function(err) {\n            if (window.sessionStorage.getItem(\n                    Constants.IS_READY_TO_PAY_RESULT_KEY)) {\n              resolve({\n                'result': window.sessionStorage.getItem(\n                              Constants.IS_READY_TO_PAY_RESULT_KEY) == 'true'\n              });\n            } else {\n              resolve({'result': false});\n            }\n          });\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Creating PaymentRequest instance will call\n    // Gcore isReadyToPay internally which will prefetch tempaltes.\n    this.createPaymentRequest_(\n        paymentDataRequest, this.environment_,\n        paymentDataRequest.transactionInfo.currencyCode,\n        paymentDataRequest.transactionInfo.totalPrice);\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    this.loadPaymentDataThroughPaymentRequest_(paymentDataRequest);\n  }\n\n  /**\n   * Create PaymentRequest instance.\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request The necessary information to check if user is\n   *     ready to pay or to support a payment from merchants.\n   * @param {?string=} environment (optional)\n   * @param {?string=} currencyCode (optional)\n   * @param {?string=} totalPrice (optional)\n   * @return {!PaymentRequest} PaymentRequest instance.\n   * @private\n   */\n  createPaymentRequest_(request, environment, currencyCode, totalPrice) {\n    let data = {};\n    if (request) {\n      data = JSON.parse(JSON.stringify(request));\n    }\n\n    // Only set the apiVersion if the merchant doesn't set it.\n    if (!data['apiVersion']) {\n      data['apiVersion'] = 1;\n    }\n\n    // Add allowedPaymentMethods for swg to get through gms core validation.\n    if (data['swg']) {\n      data['allowedPaymentMethods'] = [Constants.PaymentMethod.CARD];\n    }\n\n    if (environment && environment == Constants.Environment.TEST) {\n      data['environment'] = environment;\n    }\n\n    const supportedInstruments = [{\n      'supportedMethods': ['https://google.com/pay'],\n      'data': data,\n    }];\n\n    const details = {\n      'total': {\n        'label': 'Estimated Total Price',\n        'amount': {\n          // currency and value are required fields in PaymentRequest, but these\n          // fields will never be used since PaymentRequest UI is skipped when\n          // we're the only payment method, so default to some value to by pass\n          // this requirement.\n          'currency': currencyCode || 'USD',\n          'value': totalPrice || '0',\n        }\n      }\n    };\n\n    return new PaymentRequest(supportedInstruments, details);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @private\n   */\n  loadPaymentDataThroughPaymentRequest_(paymentDataRequest) {\n    const currencyCode = (paymentDataRequest.transactionInfo &&\n                          paymentDataRequest.transactionInfo.currencyCode) ||\n        undefined;\n    const totalPrice = (paymentDataRequest.transactionInfo &&\n                        paymentDataRequest.transactionInfo.totalPrice) ||\n        undefined;\n    const paymentRequest = this.createPaymentRequest_(\n        paymentDataRequest, this.environment_, currencyCode, totalPrice);\n    this.callback_(\n        /** @type{!Promise<!PaymentData>} */\n        (paymentRequest.show()\n             .then(\n                 /**\n                  * @param {!PaymentResponse} paymentResponse\n                  * @return {!PaymentData}\n                  */\n                 (paymentResponse) => {\n                   // Should be called to dismiss any remaining UI\n                   paymentResponse.complete('success');\n                   return paymentResponse.details;\n                 })\n             .catch(function(err) {\n               err['statusCode'] = Constants.ResponseStatus.CANCELED;\n               throw err;\n             })));\n  }\n}\n\nexport {PaymentsRequestDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {Graypane} from './graypane.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {\n  ActivityPort,\n  ActivityPorts,\n  ActivityIframePort,\n} from 'web-activities/activity-ports';\nimport {\n  BuyFlowActivityMode,\n  PayFrameHelper,\n  PostMessageEventType,\n} from './pay_frame_helper.js';\nimport {doesMerchantSupportOnlyTokenizedCards} from './validator.js';\nimport {injectStyleSheet, injectIframe} from './element_injector.js';\n\nconst GPAY_ACTIVITY_REQUEST = 'GPAY';\nconst IFRAME_CLOSE_DURATION_IN_MS = 250;\nconst IFRAME_SHOW_UP_DURATION_IN_MS = 250;\nconst IFRAME_SMOOTH_HEIGHT_TRANSITION = `height ${IFRAME_SHOW_UP_DURATION_IN_MS}ms`;\nconst ERROR_PREFIX = 'Error: ';\n\n/**\n * Supported browser user agent keys.\n *\n * @enum {string}\n */\nconst BrowserUserAgent = {\n  CHROME: 'Chrome',\n  FIREFOX: 'Firefox',\n  SAFARI: 'Safari',\n};\n\n/**\n * Resizing payload including resize height and transition style.\n *\n * @typedef {{\n *   height: string,\n *   transition: string,\n * }}\n */\nlet ResizePayload;\n\n/**\n * An implementation of PaymentsClientDelegateInterface that uses the custom\n * hosting page along with web activities to actually get to the hosting page.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsWebActivityDelegate {\n  /**\n   * @param {string} environment\n   * @param {string} googleTransactionId\n   * @param {boolean=} useIframe\n   * @param {!ActivityPorts=} activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   * @param {?string=} redirectKey The redirect key used for redirect mode.\n   */\n  constructor(\n    environment,\n    googleTransactionId,\n    useIframe,\n    activities,\n    redirectKey\n  ) {\n    this.environment_ = environment;\n    /** @private @const {boolean} */\n\n    /** @const {!ActivityPorts} */\n    this.activities = activities || new ActivityPorts(window);\n    /** @const @private {!Graypane} */\n    this.graypane_ = new Graypane(window.document);\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n    /**\n     * @private {?{\n     *             container: !Element,\n     *             iframe:!HTMLIFrameElement,\n     *             request:!PaymentDataRequest,\n     *             dataPromise:?Promise<!PaymentData>}}\n     */\n    this.prefetchedObjects_ = null;\n    /** @private {boolean} */\n    this.shouldHandleResizing_ = false;\n    /** @private {?ActivityIframePort} */\n    this.port_ = null;\n    /** @private {?function(!Promise<void>)} */\n    this.dismissPromiseResolver_ = null;\n    /** @const @private {string} */\n    this.googleTransactionId_ = googleTransactionId;\n    /** @const @private {?string} */\n    this.redirectKey_ = redirectKey || null;\n\n    /**\n     * @private {?ResizePayload}\n     */\n    this.savedResizePayload_ = null;\n\n    // Only install dialog styles when iframing is allowed.\n    if (null) {\n      injectStyleSheet(Constants.IFRAME_STYLE);\n      if (null) {\n        injectStyleSheet(Constants.IFRAME_STYLE_CENTER);\n      }\n    }\n  }\n\n  /** @override */\n  onResult(callback) {\n    if (this.callback_) {\n      return;\n    }\n    this.callback_ = callback;\n    this.activities.onResult(\n      GPAY_ACTIVITY_REQUEST,\n      this.onActivityResult_.bind(this)\n    );\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @private\n   */\n  onActivityResult_(port) {\n    // Hide the graypane.\n    this.graypane_.hide();\n    // Only verified origins are allowed.\n    this.callback_(\n      port.acceptResult().then(\n        result => {\n          // Origin must always match: popup, iframe or redirect.\n          if (result.origin != this.getOrigin_()) {\n            throw new Error('channel mismatch');\n          }\n          const data = /** @type {!PaymentData} */ (result.data);\n          if (data['redirectEncryptedCallbackData']) {\n            PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.REDIRECT);\n            return this.fetchRedirectResponse_(\n              data['redirectEncryptedCallbackData']\n            ).then(decrypedJson => {\n              // Merge other non-encrypted fields into the final response.\n              const clone = Object.assign({}, data);\n              delete clone['redirectEncryptedCallbackData'];\n              return Object.assign(clone, decrypedJson);\n            });\n          }\n          // Unencrypted data supplied: must be a verified and secure channel.\n          if (!result.originVerified || !result.secureChannel) {\n            throw new Error('channel mismatch');\n          }\n          return data;\n        },\n        error => {\n          // TODO: Log the original and the inferred error to eye3.\n          const originalError = error['message'];\n          let inferredError = error['message'];\n          try {\n            // Try to parse the error message to a structured error, if it's\n            // not possible, fallback to use the error message string.\n            inferredError = JSON.parse(\n              originalError.substring(ERROR_PREFIX.length)\n            );\n          } catch (e) {}\n          if (\n            inferredError['statusCode'] &&\n            ['DEVELOPER_ERROR', 'MERCHANT_ACCOUNT_ERROR'].indexOf(\n              inferredError['statusCode']\n            ) == -1\n          ) {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          if (inferredError == 'AbortError') {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          return Promise.reject(inferredError);\n        }\n      )\n    );\n  }\n\n  /**\n   * @param {string} redirectEncryptedCallbackData\n   * @return {!PaymentData}\n   * @private\n   */\n  fetchRedirectResponse_(redirectEncryptedCallbackData) {\n    // This method has to rely on the legacy XHR API because the redirect\n    // functionality is, in part, aimed at older browsers.\n    return new Promise((resolve, reject) => {\n      const url = this.getDecryptionUrl_();\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', url, true);\n      if ('withCredentials' in xhr) {\n        // It's fine to proceed in a non-redirect mode because redirectVerifier\n        // plays the part of CORS propagation.\n        xhr.withCredentials = true;\n      }\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n          return;\n        }\n        if (xhr.status < 100 || xhr.status > 599) {\n          xhr.onreadystatechange = null;\n          reject(new Error(`Unknown HTTP status ${xhr.status}`));\n          return;\n        }\n        if (xhr.readyState == /* COMPLETE */ 4) {\n          try {\n            resolve(JSON.parse(xhr.responseText));\n          } catch (e) {\n            // JSON parsing error is expected here.\n            reject(e);\n          }\n        }\n      };\n      xhr.onerror = () => {\n        reject(new Error('Network failure'));\n      };\n      xhr.onabort = () => {\n        reject(new Error('Request aborted'));\n      };\n\n      // Send POST.\n      xhr.send(redirectEncryptedCallbackData);\n    });\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    return new Promise((resolve, reject) => {\n      if (doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest)) {\n        resolve({'result': false});\n        return;\n      }\n      const userAgent = window.navigator.userAgent;\n      const isIosGsa =\n        userAgent.indexOf('GSA/') > 0 &&\n        userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      // pop up in IGSA doesn't work.\n      if (isIosGsa && !null) {\n        resolve({'result': false});\n        return;\n      }\n      const isFirefoxIos = userAgent.indexOf('FxiOS') > 0;\n      if (isFirefoxIos) {\n        resolve({'result': false});\n        return;\n      }\n      const isSupported =\n        userAgent.indexOf(BrowserUserAgent.CHROME) > 0 ||\n        userAgent.indexOf(BrowserUserAgent.FIREFOX) > 0 ||\n        userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      if (\n        isSupported &&\n        isReadyToPayRequest.apiVersion >= 2 &&\n        isReadyToPayRequest.existingPaymentMethodRequired\n      ) {\n        isReadyToPayRequest.environment = this.environment_;\n        PayFrameHelper.sendAndWaitForResponse(\n          isReadyToPayRequest,\n          PostMessageEventType.IS_READY_TO_PAY,\n          'isReadyToPayResponse',\n          function(event) {\n            const response = {\n              'result': isSupported,\n            };\n            if (isReadyToPayRequest.existingPaymentMethodRequired) {\n              response['paymentMethodPresent'] =\n                event.data['isReadyToPayResponse'] == 'READY_TO_PAY';\n            }\n            resolve(response);\n          }\n        );\n      } else {\n        resolve({'result': isSupported});\n      }\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Only handles prefetch for iframe for now.\n    if (!null) {\n      return;\n    }\n    const containerAndFrame = this.injectIframe_(paymentDataRequest);\n    const paymentDataPromise = this.openIframe_(\n      containerAndFrame['container'],\n      containerAndFrame['iframe'],\n      paymentDataRequest\n    );\n    this.prefetchedObjects_ = {\n      'container': containerAndFrame['container'],\n      'iframe': containerAndFrame['iframe'],\n      'request': paymentDataRequest,\n      'dataPromise': paymentDataPromise,\n    };\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      // Only set the apiVersion if the merchant is not setting it.\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    if (null) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.IFRAME);\n      // TODO: Compare the request with prefetched request.\n      let containerAndFrame;\n      let paymentDataPromise;\n      if (this.prefetchedObjects_) {\n        // Rendering prefetched frame and container.\n        containerAndFrame = this.prefetchedObjects_;\n        paymentDataPromise = this.prefetchedObjects_['dataPromise'];\n        this.prefetchedObjects_ = null;\n      } else {\n        containerAndFrame = this.injectIframe_(paymentDataRequest);\n        paymentDataPromise = this.openIframe_(\n          containerAndFrame['container'],\n          containerAndFrame['iframe'],\n          paymentDataRequest\n        );\n      }\n      this.showContainerAndIframeWithAnimation_(\n        containerAndFrame['container'],\n        containerAndFrame['iframe'],\n        paymentDataRequest\n      );\n      history.pushState({}, '', '');\n      const onPopState = e => {\n        e.preventDefault();\n        this.backButtonHandler_(containerAndFrame);\n        window.removeEventListener('popstate', onPopState);\n      };\n      window.addEventListener('popstate', onPopState);\n      const dismissPromise = new Promise(resolve => {\n        this.dismissPromiseResolver_ = resolve;\n      });\n      this.callback_(Promise.race([paymentDataPromise, dismissPromise]));\n      return;\n    }\n    PayFrameHelper.setBuyFlowActivityMode(\n      paymentDataRequest['forceRedirect']\n        ? BuyFlowActivityMode.REDIRECT\n        : BuyFlowActivityMode.POPUP\n    );\n    const opener = this.activities.open(\n      GPAY_ACTIVITY_REQUEST,\n      this.getHostingPageUrl_(),\n      this.getRenderMode_(paymentDataRequest),\n      paymentDataRequest,\n      {'width': 600, 'height': 600}\n    );\n    this.graypane_.show(opener && opener.targetWin);\n  }\n\n  /**\n   * Returns the render mode whether need to force redirect.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {string}\n   * @private\n   */\n  getRenderMode_(paymentDataRequest) {\n    return paymentDataRequest['forceRedirect'] ? '_top' : 'gp-js-popup';\n  }\n\n  /**\n   * Returns the server origin based on the environment.\n   *\n   * @private\n   * @return {string}\n   */\n  getOrigin_() {\n    if (this.environment_ == Constants.Environment.LOCAL) {\n      return '';\n    }\n\n    let baseDomain;\n    if (this.environment_ == Constants.Environment.PREPROD) {\n      baseDomain = 'pay-preprod.sandbox';\n    } else if (this.environment_ == Constants.Environment.SANDBOX) {\n      baseDomain = 'pay.sandbox';\n    } else {\n      baseDomain = 'pay';\n    }\n    return 'https://' + baseDomain + '.google.com';\n  }\n\n  /**\n   * Returns the base path based on the environment.\n   *\n   * @private\n   * @return {string} The base path\n   */\n  getBasePath_() {\n    return this.getOrigin_() + '/gp/p';\n  }\n\n  /**\n   * Returns the decryption url to be used to decrypt the encrypted payload.\n   *\n   * @private\n   * @return {string} The decryption url\n   */\n  getDecryptionUrl_() {\n    let url = this.getBasePath_() + '/apis/buyflow/process';\n    if (this.redirectKey_) {\n      url += '?rk=' + encodeURIComponent(this.redirectKey_);\n    }\n    return url;\n  }\n\n  /**\n   * Returns the hosting page url.\n   *\n   * @private\n   * @return {string} The hosting page url\n   */\n  getHostingPageUrl_() {\n    // In Tin tests, the hosting page is requested from\n    // /testing/buyflow/merchantdemo.html and is accessed relatively since the\n    // base path is unknown ahead of time.\n    if (this.environment_ == Constants.Environment.TIN) {\n      // There is no /gp/p prefix since multilogin prefixes is broken in Tin:\n      // http://yaqs/4912322941550592\n      return '/ui/pay';\n    }\n    return this.getBasePath_() + '/ui/pay';\n  }\n\n  /**\n   * Returns the iframe pwg url to be used to be used for amp.\n   *\n   * @param {string} environment\n   * @param {string} origin\n   * @return {string} The iframe url\n   */\n  getIframeUrl(environment, origin) {\n    // TODO: These should be compile time constants and not dependent\n    // on the environment.\n    let iframeUrl = `https://pay.google.com/gp/p/ui/pay?origin=${origin}`;\n    if (\n      environment == Constants.Environment.SANDBOX ||\n      environment == Constants.Environment.PREPROD\n    ) {\n      iframeUrl = `https://pay'+  (environment == Constants.Environment.PREPROD ? '-preprod' : '')+  '.sandbox.google.com/gp/p/ui/pay?origin=${origin}`;\n    }\n    return iframeUrl;\n  }\n\n  /**\n   * Close iframe with animation.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @private\n   */\n  removeIframeAndContainer_(container, iframe) {\n    const transitionStyle = 'all ' + IFRAME_CLOSE_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    iframe.height = '0px';\n    // TODO: This should be replaced by listening to TransitionEnd event\n    setTimeout(() => {\n      if (container.parentNode) {\n        container.parentNode.removeChild(container);\n      }\n    }, IFRAME_CLOSE_DURATION_IN_MS);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {{container: !Element, iframe:!HTMLIFrameElement}}\n   * @private\n   */\n  injectIframe_(paymentDataRequest) {\n    const containerAndFrame = injectIframe(\n      this.isVerticalCenterExperimentEnabled_(paymentDataRequest)\n        ? Constants.IFRAME_STYLE_CENTER_CLASS\n        : Constants.IFRAME_STYLE_CLASS\n    );\n    const iframe = containerAndFrame['iframe'];\n    const container = containerAndFrame['container'];\n    container.addEventListener(\n      'click',\n      this.closeActionHandler_.bind(this, containerAndFrame)\n    );\n    // Hide iframe and disable resize at initialize.\n    container.style.display = 'none';\n    iframe.style.display = 'none';\n    iframe.height = '0px';\n    const transitionStyle =\n      'all ' + IFRAME_SHOW_UP_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    this.shouldHandleResizing_ = false;\n    return containerAndFrame;\n  }\n\n  /**\n   * Handler when back button is triggered, should dismiss iframe if present.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  backButtonHandler_(containerAndFrame) {\n    this.dismissIframe_(containerAndFrame);\n  }\n\n  /**\n   * Handler when close action is triggered, will pop history state to close\n   * the iframe.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  closeActionHandler_(containerAndFrame) {\n    if (containerAndFrame['container'].parentNode) {\n      // Close action only when container is still attached to the page.\n      history.back();\n    }\n  }\n\n  /**\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  dismissIframe_(containerAndFrame) {\n    // Dismiss iframe only when container is still attached in the page.\n    if (containerAndFrame['container'].parentNode) {\n      // TODO: Think about whether this could be just hide instead of\n      // disconnect and remove, the tricky part is how to handle the case where\n      // payment data request is not the same.\n      this.dismissPromiseResolver_(Promise.reject({'errorCode': 'CANCELED'}));\n      this.removeIframeAndContainer_(\n        containerAndFrame['container'],\n        containerAndFrame['iframe']\n      );\n      this.port_ && this.port_.disconnect();\n    }\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {boolean}\n   * @private\n   */\n  isVerticalCenterExperimentEnabled_(paymentDataRequest) {\n    return (\n      null &&\n      paymentDataRequest['i'] &&\n      paymentDataRequest['i'].renderContainerCenter\n    );\n  }\n\n  /**\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @private\n   */\n  showContainerAndIframeWithAnimation_(container, iframe, paymentDataRequest) {\n    container.style.display = 'block';\n    iframe.style.display = 'block';\n    setTimeout(() => {\n      // Hard code the apprx height here, it will be resize to expected height\n      // later.\n      iframe.height = '280px';\n      if (this.isVerticalCenterExperimentEnabled_(paymentDataRequest)) {\n        iframe.classList.add(Constants.IFRAME_ACTIVE_CONTAINER_CLASS);\n      }\n      // TODO: This should be handles properly by listening to\n      // TransitionEnd event.\n      setTimeout(() => {\n        this.shouldHandleResizing_ = true;\n        // TODO: Add browser test that catches this.\n        if (this.savedResizePayload_) {\n          this.setTransition_(iframe, this.savedResizePayload_['transition']);\n          iframe.height = this.savedResizePayload_['height'];\n          this.savedResizePayload_ = null;\n        }\n      }, IFRAME_SHOW_UP_DURATION_IN_MS);\n    }, 1);\n  }\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} transitionStyle\n   * @private\n   */\n  setTransition_(iframe, transitionStyle) {\n    iframe.style.setProperty('transition', transitionStyle);\n    // For safari.\n    iframe.style.setProperty('-webkit-transition', transitionStyle);\n  }\n\n  /**\n   * Use WebActivitiy to open iframe that's in given container.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!Promise<!PaymentData>}\n   * @private\n   */\n  openIframe_(container, iframe, paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    let iframeLoadStartTime;\n    const trustedUrl = this.getIframeUrl(\n      this.environment_,\n      window.location.origin\n    );\n    return this.activities\n      .openIframe(iframe, trustedUrl, paymentDataRequest)\n      .then(port => {\n        // Handle custom resize message.\n        this.port_ = port;\n        port.onMessage(payload => {\n          if (payload['type'] !== 'resize' || !this.shouldHandleResizing_) {\n            // Save the resize event later after initial animation is finished\n            this.savedResizePayload_ = {\n              'height': payload['height'],\n              'transition': payload['transition'],\n            };\n            return;\n          }\n          // b/111310899: Smooth out initial iFrame loading\n          if (!iframeLoadStartTime) {\n            iframeLoadStartTime = Date.now();\n          }\n          if (\n            Date.now() <\n            iframeLoadStartTime + IFRAME_SHOW_UP_DURATION_IN_MS\n          ) {\n            this.setTransition_(\n              iframe,\n              payload['transition'] + ', ' + IFRAME_SMOOTH_HEIGHT_TRANSITION\n            );\n          } else {\n            this.setTransition_(iframe, payload['transition']);\n          }\n          iframe.height = payload['height'];\n        });\n        return /** @type {!Promise<!Object>} */ (port.acceptResult());\n      })\n      .then(\n        /**\n         * @param {!Object} result\n         * @return {!PaymentData}\n         */\n        result => {\n          this.removeIframeAndContainer_(container, iframe);\n          // This is only for popping the state we pushed earlier.\n          history.back();\n          const data = /** @type {!PaymentData} */ (result['data']);\n          return data;\n        },\n        error => {\n          this.removeIframeAndContainer_(container, iframe);\n          // This is only for popping the state we pushed earlier.\n          history.back();\n          return Promise.reject(error);\n        }\n      );\n  }\n}\n\nexport {PaymentsWebActivityDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Service wrapping window.parent.postMessage. This enables\n * window.postMessage to be swapped out in unit tests.\n */\nclass PostMessageService {\n  constructor(window) {\n    /** @private @const {!Window} */\n    this.window_ = window;\n  }\n\n  /**\n   * Passthrough to Window#postMessage. See Window#postMessage DOM API\n   * documentation for more information about arguments.\n   *\n   * @param {!Object} message\n   * @param {string} targetOrigin\n   */\n  postMessage(message, targetOrigin) {\n    this.window_.postMessage(message, targetOrigin);\n  }\n}\n\nexport {PostMessageService};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PublicErrorCode} from './pay_frame_helper.js';\nimport {getUpiPaymentMethod} from './validator.js';\n\nclass UpiHandler {\n  constructor() {}\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {boolean}\n   */\n  isUpiRequest(request) {\n    return !!getUpiPaymentMethod(request);\n  }\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(request) {\n    // Always return true for UPI if api version is 2 and chrome supports\n    // payment request\n    if (getUpiPaymentMethod(request)) {\n      if (request.existingPaymentMethodRequired) {\n        return Promise.resolve({'result': true, 'paymentMethodPresent': true});\n      } else {\n        return Promise.resolve({'result': true});\n      }\n    }\n    throw new Error('No Upi payment method found in handler');\n  }\n\n  /**\n   * Request payment data when payment method is UPI\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   *     allowedPaymentMethods array.\n   * @param {!Function} onResultCallback Function to call when everything is\n   *     done.\n   */\n  loadPaymentData(paymentDataRequest, upiPaymentMethod, onResultCallback) {\n    const parameters = upiPaymentMethod['parameters'];\n    const transactionInfo = paymentDataRequest['transactionInfo'];\n    const supportedInstruments = null ?\n        [{\n          // This is the url for Tez teamfood release.\n          'supportedMethods': ['https://pwp-server.appspot.com/pay-teamfood'],\n          'data': {\n            'pa': 'redbus@axisbank',\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': '4131',\n            'tn': 'Purchase in Merchant',\n          },\n        }] :\n        [{\n          'supportedMethods': ['https://tez.google.com/pay'],\n          'data': {\n            'pa': parameters['payeeVpa'],\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': parameters['mcc'],\n            'tn': transactionInfo['transactionNote'],\n          },\n        }];\n\n    if (parameters['transactionId']) {\n      supportedInstruments[0]['data']['tid'] = parameters['transactionId'];\n    }\n\n    const details = {\n      'total': {\n        'label': 'Total',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      },\n      'displayItems': [{\n        'label': 'Original Amount',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      }],\n    };\n\n    let request = new PaymentRequest(supportedInstruments, details);\n\n    onResultCallback(\n        this.checkCanMakePayment_(request)\n            .then(result => {\n              if (result) {\n                return this.showUi_(request);\n              } else {\n                return this.redirectToGooglePlay_();\n              }\n            })\n            .then(paymentData => {\n              return this.processData_(\n                  paymentData, paymentDataRequest, upiPaymentMethod);\n            })\n            .catch(error => {\n              error['statusCode'] = Constants.ResponseStatus.CANCELED;\n              return Promise.reject(error);\n            }));\n  }\n\n  /**\n   * Show the Tez payment request UI.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<!PaymentData>} A promise containing payment response.\n   */\n  showUi_(request) {\n    return request.show().then(paymentResponse => {\n      paymentResponse.complete('success');\n      return paymentResponse.details;\n    });\n  }\n\n  /**\n   * Checks whether can make a payment with Tez on this device.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<boolean>} a promise containing the result of whether can\n   *     make payment.\n   */\n  checkCanMakePayment_(request) {\n    // Checks canMakePayment cache, and use the cache result if it exists.\n    const cacheResult =\n        window.sessionStorage.getItem(Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY);\n    if (cacheResult) {\n      return Promise.resolve(cacheResult === 'true');\n    }\n\n    // Feature detect canMakePayment().\n    if (!request.canMakePayment) {\n      return Promise.resolve(true);\n    }\n\n    let canMakePaymentPromise = request.canMakePayment();\n\n    return canMakePaymentPromise.then(result => {\n      // Store the result in cache if the result is true to avoid quota error\n      // caused by querying multiple times with different data.\n      // Doesn't store false because if we do so, user will be redirected to\n      // Google Play again after installing Google Pay if Chrome is not closed.\n      if (result) {\n        window.sessionStorage.setItem(\n            Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY, result.toString());\n      }\n      return result;\n    });\n  }\n\n  /**\n   * Redirect user to Google Pay app in Google Play store\n   *\n   * @private\n   * @returns {!Promise<!Object>} Rejected promise with error message\n   */\n  redirectToGooglePlay_() {\n    window.location.replace(\n        null ?\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user.teamfood ' :  // NOLINT\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user');  // NOLINT\n    return Promise.reject(\n        {'errorMessage': 'Cannot redirect to Tez page in Google Play.'});\n  }\n\n  /**\n   * Convert Tez payment data to GPay payment data if payment succeeded, or\n   * reject if payment failed\n   *\n   * @private\n   * @param {!PaymentData} tezPaymentData The payment data object from Tez.\n   * @param {!PaymentDataRequest} paymentDataRequest The payment data request.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   * allowedPaymentMethods array\n   * @returns {!Promise<PaymentData>} A promise containing payment data or\n   *     error message.\n   */\n  processData_(tezPaymentData, paymentDataRequest, upiPaymentMethod) {\n    const tezResponse = JSON.parse(tezPaymentData['tezResponse']);\n    if (tezResponse['Status'] === 'FAILURE') {\n      let error;\n      switch (tezResponse['responseCode']) {\n        case 'ZM':\n          // payment failure due to invalid MPIN\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to invalid MPIN.'\n          };\n          break;\n        case 'Z9':\n          // payment failure due to insufficient funds\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to insufficient funds.'\n          };\n          break;\n        case '91':\n          // payment failure due to transaction timeout or connection issue\n          error = {\n            'errorCode': PublicErrorCode.INTERNAL_ERROR,\n            'errorMessage':\n                'Payment failure due to transaction timeout or connection' +\n                ' issue.'\n          };\n          break;\n        default:\n          // payment failure due to user cancel or other issues\n          error = {'errorMessage': 'Payment cancelled.'};\n      }\n      return Promise.reject(error);\n    }\n\n    const signedMessage = {\n      'paymentMethodType': 'UPI',\n      'payeeVpa': upiPaymentMethod['parameters']['payeeVpa'],\n      'status': tezResponse['Status'],\n      'transactionReferenceId':\n          upiPaymentMethod['parameters']['transactionReferenceId'],\n      'transactionId': upiPaymentMethod['parameters']['transactionId'] ?\n          upiPaymentMethod['parameters']['transactionId'] :\n          tezResponse['txnId'],\n      'transactionInfo': paymentDataRequest['transactionInfo'],\n    };\n\n    let paymentData = {\n      'apiVersion': paymentDataRequest['apiVersion'],\n      'apiVersionMinor': paymentDataRequest['apiVersionMinor'],\n      'paymentMethodData': {\n        'type': upiPaymentMethod['type'],\n        'tokenizationData': {\n          'type': 'DIRECT',\n          'token': {\n            'protocolVersion': 'ECv1',\n            // TODO: Verify that response comes from tez and\n            // add signature and encrypt signed message here\n            'signature': '',\n            'signedMessage': signedMessage\n          }\n        }\n      }\n    };\n    return Promise.resolve(paymentData);\n  }\n}\n\nexport {UpiHandler};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport uuid from '../third_party/random_uuid/Random.uuid.js';\n\n/**\n * Returns a google transaction id.\n *\n * @param {string} environment\n * @return {string}\n */\nfunction createGoogleTransactionId(environment) {\n  return uuid.uuidFast() + '.' + environment;\n}\n\nexport {createGoogleTransactionId};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentHandler.\n */\nfunction chromeSupportsPaymentHandler() {\n  // Check if feature is enabled for user\n  if (typeof google == 'undefined' ||\n      !null) {\n    return false;\n  }\n\n  // Payment handler isn't supported on mobile\n  const mobilePlatform = window.navigator.userAgent.match(\n      /Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n  if (mobilePlatform != null) {\n    return false;\n  }\n\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return 'PaymentRequest' in window && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 68 &&\n      window.navigator.vendor == 'Google Inc.';\n}\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentRequest.\n */\nfunction chromeSupportsPaymentRequest() {\n  // Opera uses chrome as rendering engine and sends almost the exact same\n  // user agent as chrome thereby fooling us on android.\n  const isOpera = window.navigator.userAgent.indexOf('OPR/') != -1;\n  if (isOpera) {\n    return false;\n  }\n  if (chromeSupportsPaymentHandler()) {\n    return true;\n  }\n\n  const androidPlatform = window.navigator.userAgent.match(/Android/i);\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return androidPlatform != null && 'PaymentRequest' in window &&\n      // Make sure skipping PaymentRequest UI when only one PaymentMethod is\n      // supported (starts on Google Chrome 59).\n      window.navigator.vendor == 'Google Inc.' && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 59;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n *\n * @return {boolean} true if the merchant only supports tokenized cards.\n */\nfunction doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.length == 1 &&\n        allowedAuthMethods[0] == Constants.AuthMethod.CRYPTOGRAM_3DS) {\n      return true;\n    }\n  }\n  return isReadyToPayRequest.allowedPaymentMethods.length == 1 &&\n      isReadyToPayRequest.allowedPaymentMethods[0] ==\n      Constants.PaymentMethod.TOKENIZED_CARD;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {Constants.AuthMethod} apiV2AuthMethod\n *\n * @return {boolean} true if the merchant supports pan cards.\n */\nfunction apiV2DoesMerchantSupportSpecifiedCardType(\n    isReadyToPayRequest, apiV2AuthMethod) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.includes(apiV2AuthMethod)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * Validate if is secure context. Returns null if context is secure, otherwise\n * return error message.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n *\n * @return {?string} null if current context is secure, otherwise return error\n * message.\n */\nfunction validateSecureContext() {\n  if (window.location.hostname.endsWith(Constants.TRUSTED_DOMAIN)) {\n    // This is for local development.\n    return null;\n  }\n  if (window.isSecureContext === undefined) {\n    // Browser not support isSecureContext, figure out a way to validate this\n    // for the unsupported browser.\n    return null;\n  }\n  return window.isSecureContext ?\n      null :\n      'Google Pay APIs should be called in secure context!';\n}\n\n/**\n * Validate PaymentOptions.\n *\n * @param {!PaymentOptions} paymentOptions\n */\nfunction validatePaymentOptions(paymentOptions) {\n  if (paymentOptions.environment &&\n      !Object.values(Constants.Environment)\n           .includes(paymentOptions.environment)) {\n    throw new Error(\n        'Parameter environment in PaymentOptions can optionally be set to ' +\n        'PRODUCTION, otherwise it defaults to TEST. ' + paymentOptions.environment);\n  }\n}\n\n/**\n * Validate IsReadyToPayRequest.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validateIsReadyToPayRequest(isReadyToPayRequest) {\n  if (!isReadyToPayRequest) {\n    return 'isReadyToPayRequest must be set!';\n  } else if (isReadyToPayRequest.apiVersion >= 2) {\n    if (!('apiVersionMinor' in isReadyToPayRequest)) {\n      return 'apiVersionMinor must be set!';\n    }\n    if (!isReadyToPayRequest.allowedPaymentMethods ||\n        !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n        isReadyToPayRequest.allowedPaymentMethods.length == 0) {\n      return 'for v2 allowedPaymentMethods must be set to an array containing a list of accepted payment methods';\n    }\n    for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n      let allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n      if (allowedPaymentMethod['type'] == Constants.PaymentMethod.CARD) {\n        if (!allowedPaymentMethod['parameters']) {\n          return 'Field parameters must be setup in each allowedPaymentMethod';\n        }\n        var allowedCardNetworks =\n            allowedPaymentMethod['parameters']['allowedCardNetworks'];\n        if (!allowedCardNetworks || !Array.isArray(allowedCardNetworks) ||\n            allowedCardNetworks.length == 0) {\n          return 'allowedCardNetworks must be setup in parameters for type CARD';\n        }\n        var allowedAuthMethods =\n            allowedPaymentMethod['parameters']['allowedAuthMethods'];\n        if (!allowedAuthMethods || !Array.isArray(allowedAuthMethods) ||\n            allowedAuthMethods.length == 0 ||\n            !allowedAuthMethods.every(isAuthMethodValid)) {\n          return 'allowedAuthMethods must be setup in parameters for type \\'CARD\\' ' +\n              ' and must contain \\'CRYPTOGRAM_3DS\\' and/or \\'PAN_ONLY\\'';\n        }\n      }\n    }\n    return null;\n  } else if (\n      !isReadyToPayRequest.allowedPaymentMethods ||\n      !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n      isReadyToPayRequest.allowedPaymentMethods.length == 0 ||\n      !isReadyToPayRequest.allowedPaymentMethods.every(isPaymentMethodValid)) {\n    return 'allowedPaymentMethods must be set to an array containing \\'CARD\\' ' +\n        'and/or \\'TOKENIZED_CARD\\'!';\n  }\n  return null;\n}\n\n/**\n * Validate the payment method.\n *\n * @param {string} paymentMethod\n * @return {boolean} if the current payment method is valid.\n */\nfunction isPaymentMethodValid(paymentMethod) {\n  return Object.values(Constants.PaymentMethod).includes(paymentMethod);\n}\n\n/**\n * Validate the auth method.\n *\n * @param {string} authMethod\n * @return {boolean} if the current auth method is valid.\n */\nfunction isAuthMethodValid(authMethod) {\n  return Object.values(Constants.AuthMethod).includes(authMethod);\n}\n\n/**\n * Validate PaymentDataRequest.\n *\n * @param {!PaymentDataRequest} paymentDataRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequest(paymentDataRequest) {\n  if (!paymentDataRequest) {\n    return 'paymentDataRequest must be set!';\n  }\n  if (paymentDataRequest.swg) {\n    return validatePaymentDataRequestForSwg(paymentDataRequest.swg);\n  } else if (!paymentDataRequest.transactionInfo) {\n    return 'transactionInfo must be set!';\n  } else if (!paymentDataRequest.transactionInfo.currencyCode) {\n    return 'currencyCode in transactionInfo must be set!';\n  } else if (\n      !paymentDataRequest.transactionInfo.totalPriceStatus ||\n      !Object.values(Constants.TotalPriceStatus)\n           .includes(paymentDataRequest.transactionInfo.totalPriceStatus)) {\n    return 'totalPriceStatus in transactionInfo must be set to one of' +\n        ' NOT_CURRENTLY_KNOWN, ESTIMATED or FINAL!';\n  } else if (\n      paymentDataRequest.transactionInfo.totalPriceStatus !==\n          'NOT_CURRENTLY_KNOWN' &&\n      !paymentDataRequest.transactionInfo.totalPrice) {\n    return 'totalPrice in transactionInfo must be set when' +\n        ' totalPriceStatus is ESTIMATED or FINAL!';\n  }\n\n  // Validate payment data request for UPI payment method\n  const allowedPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n  if (allowedPaymentMethod) {\n    if (!allowedPaymentMethod['parameters']) {\n      return 'parameters must be set in allowedPaymentMethod!';\n    }\n\n    var parameters = allowedPaymentMethod['parameters'];\n    if (!parameters['payeeVpa']) {\n      return 'payeeVpa in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['payeeName']) {\n      return 'payeeName in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['referenceUrl']) {\n      return 'referenceUrl in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['mcc']) {\n      return 'mcc in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['transactionReferenceId']) {\n      return 'transactionReferenceId in allowedPaymentMethod parameters' +\n          ' must be set!';\n    }\n\n    if (paymentDataRequest['transactionInfo']['currencyCode'] !== 'INR') {\n      return 'currencyCode in transactionInfo must be set to INR!';\n    } else if (\n        paymentDataRequest['transactionInfo']['totalPriceStatus'] !== 'FINAL') {\n      return 'totalPriceStatus in transactionInfo must be set to FINAL!';\n    } else if (!paymentDataRequest['transactionInfo']['transactionNote']) {\n      return 'transactionNote in transactionInfo must be set!';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns upi payment method object if it exists in allowed payment methods\n * or null if it doesn't\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {?Object}\n */\nfunction getUpiPaymentMethod(request) {\n  if (!chromeSupportsPaymentRequest() || request.apiVersion < 2 ||\n      !request.allowedPaymentMethods) {\n    return null;\n  }\n  return getAllowedPaymentMethodForType_(request, Constants.PaymentMethod.UPI);\n}\n\n/**\n * Validate parameters for swg.\n *\n * @param {?SwgParameters} swgParameters\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequestForSwg(swgParameters) {\n  if (!swgParameters) {\n    return 'Swg parameters must be provided';\n  }\n  if (!swgParameters.skuId || !swgParameters.publicationId) {\n    return 'Both skuId and publicationId must be provided';\n  }\n  return null;\n}\n\n/**\n * Returns the allowedAuthMethods for a card from the request.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?Array<string>}\n * @private\n */\nfunction extractAllowedAuthMethodsForCards_(isReadyToPayRequest) {\n  if (isReadyToPayRequest.allowedPaymentMethods) {\n    const allowedPaymentMethod = getAllowedPaymentMethodForType_(\n        isReadyToPayRequest, Constants.PaymentMethod.CARD);\n    if (allowedPaymentMethod && allowedPaymentMethod.parameters) {\n      return allowedPaymentMethod.parameters['allowedAuthMethods'];\n    }\n  }\n  return null;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {string} paymentMethodType\n * @return {?PaymentMethod} Return first payment method for the given type,\n *     return null if not found.\n * @private\n */\nfunction getAllowedPaymentMethodForType_(\n    isReadyToPayRequest, paymentMethodType) {\n  for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n    const allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n    if (allowedPaymentMethod.type == paymentMethodType) {\n      return allowedPaymentMethod;\n    }\n  }\n  return null;\n}\n\nexport {\n  apiV2DoesMerchantSupportSpecifiedCardType,\n  chromeSupportsPaymentHandler,\n  chromeSupportsPaymentRequest,\n  doesMerchantSupportOnlyTokenizedCards,\n  getUpiPaymentMethod,\n  isPaymentMethodValid,\n  validateIsReadyToPayRequest,\n  validatePaymentOptions,\n  validatePaymentDataRequest,\n  validateSecureContext\n};\n","/** @license\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\n\nexport default class Random_uuid {};\n  // Private array of chars to use\n  var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n  Random_uuid.uuid = function (len, radix) {\n    var chars = CHARS, uuid = [], i;\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      var r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n\n  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n  // by minimizing calls to random()\n  Random_uuid.uuidFast = function() {\n    var chars = CHARS, uuid = new Array(36), rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = '-';\n      } else if (i==14) {\n        uuid[i] = '4';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n    return uuid.join('');\n  };\n\n  // A more compact, but less performant, RFC4122v4 solution:\n  Random_uuid.uuidCompact = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n  };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}